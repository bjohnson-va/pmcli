syntax = "proto3";

package billing.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "billing/payment_card.proto";
import "billing/merchant.proto";
import "billing/prepaid_sale.proto";
import "billing/invoice.proto";

// Create a billable item
message CreateBillableItemRequest {
    // The id of the merchant selling the product.
    string merchant_id = 1;
    // Unique id representing a product (Stock Keeping Unit).
    string sku = 2;
    // The reference to the owner in the external system.
    string customer_id = 3;
    // Unique id for this instance of the sku.
    string order_id = 4;
    // (Optional) The date when the billable item is expired.
    google.protobuf.Timestamp expiry = 5;
    // (Optional) The date at which a billable item starts billing. This date can be in the past.
    google.protobuf.Timestamp billing_start = 6;
}

// Update a billable item's expiry date
message ExpireBillableItemRequest {
    // The id of the merchant selling the product.
    string merchant_id = 1;
    // Unique id representing a product (Stock Keeping Unit).
    string sku = 2;
    // The reference to the owner in the external system
    string customer_id = 3;
    // Unique id for this instance of the sku.
    string order_id = 4;
    // The date when the billable item is expired.
    google.protobuf.Timestamp expiry = 5;
}

// Create a merchant
message CreateMerchantRequest {
    // The unique id of the merchant
    string merchant_id = 1;
    // The address of the merchant
    string address = 2;
    // The city of the merchant
    string city = 3;
    // The state of the merchant
    string state = 4;
    // The country of the merchant
    string country = 5;
    // The zip code of the merchant
    string zip_code = 6;
    // The email address of the merchant
    string email_address = 7;
    // The phone number of the merchant
    string phone_number = 8;
    // The contact name for the merchant
    string contact_name = 9;
    // The company name of the merchant
    string company_name = 10;
}

// Get a merchant
message GetMerchantRequest {
    // The unique id of the merchant
    string merchant_id = 1;
}

// GetMerchantResponse returns a merchant
message GetMerchantResponse {
    // a get of the merchant data
    Merchant merchant = 1;
}

// Update a merchant
message UpdateMerchantRequest {
    // The unique id of the merchant
    string merchant_id = 1;
    // The address of the merchant
    string address = 2;
    // The city of the merchant
    string city = 3;
    // The state of the merchant
    string state = 4;
    // The country of the merchant
    string country = 5;
    // The zip code of the merchant
    string zip_code = 6;
    // The email address of the merchant
    string email_address = 7;
    // The phone number of the merchant
    string phone_number = 8;
    // The contact name for the merchant
    string contact_name = 9;
    // The company name of the merchant
    string company_name = 10;
}

// Adds a Payment card to a customer
message CreatePaymentCardRequest {
    // The unique id of the stripe customer
    string merchant_id = 1;
    // The token to access stripes API
    string stripe_token = 2;
}

// Get the payment cards for a merchant
message ListPaymentCardsRequest {
    // The unique id of the merchant
    string merchant_id = 1;
}

// GetPaymentMethodResponse returns the payment method configured for a merchant
message ListPaymentCardsResponse {
    // A get of the configured payment cards for this merchant
    repeated PaymentCard payment_card = 1;
}

// Update a payment card
message UpdatePaymentCardRequest {
     // The unique id of the stripe customer
    string merchant_id = 1;
    // The token to access stripes API
    string stripe_token = 2;
}
// Delete a billable item
message DeleteBillableItemRequest {
    // The id of the merchant selling the product.
    string merchant_id = 1;
    // Unique id representing a product (Stock Keeping Unit).
    string sku = 2;
    // The reference to the owner in the external system
    string customer_id = 3;
    // Unique id for this instance of the sku.
    string order_id = 4;
}

// Generate an invoice for a given period
message GenerateInvoiceRequest {
    // The id of the merchant to generate an invoice for
    string merchant_id = 1;
    // The start date of the invoice period
    google.protobuf.Timestamp period_start = 2;
    // The end date of the invoice period
    google.protobuf.Timestamp period_end = 3;
}

// GenerateInvoiceResponse returns the invoice_id of the invoice being generated
message GenerateInvoiceResponse {
    // An invoice identifier
    int64 invoice_id = 1;
}

// GetInvoiceRequest requests an invoice matching the provided invoice_id
message GetInvoiceRequest {
    int64 invoice_id = 1;
}

// GetInvoiceResponse returns an invoice
message GetInvoiceResponse {
    // An invoice
    Invoice invoice = 1;
}

// ListInvoiceRequest requests multiple invoices for a merchant
message ListInvoiceRequest {
    string merchant_id = 1;
    // Options for how to page the response for this request
    PagedRequestOptions paging_options = 2;
}

// ListInvoiceResponse returns an invoice
message ListInvoiceResponse {
    // The invoices
    repeated Invoice invoice = 1;
    // Metadata about the paging
    PagedResponseMetadata paging_metadata = 2;
    
}

// ChargeRequest requests a charge to a merchant
message ChargeRequest {
    // A merchant identifier
    string merchant_id = 1;
    // A list of amount to invoice allocations
    repeated Allocation allocations = 3;
}

// AddLineItemRequest adds a lineitem to the invoice
message AddLineItemRequest {
    // The invoice to add the line item to
    int64 invoice_id = 1;
    // The identifier of what products/subscription this lineitem refers to. Does not conform to the SKU standard
    string sku = 2;
    // How much each item cost (in cents)
    int64 unit_price = 3;
    // The number of items purchased
    int64 quantity = 4;
    // The name or human readable description of what is being purchased
    string description = 5;
}

// PostInvoiceRequest posts the invoice
message PostInvoiceRequest {
    // The invoice to add the line item to
    int64 invoice_id = 1;
}

message PagedResponseMetadata {
    // A cursor that can be provided to retrieve the next page of results
    string next_cursor = 1;
    // Whether or not more results exist
    bool has_more = 2;
}

message PagedRequestOptions {
    // cursor can be passed to retrieve the next page of results keyed by the cursor
    string cursor = 1;
    // page_size specifies the number of items to return in the next page
    int64 page_size = 2;
}

service Billing {
    // Creates a Billable Item
    rpc CreateBillableItem(CreateBillableItemRequest) returns (google.protobuf.Empty){};
    // Updates a Billable Item
    rpc ExpireBillableItem(ExpireBillableItemRequest) returns (google.protobuf.Empty){};
    // Delete a Billable Item
    rpc DeleteBillableItem(DeleteBillableItemRequest) returns (google.protobuf.Empty){};
}

service MerchantService {
    // Creates a Merchant
    rpc Create(CreateMerchantRequest) returns (google.protobuf.Empty){};
    // Gets a Merchant
    rpc Get(GetMerchantRequest) returns (GetMerchantResponse);
    // Update a Merchant
    rpc Update(UpdateMerchantRequest) returns (google.protobuf.Empty){};
    // Adds a payment card to the system
    rpc CreatePaymentCard (CreatePaymentCardRequest) returns (google.protobuf.Empty) {};
    // List payment cards
    rpc ListPaymentCards (ListPaymentCardsRequest) returns (ListPaymentCardsResponse);
    // Update a payment card in the system
    rpc UpdatePaymentCard (UpdatePaymentCardRequest) returns (google.protobuf.Empty) {};
    // Charge a merchant for an amount
    rpc Charge(ChargeRequest) returns (google.protobuf.Empty){};
}

service PrepaidSaleService {
    // List prepaid sales
    rpc List(ListPrepaidSalesRequest) returns (ListPrepaidSalesResponse) {};
    // Create a prepaid sale
    rpc Create(CreatePrepaidSaleRequest) returns (google.protobuf.Empty) {};
    // Update a prepaid sale
    rpc Update(UpdatePrepaidSaleRequest) returns (google.protobuf.Empty) {};
    // Delete a prepaid sale
    rpc Delete(DeletePrepaidSaleRequest) returns (google.protobuf.Empty) {};
}

service InvoiceService {
    // Generate an invoice for a period
    rpc Generate(GenerateInvoiceRequest) returns (GenerateInvoiceResponse);
    // Get an invoice
    rpc Get(GetInvoiceRequest) returns (GetInvoiceResponse);
    // List invoices
    rpc List(ListInvoiceRequest) returns (ListInvoiceResponse);
    // Add Line Item to an Invoice
    rpc AddLineItem(AddLineItemRequest) returns (google.protobuf.Empty);
    // Posts an invoice
    rpc Post(PostInvoiceRequest) returns (google.protobuf.Empty);   
}