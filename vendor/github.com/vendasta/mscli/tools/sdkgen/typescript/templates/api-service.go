package templates

//APIServiceTemplate is the template that generate the <name>.api.service.ts
var APIServiceTemplate = `{{- $template := . -}}
// *********************************
// Code generated by sdkgen
// DO NOT EDIT!.
//
// API Service.
// *********************************
import {Injectable} from '@angular/core';
import {
	{{- range $template.UniqueRequestAndResponseClassNames -}}{{- $class := . }}
		{{ $class }},
	{{- end }}
} from './objects';
import {
	{{- range $template.UniqueRequestAndResponseClassNames -}}{{- $class := . }}
		{{ $class }}Interface,
	{{- end }}
} from './interfaces';
import {HttpHeaders, HttpClient, HttpResponse} from '@angular/common/http';
import {HostService} from '../_generated';
import {Observable} from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/share';

@Injectable()
export class {{ $template.TsName }}ApiService {

	constructor(private http: HttpClient, private hostService: HostService) {
	}

	private apiOptions(): {headers: HttpHeaders, withCredentials: boolean} {
		return {
			headers: new HttpHeaders({
				'Content-Type': 'application/json'
			}),
			withCredentials: true
		};
	}

	{{ range $template.RPCS -}}{{- $rpc := . -}}
	{{- if eq $rpc.ResponseIsEmpty true -}}
	{{ $rpc.TsName }}(r: {{ $rpc.RequestClassName }} | {{ $rpc.RequestClassName }}Interface): Observable<HttpResponse<null>> {
		const request = ((<{{ $rpc.RequestClassName }}>r).toApiJson) ? (<{{ $rpc.RequestClassName }}>r) : new {{ $rpc.RequestClassName }}(r);
		return this.http.post<null>(this.hostService.hostWithScheme() + "{{.Path}}", request.toApiJson(), {...this.apiOptions(), observe: 'response'});
	{{- end }}
	{{- if eq $rpc.ResponseIsEmpty false -}}
	{{ $rpc.TsName }}(r: {{ $rpc.RequestClassName }} | {{ $rpc.RequestClassName }}Interface): Observable<{{ $rpc.ResponseClassName }}> {
		const request = ((<{{ $rpc.RequestClassName }}>r).toApiJson) ? (<{{ $rpc.RequestClassName }}>r) : new {{ $rpc.RequestClassName }}(r);
		return this.http.post<{{ $rpc.ResponseClassName }}Interface>(this.hostService.hostWithScheme() + "{{.Path}}", request.toApiJson(), this.apiOptions())
			.map(resp => {{ $rpc.ResponseClassName }}.fromProto(resp))
			.share();
	{{- end }}
	}
	{{ end }}
}
`
