package templates

//ObjectsTemplate is the template for generating objects
var ObjectsTemplate = `{{- $template := . -}}
// *********************************
// Code generated by sdkgen
// DO NOT EDIT!.
//
// Objects.
// *********************************
import * as i from '../interfaces';
import * as o from '.';
{{ if eq $template.IncludeEnums true -}}
import * as e from '../enums';

export function enumStringToValue<E>(enumRef: any, value: string): E {
  if (typeof value === 'number') {
    return value;
  }
  return enumRef[value];
}
{{ end -}}

{{ range $message := $template.Descriptor.Messages }}
export class {{ $message.Message.Name }} implements i.{{ $message.InterfaceName }} {
	{{- range $field := $message.Message.Field }}
	{{ $field.JsonName }}: {{ $template.Descriptor.FieldToProperty $field false }};
	{{- end }}

	static fromProto(proto: any): {{ $message.Message.Name }} {
		if (!proto) {
			return null;
		}
		const m = new {{ $message.Message.Name }}();
		for (let key in proto) {
			if (proto.hasOwnProperty(key)) {
				m[key] = proto[key];
			}
		}
		{{- range $field := $message.Message.Field -}}
			{{- if ne ($template.Descriptor.FieldFromProto $field) ""}}
		{{ $template.Descriptor.FieldFromProto $field }}
			{{- end }}
		{{- end }}
		return m;
	}

	constructor(kwargs?: i.{{ $message.InterfaceName }}) {
		if (!kwargs) {
			return;
		}
		for (let key in kwargs) {
			if (kwargs.hasOwnProperty(key)) {
				this[key] = kwargs[key];
			}
		}
	}

	toApiJson(): object {
		{{- if ne (len $message.Message.Field) 0 }}
		if ({{- range $i, $field := $message.Message.Field -}}
			{{- if ne $i 0 }} && {{- end }}
			typeof this.{{ $field.JsonName }} === 'undefined'
			{{- end -}}
		) {
			return null;
		}
		{{ end }}
		return {
			{{- range $i, $field := $message.Message.Field -}}
			{{- if ne $i 0 }}, {{- end }}
			{{ $template.Descriptor.FieldToProtoValue $field }}
			{{- end }}
		}
	}
}
{{ end }}
`
