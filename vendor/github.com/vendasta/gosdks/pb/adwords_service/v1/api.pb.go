// Code generated by protoc-gen-go. DO NOT EDIT.
// source: adwords_service/v1/api.proto

package adwords_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Keywords service

type KeywordsClient interface {
	// Request keyword suggestions for a business
	GetKeywordSuggestions(ctx context.Context, in *GetKeywordSuggestionsRequest, opts ...grpc.CallOption) (*GetKeywordSuggestionsResponse, error)
	// Request performance estimations For a Campaign of Keywords
	GetCampaignPerformanceEstimation(ctx context.Context, in *GetCampaignPerformanceEstimationRequest, opts ...grpc.CallOption) (*GetCampaignPerformanceEstimationResponse, error)
}

type keywordsClient struct {
	cc *grpc.ClientConn
}

func NewKeywordsClient(cc *grpc.ClientConn) KeywordsClient {
	return &keywordsClient{cc}
}

func (c *keywordsClient) GetKeywordSuggestions(ctx context.Context, in *GetKeywordSuggestionsRequest, opts ...grpc.CallOption) (*GetKeywordSuggestionsResponse, error) {
	out := new(GetKeywordSuggestionsResponse)
	err := grpc.Invoke(ctx, "/adwords.v1.Keywords/GetKeywordSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordsClient) GetCampaignPerformanceEstimation(ctx context.Context, in *GetCampaignPerformanceEstimationRequest, opts ...grpc.CallOption) (*GetCampaignPerformanceEstimationResponse, error) {
	out := new(GetCampaignPerformanceEstimationResponse)
	err := grpc.Invoke(ctx, "/adwords.v1.Keywords/GetCampaignPerformanceEstimation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Keywords service

type KeywordsServer interface {
	// Request keyword suggestions for a business
	GetKeywordSuggestions(context.Context, *GetKeywordSuggestionsRequest) (*GetKeywordSuggestionsResponse, error)
	// Request performance estimations For a Campaign of Keywords
	GetCampaignPerformanceEstimation(context.Context, *GetCampaignPerformanceEstimationRequest) (*GetCampaignPerformanceEstimationResponse, error)
}

func RegisterKeywordsServer(s *grpc.Server, srv KeywordsServer) {
	s.RegisterService(&_Keywords_serviceDesc, srv)
}

func _Keywords_GetKeywordSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeywordSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordsServer).GetKeywordSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adwords.v1.Keywords/GetKeywordSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordsServer).GetKeywordSuggestions(ctx, req.(*GetKeywordSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keywords_GetCampaignPerformanceEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignPerformanceEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordsServer).GetCampaignPerformanceEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adwords.v1.Keywords/GetCampaignPerformanceEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordsServer).GetCampaignPerformanceEstimation(ctx, req.(*GetCampaignPerformanceEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Keywords_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adwords.v1.Keywords",
	HandlerType: (*KeywordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeywordSuggestions",
			Handler:    _Keywords_GetKeywordSuggestions_Handler,
		},
		{
			MethodName: "GetCampaignPerformanceEstimation",
			Handler:    _Keywords_GetCampaignPerformanceEstimation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adwords_service/v1/api.proto",
}

// Client API for Reports service

type ReportsClient interface {
	// Request a performance report for an Adwords Account; identified by customer ID (CID)
	GetAccountPerformance(ctx context.Context, in *GetAccountPerformanceRequest, opts ...grpc.CallOption) (*GetAccountPerformanceResponse, error)
}

type reportsClient struct {
	cc *grpc.ClientConn
}

func NewReportsClient(cc *grpc.ClientConn) ReportsClient {
	return &reportsClient{cc}
}

func (c *reportsClient) GetAccountPerformance(ctx context.Context, in *GetAccountPerformanceRequest, opts ...grpc.CallOption) (*GetAccountPerformanceResponse, error) {
	out := new(GetAccountPerformanceResponse)
	err := grpc.Invoke(ctx, "/adwords.v1.Reports/GetAccountPerformance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reports service

type ReportsServer interface {
	// Request a performance report for an Adwords Account; identified by customer ID (CID)
	GetAccountPerformance(context.Context, *GetAccountPerformanceRequest) (*GetAccountPerformanceResponse, error)
}

func RegisterReportsServer(s *grpc.Server, srv ReportsServer) {
	s.RegisterService(&_Reports_serviceDesc, srv)
}

func _Reports_GetAccountPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).GetAccountPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adwords.v1.Reports/GetAccountPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).GetAccountPerformance(ctx, req.(*GetAccountPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reports_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adwords.v1.Reports",
	HandlerType: (*ReportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountPerformance",
			Handler:    _Reports_GetAccountPerformance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adwords_service/v1/api.proto",
}

// Client API for Accounts service

type AccountsClient interface {
	// Request a list of accounts for a user identified by an oauth_token
	ListAllAccounts(ctx context.Context, in *ListAllAccountsRequest, opts ...grpc.CallOption) (*ListAllAccountsResponse, error)
}

type accountsClient struct {
	cc *grpc.ClientConn
}

func NewAccountsClient(cc *grpc.ClientConn) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) ListAllAccounts(ctx context.Context, in *ListAllAccountsRequest, opts ...grpc.CallOption) (*ListAllAccountsResponse, error) {
	out := new(ListAllAccountsResponse)
	err := grpc.Invoke(ctx, "/adwords.v1.Accounts/ListAllAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounts service

type AccountsServer interface {
	// Request a list of accounts for a user identified by an oauth_token
	ListAllAccounts(context.Context, *ListAllAccountsRequest) (*ListAllAccountsResponse, error)
}

func RegisterAccountsServer(s *grpc.Server, srv AccountsServer) {
	s.RegisterService(&_Accounts_serviceDesc, srv)
}

func _Accounts_ListAllAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ListAllAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adwords.v1.Accounts/ListAllAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ListAllAccounts(ctx, req.(*ListAllAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adwords.v1.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllAccounts",
			Handler:    _Accounts_ListAllAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adwords_service/v1/api.proto",
}

func init() { proto.RegisterFile("adwords_service/v1/api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xad, 0x07, 0x2d, 0xb9, 0x08, 0x01, 0x2f, 0x45, 0xa4, 0xac, 0x17, 0xbd, 0xa4, 0xb4,
	0xf5, 0x0f, 0x54, 0x91, 0x1e, 0xf4, 0x50, 0xea, 0x55, 0x90, 0x98, 0x1d, 0xd7, 0x40, 0x37, 0x13,
	0x33, 0xb3, 0x2b, 0xfd, 0x0f, 0x82, 0x7f, 0x59, 0x5c, 0x36, 0x6b, 0x69, 0xd7, 0xc5, 0x1e, 0x33,
	0xef, 0x9b, 0xf7, 0x86, 0x47, 0xc4, 0x99, 0x4e, 0x3f, 0x30, 0xa4, 0xf4, 0x4c, 0x10, 0x4a, 0x6b,
	0x60, 0x54, 0x8e, 0x47, 0xda, 0x5b, 0xe5, 0x03, 0x32, 0x4a, 0x51, 0xab, 0xaa, 0x1c, 0x0f, 0x86,
	0x6d, 0x64, 0x2d, 0x57, 0xf4, 0xe4, 0xf3, 0x50, 0xf4, 0xef, 0x61, 0x5d, 0x8d, 0xa4, 0x13, 0xa7,
	0x73, 0xe0, 0xfa, 0xf9, 0x58, 0x64, 0x19, 0x10, 0x5b, 0x74, 0x24, 0x2f, 0xd5, 0xaf, 0xa9, 0x6a,
	0x45, 0x96, 0xf0, 0x5e, 0x00, 0xf1, 0xe0, 0xea, 0x1f, 0x24, 0x79, 0x74, 0x04, 0xc9, 0x81, 0xfc,
	0xea, 0x89, 0xe1, 0x1c, 0xf8, 0x56, 0xe7, 0x5e, 0xdb, 0xcc, 0x2d, 0x20, 0xbc, 0x62, 0xc8, 0xb5,
	0x33, 0x70, 0x47, 0x6c, 0x73, 0xfd, 0xc3, 0xcb, 0xe9, 0x96, 0x63, 0x27, 0x1d, 0xcf, 0xb8, 0xde,
	0x6f, 0x29, 0x5e, 0x34, 0x59, 0x8b, 0xe3, 0x25, 0x78, 0x0c, 0x1c, 0xcb, 0x98, 0x19, 0x83, 0x85,
	0xe3, 0x8d, 0xbd, 0x9d, 0x32, 0x76, 0x91, 0xbf, 0xca, 0x68, 0x23, 0x9b, 0xe8, 0x37, 0xd1, 0xaf,
	0x75, 0x92, 0x4f, 0xe2, 0xe4, 0xc1, 0x12, 0xcf, 0x56, 0xab, 0x66, 0x94, 0x6c, 0x7a, 0x6d, 0x89,
	0x31, 0xef, 0xa2, 0x93, 0x89, 0x49, 0x37, 0x89, 0x38, 0x37, 0x98, 0xab, 0x12, 0x5c, 0xaa, 0x89,
	0x75, 0xb3, 0x94, 0x81, 0x83, 0xa0, 0x19, 0xd2, 0x45, 0xef, 0xe5, 0xa8, 0xfa, 0x1e, 0xd3, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x41, 0x09, 0xd0, 0x6c, 0x02, 0x00, 0x00,
}
