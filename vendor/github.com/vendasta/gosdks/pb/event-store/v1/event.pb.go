// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

/*
Package eventstore_v1 is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	Event
	ListEventsRequest
	CreateEventRequest
	ListEventsResponse
	CreateEventResponse
*/
package eventstore_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AggregateType int32

const (
	AggregateType_CAMPAIGN AggregateType = 0
)

var AggregateType_name = map[int32]string{
	0: "CAMPAIGN",
}
var AggregateType_value = map[string]int32{
	"CAMPAIGN": 0,
}

func (x AggregateType) String() string {
	return proto.EnumName(AggregateType_name, int32(x))
}
func (AggregateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event struct {
	EventId       string                     `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AggregateType AggregateType              `protobuf:"varint,2,opt,name=aggregate_type,json=aggregateType,enum=eventstore.v1.AggregateType" json:"aggregate_type,omitempty"`
	AggregateId   string                     `protobuf:"bytes,3,opt,name=aggregate_id,json=aggregateId" json:"aggregate_id,omitempty"`
	Payload       string                     `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	Timestamp     *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Event) GetAggregateType() AggregateType {
	if m != nil {
		return m.AggregateType
	}
	return AggregateType_CAMPAIGN
}

func (m *Event) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func (m *Event) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Event) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// *******************
// Requests
// *******************
type ListEventsRequest struct {
	AggregateType AggregateType `protobuf:"varint,1,opt,name=aggregate_type,json=aggregateType,enum=eventstore.v1.AggregateType" json:"aggregate_type,omitempty"`
}

func (m *ListEventsRequest) Reset()                    { *m = ListEventsRequest{} }
func (m *ListEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEventsRequest) ProtoMessage()               {}
func (*ListEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListEventsRequest) GetAggregateType() AggregateType {
	if m != nil {
		return m.AggregateType
	}
	return AggregateType_CAMPAIGN
}

type CreateEventRequest struct {
	AggregateType AggregateType              `protobuf:"varint,1,opt,name=aggregate_type,json=aggregateType,enum=eventstore.v1.AggregateType" json:"aggregate_type,omitempty"`
	AggregateId   string                     `protobuf:"bytes,2,opt,name=aggregate_id,json=aggregateId" json:"aggregate_id,omitempty"`
	Payload       string                     `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Timestamp     *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CreateEventRequest) Reset()                    { *m = CreateEventRequest{} }
func (m *CreateEventRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEventRequest) ProtoMessage()               {}
func (*CreateEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateEventRequest) GetAggregateType() AggregateType {
	if m != nil {
		return m.AggregateType
	}
	return AggregateType_CAMPAIGN
}

func (m *CreateEventRequest) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func (m *CreateEventRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *CreateEventRequest) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// *******************
// Responses
// *******************
type ListEventsResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *ListEventsResponse) Reset()                    { *m = ListEventsResponse{} }
func (m *ListEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEventsResponse) ProtoMessage()               {}
func (*ListEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListEventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type CreateEventResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *CreateEventResponse) Reset()                    { *m = CreateEventResponse{} }
func (m *CreateEventResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEventResponse) ProtoMessage()               {}
func (*CreateEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateEventResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "eventstore.v1.Event")
	proto.RegisterType((*ListEventsRequest)(nil), "eventstore.v1.ListEventsRequest")
	proto.RegisterType((*CreateEventRequest)(nil), "eventstore.v1.CreateEventRequest")
	proto.RegisterType((*ListEventsResponse)(nil), "eventstore.v1.ListEventsResponse")
	proto.RegisterType((*CreateEventResponse)(nil), "eventstore.v1.CreateEventResponse")
	proto.RegisterEnum("eventstore.v1.AggregateType", AggregateType_name, AggregateType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventStore service

type EventStoreClient interface {
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
}

type eventStoreClient struct {
	cc *grpc.ClientConn
}

func NewEventStoreClient(cc *grpc.ClientConn) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := grpc.Invoke(ctx, "/eventstore.v1.EventStore/ListEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := grpc.Invoke(ctx, "/eventstore.v1.EventStore/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventStore service

type EventStoreServer interface {
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
}

func RegisterEventStoreServer(s *grpc.Server, srv EventStoreServer) {
	s.RegisterService(&_EventStore_serviceDesc, srv)
}

func _EventStore_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventstore.v1.EventStore/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventstore.v1.EventStore/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventstore.v1.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEvents",
			Handler:    _EventStore_ListEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventStore_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x91, 0xcd, 0x4a, 0xeb, 0x50,
	0x14, 0x85, 0x7b, 0xfa, 0xdf, 0x9d, 0xb6, 0xdc, 0xbb, 0xef, 0x1d, 0xc4, 0xa0, 0x98, 0x66, 0x14,
	0x8a, 0xa4, 0x18, 0x27, 0x4e, 0x63, 0x11, 0x29, 0xa8, 0x48, 0x5a, 0xc4, 0x59, 0x49, 0xc9, 0x36,
	0x04, 0xda, 0x26, 0x26, 0xa7, 0x85, 0x3e, 0x9a, 0x6f, 0xe1, 0x13, 0xf8, 0x2c, 0xd2, 0x93, 0xa6,
	0xbf, 0x1a, 0x28, 0x38, 0xdc, 0xc9, 0xb7, 0xd7, 0x59, 0x6b, 0x6d, 0x90, 0x68, 0x4e, 0x53, 0x6e,
	0x84, 0x51, 0xc0, 0x03, 0x6c, 0x88, 0x21, 0xe6, 0x41, 0x44, 0xc6, 0xfc, 0x52, 0x39, 0xf7, 0x82,
	0xc0, 0x1b, 0x53, 0x47, 0xfc, 0x1c, 0xcd, 0x5e, 0x3b, 0xdc, 0x9f, 0x50, 0xcc, 0x9d, 0x49, 0x98,
	0xf0, 0xda, 0x27, 0x83, 0xd2, 0xed, 0x72, 0x05, 0x4f, 0xa0, 0x2a, 0x76, 0x87, 0xbe, 0x2b, 0x33,
	0x95, 0xe9, 0x35, 0xbb, 0x22, 0xe6, 0x9e, 0x8b, 0x5d, 0x68, 0x3a, 0x9e, 0x17, 0x91, 0xe7, 0x70,
	0x1a, 0xf2, 0x45, 0x48, 0x72, 0x5e, 0x65, 0x7a, 0xd3, 0x3c, 0x35, 0x76, 0x5e, 0x33, 0xac, 0x14,
	0x1a, 0x2c, 0x42, 0xb2, 0x1b, 0xce, 0xf6, 0x88, 0x2d, 0xa8, 0x6f, 0x44, 0x7c, 0x57, 0x2e, 0x88,
	0x37, 0xa4, 0xf5, 0xb7, 0x9e, 0x8b, 0x32, 0x54, 0x42, 0x67, 0x31, 0x0e, 0x1c, 0x57, 0x2e, 0x26,
	0x0e, 0x56, 0x23, 0x5e, 0x43, 0x6d, 0xed, 0x5c, 0x2e, 0xa9, 0x4c, 0x97, 0x4c, 0xc5, 0x48, 0xb2,
	0x19, 0x69, 0x36, 0x63, 0x90, 0x12, 0xf6, 0x06, 0xd6, 0x5e, 0xe0, 0xef, 0xbd, 0x1f, 0x73, 0x91,
	0x31, 0xb6, 0xe9, 0x6d, 0x46, 0x31, 0xff, 0x26, 0x10, 0x3b, 0x3a, 0x90, 0xf6, 0xc1, 0x00, 0xbb,
	0x11, 0x39, 0x9c, 0x84, 0xf8, 0x6f, 0x6a, 0x1f, 0x94, 0x95, 0xcf, 0x2c, 0xab, 0x90, 0x51, 0x56,
	0xf1, 0x98, 0xb2, 0x6e, 0x00, 0xb7, 0xcb, 0x8a, 0xc3, 0x60, 0x1a, 0x13, 0x5e, 0x40, 0x39, 0xb1,
	0x2e, 0x33, 0xb5, 0xa0, 0x4b, 0xe6, 0xff, 0xbd, 0x24, 0x49, 0xfc, 0x15, 0xa3, 0x59, 0xf0, 0x6f,
	0xa7, 0x95, 0x95, 0x48, 0x1b, 0x4a, 0x02, 0x10, 0x6d, 0xfc, 0xa4, 0x91, 0x20, 0xed, 0x33, 0x68,
	0xec, 0xb4, 0x83, 0x75, 0xa8, 0x76, 0xad, 0x87, 0x27, 0xab, 0x77, 0xf7, 0xf8, 0x27, 0x67, 0xbe,
	0x33, 0x00, 0xc1, 0xf7, 0x97, 0xdb, 0xd8, 0x07, 0xd8, 0x98, 0x46, 0x75, 0x4f, 0xf8, 0xe0, 0xf8,
	0x4a, 0x2b, 0x83, 0x48, 0xcc, 0x6a, 0x39, 0x7c, 0x06, 0x69, 0x2b, 0x05, 0xee, 0xef, 0x1c, 0xde,
	0x5d, 0xd1, 0xb2, 0x90, 0x54, 0x77, 0x54, 0x16, 0x07, 0xb8, 0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x7e, 0xc9, 0x4d, 0xa4, 0xb5, 0x03, 0x00, 0x00,
}
