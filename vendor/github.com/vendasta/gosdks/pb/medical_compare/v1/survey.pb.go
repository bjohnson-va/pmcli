// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medical_compare/v1/survey.proto

package medicalcompare_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A survey is for a provider and contains meta information about the measures
type Survey struct {
	ProviderId string                     `protobuf:"bytes,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	StartDate  *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	// The overall star rating for the hospital
	StarRating float32 `protobuf:"fixed32,4,opt,name=star_rating,json=starRating" json:"star_rating,omitempty"`
	// The number of times this survey was completed
	Completed         int64  `protobuf:"varint,5,opt,name=completed" json:"completed,omitempty"`
	CompletedFootnote string `protobuf:"bytes,6,opt,name=completed_footnote,json=completedFootnote" json:"completed_footnote,omitempty"`
	// The percentage of people that completed this survey (will be a value between 0 and 1)
	ResponseRate float32 `protobuf:"fixed32,7,opt,name=response_rate,json=responseRate" json:"response_rate,omitempty"`
	// A footnote is an unstructured description of any caveats to the data
	ResponseRateFootnote string `protobuf:"bytes,8,opt,name=response_rate_footnote,json=responseRateFootnote" json:"response_rate_footnote,omitempty"`
	// A footnote is an unstructured description of any caveats to the data
	StarRatingFootnote string `protobuf:"bytes,9,opt,name=star_rating_footnote,json=starRatingFootnote" json:"star_rating_footnote,omitempty"`
}

func (m *Survey) Reset()                    { *m = Survey{} }
func (m *Survey) String() string            { return proto.CompactTextString(m) }
func (*Survey) ProtoMessage()               {}
func (*Survey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Survey) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *Survey) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Survey) GetEndDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *Survey) GetStarRating() float32 {
	if m != nil {
		return m.StarRating
	}
	return 0
}

func (m *Survey) GetCompleted() int64 {
	if m != nil {
		return m.Completed
	}
	return 0
}

func (m *Survey) GetCompletedFootnote() string {
	if m != nil {
		return m.CompletedFootnote
	}
	return ""
}

func (m *Survey) GetResponseRate() float32 {
	if m != nil {
		return m.ResponseRate
	}
	return 0
}

func (m *Survey) GetResponseRateFootnote() string {
	if m != nil {
		return m.ResponseRateFootnote
	}
	return ""
}

func (m *Survey) GetStarRatingFootnote() string {
	if m != nil {
		return m.StarRatingFootnote
	}
	return ""
}

func init() {
	proto.RegisterType((*Survey)(nil), "medicalcompare.v1.Survey")
}

func init() { proto.RegisterFile("medical_compare/v1/survey.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0x4d, 0x4f, 0xb3, 0x40,
	0x14, 0x85, 0x43, 0xfb, 0xbe, 0x6d, 0xb9, 0xe8, 0xa2, 0x93, 0xc6, 0x4c, 0x1a, 0x13, 0x88, 0x6e,
	0xd8, 0x08, 0xd6, 0x8f, 0x85, 0x7b, 0x63, 0xe2, 0x76, 0x74, 0x4f, 0xa6, 0x9d, 0x5b, 0x42, 0x02,
	0x0c, 0x19, 0xa6, 0x24, 0xfe, 0x11, 0x7f, 0xaf, 0xe1, 0xf2, 0x55, 0x57, 0x2e, 0x39, 0xf7, 0x3c,
	0xe7, 0xcc, 0x01, 0xfc, 0x02, 0x55, 0x76, 0x90, 0x79, 0x72, 0xd0, 0x45, 0x25, 0x0d, 0xc6, 0xcd,
	0x2e, 0xae, 0x4f, 0xa6, 0xc1, 0xaf, 0xa8, 0x32, 0xda, 0x6a, 0xb6, 0xee, 0x0d, 0xfd, 0x3d, 0x6a,
	0x76, 0x5b, 0x3f, 0xd5, 0x3a, 0xcd, 0x31, 0x26, 0xc3, 0xfe, 0x74, 0x8c, 0x6d, 0x56, 0x60, 0x6d,
	0x65, 0x51, 0x75, 0xcc, 0xcd, 0xf7, 0x1c, 0x16, 0x1f, 0x14, 0xc2, 0x7c, 0xf0, 0x2a, 0xa3, 0x9b,
	0x4c, 0xa1, 0x49, 0x32, 0xc5, 0x9d, 0xc0, 0x09, 0x5d, 0x01, 0x83, 0xf4, 0xae, 0xd8, 0x0b, 0x40,
	0x6d, 0xa5, 0xb1, 0x89, 0x92, 0x16, 0xf9, 0x2c, 0x70, 0x42, 0xef, 0x61, 0x1b, 0x75, 0x0d, 0xd1,
	0xd0, 0x10, 0x7d, 0x0e, 0x0d, 0xc2, 0x25, 0xf7, 0xab, 0xb4, 0xc8, 0x9e, 0x61, 0x85, 0xa5, 0xea,
	0xc0, 0xf9, 0x9f, 0xe0, 0x12, 0x4b, 0x45, 0x98, 0x0f, 0x5e, 0x9b, 0x91, 0x18, 0x69, 0xb3, 0x32,
	0xe5, 0xff, 0x02, 0x27, 0x9c, 0x09, 0x7a, 0x84, 0x20, 0x85, 0x5d, 0x83, 0xdb, 0xae, 0xcd, 0xd1,
	0xa2, 0xe2, 0xff, 0x03, 0x27, 0x9c, 0x8b, 0x49, 0x60, 0x77, 0xc0, 0xc6, 0x8f, 0xe4, 0xa8, 0xb5,
	0x2d, 0xb5, 0x45, 0xbe, 0xa0, 0x61, 0xeb, 0xf1, 0xf2, 0xd6, 0x1f, 0xd8, 0x2d, 0x5c, 0x1a, 0xac,
	0x2b, 0x5d, 0xd6, 0xd8, 0x36, 0x22, 0x5f, 0x52, 0xdf, 0xc5, 0x20, 0x8a, 0xf6, 0x49, 0x4f, 0x70,
	0xf5, 0xcb, 0x34, 0xe5, 0xae, 0x28, 0x77, 0x73, 0xee, 0x1e, 0xa3, 0xef, 0x61, 0x73, 0x36, 0x64,
	0x62, 0x5c, 0x62, 0xd8, 0xb4, 0x68, 0x20, 0xf6, 0x0b, 0xfa, 0x2f, 0x8f, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0x28, 0x66, 0xe2, 0xf6, 0x01, 0x00, 0x00,
}
