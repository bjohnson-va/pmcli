// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medical_compare/v1/measure.proto

package medicalcompare_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The possible types of a SurveyMeasure. Not all surveys have a SurveyMeasure for each MeasureType
type MeasureType int32

const (
	MeasureType_NONE MeasureType = 0
	// Communication with nurses
	MeasureType_H_COMP_1 MeasureType = 1
	// Communication with doctors
	MeasureType_H_COMP_2 MeasureType = 2
	// Responsiveness of hospital staff
	MeasureType_H_COMP_3 MeasureType = 3
	// Pain management
	MeasureType_H_COMP_4 MeasureType = 4
	// Communication about medicines
	MeasureType_H_COMP_5 MeasureType = 5
	// Cleanliness of hospital environment
	MeasureType_H_CLEAN MeasureType = 6
	// Quietness of hospital environment
	MeasureType_H_QUIET MeasureType = 7
	// Discharge information
	MeasureType_H_COMP_6 MeasureType = 8
	// Care Transition
	MeasureType_H_COMP_7 MeasureType = 9
	// Overall rating of hospital
	MeasureType_H_HSP_RATING MeasureType = 10
	// Willingness to recommend the hospital
	MeasureType_H_RECMND MeasureType = 11
)

var MeasureType_name = map[int32]string{
	0:  "NONE",
	1:  "H_COMP_1",
	2:  "H_COMP_2",
	3:  "H_COMP_3",
	4:  "H_COMP_4",
	5:  "H_COMP_5",
	6:  "H_CLEAN",
	7:  "H_QUIET",
	8:  "H_COMP_6",
	9:  "H_COMP_7",
	10: "H_HSP_RATING",
	11: "H_RECMND",
}
var MeasureType_value = map[string]int32{
	"NONE":         0,
	"H_COMP_1":     1,
	"H_COMP_2":     2,
	"H_COMP_3":     3,
	"H_COMP_4":     4,
	"H_COMP_5":     5,
	"H_CLEAN":      6,
	"H_QUIET":      7,
	"H_COMP_6":     8,
	"H_COMP_7":     9,
	"H_HSP_RATING": 10,
	"H_RECMND":     11,
}

func (x MeasureType) String() string {
	return proto.EnumName(MeasureType_name, int32(x))
}
func (MeasureType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// A SurveyMeasure is a grouping of statistics gathered from the measures to provide insights
type SurveyMeasure struct {
	// The technical title of the survey measure
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// The linear mean score of a measure for a provider
	LinearMeanScore int64 `protobuf:"varint,2,opt,name=linear_mean_score,json=linearMeanScore" json:"linear_mean_score,omitempty"`
	// The star rating of a measure for a provider
	StarRating float32 `protobuf:"fixed32,3,opt,name=star_rating,json=starRating" json:"star_rating,omitempty"`
	// The star rating footnote
	StarRatingFootnote string `protobuf:"bytes,7,opt,name=star_rating_footnote,json=starRatingFootnote" json:"star_rating_footnote,omitempty"`
	// The different answers for this measure
	Answers []*Answer `protobuf:"bytes,8,rep,name=answers" json:"answers,omitempty"`
	// A SurveyMeasure can have multiple questions plus a star rating and linear mean score. The type is what groups these together into on SurveyMeasure
	Type MeasureType `protobuf:"varint,9,opt,name=type,enum=medicalcompare.v1.MeasureType" json:"type,omitempty"`
	// The the data of which this data was started to be collected (end date is 3 months after)
	StartDate *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
}

func (m *SurveyMeasure) Reset()                    { *m = SurveyMeasure{} }
func (m *SurveyMeasure) String() string            { return proto.CompactTextString(m) }
func (*SurveyMeasure) ProtoMessage()               {}
func (*SurveyMeasure) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SurveyMeasure) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SurveyMeasure) GetLinearMeanScore() int64 {
	if m != nil {
		return m.LinearMeanScore
	}
	return 0
}

func (m *SurveyMeasure) GetStarRating() float32 {
	if m != nil {
		return m.StarRating
	}
	return 0
}

func (m *SurveyMeasure) GetStarRatingFootnote() string {
	if m != nil {
		return m.StarRatingFootnote
	}
	return ""
}

func (m *SurveyMeasure) GetAnswers() []*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *SurveyMeasure) GetType() MeasureType {
	if m != nil {
		return m.Type
	}
	return MeasureType_NONE
}

func (m *SurveyMeasure) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func init() {
	proto.RegisterType((*SurveyMeasure)(nil), "medicalcompare.v1.SurveyMeasure")
	proto.RegisterEnum("medicalcompare.v1.MeasureType", MeasureType_name, MeasureType_value)
}

func init() { proto.RegisterFile("medical_compare/v1/measure.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x6e, 0x1a, 0x31,
	0x10, 0x87, 0x6b, 0x20, 0x01, 0x66, 0xd3, 0xd6, 0xb1, 0x72, 0xd8, 0x72, 0x28, 0xab, 0x9e, 0x56,
	0x39, 0x2c, 0x65, 0xe9, 0x1f, 0xf5, 0x88, 0x08, 0x2d, 0x91, 0xca, 0x26, 0x35, 0xf4, 0x6c, 0x39,
	0x64, 0x82, 0x56, 0x62, 0xd7, 0x2b, 0xaf, 0xa1, 0xe2, 0xb9, 0xfa, 0x12, 0x7d, 0xac, 0x2a, 0x36,
	0xa8, 0x96, 0xca, 0xf1, 0x9b, 0xf9, 0xec, 0x99, 0xf9, 0x41, 0x54, 0xe0, 0x63, 0xbe, 0x92, 0x1b,
	0xb1, 0x52, 0x45, 0x25, 0x35, 0x0e, 0x76, 0xc3, 0x41, 0x81, 0xb2, 0xde, 0x6a, 0x4c, 0x2a, 0xad,
	0x8c, 0x62, 0x97, 0x07, 0xe3, 0x20, 0x24, 0xbb, 0x61, 0xaf, 0xbf, 0x56, 0x6a, 0xbd, 0xc1, 0x81,
	0x15, 0x1e, 0xb6, 0x4f, 0x03, 0x93, 0x17, 0x58, 0x1b, 0x59, 0x54, 0xee, 0x4d, 0xaf, 0x7f, 0xe2,
	0x57, 0x59, 0xd6, 0xbf, 0x50, 0x3b, 0xe1, 0xdd, 0x9f, 0x06, 0xbc, 0x5c, 0x6c, 0xf5, 0x0e, 0xf7,
	0x73, 0x37, 0x8c, 0x5d, 0xc1, 0x99, 0xc9, 0xcd, 0x06, 0x43, 0x12, 0x91, 0xb8, 0xcb, 0x1d, 0xb0,
	0x6b, 0xb8, 0xdc, 0xe4, 0x25, 0x4a, 0x2d, 0x0a, 0x94, 0xa5, 0xa8, 0x57, 0x4a, 0x63, 0xd8, 0x88,
	0x48, 0xdc, 0xe4, 0xaf, 0x5d, 0x63, 0x8e, 0xb2, 0x5c, 0x3c, 0x97, 0x59, 0x1f, 0x82, 0xda, 0x48,
	0x2d, 0xb4, 0x34, 0x79, 0xb9, 0x0e, 0x9b, 0x11, 0x89, 0x1b, 0x1c, 0x9e, 0x4b, 0xdc, 0x56, 0xd8,
	0x7b, 0xb8, 0xf2, 0x04, 0xf1, 0xa4, 0x94, 0x29, 0x95, 0xc1, 0xb0, 0x6d, 0x27, 0xb2, 0x7f, 0xe6,
	0xd7, 0x43, 0x87, 0x8d, 0xa0, 0xed, 0xd6, 0xae, 0xc3, 0x4e, 0xd4, 0x8c, 0x83, 0xf4, 0x4d, 0xf2,
	0x5f, 0x1a, 0xc9, 0xd8, 0x1a, 0xfc, 0x68, 0xb2, 0x14, 0x5a, 0x66, 0x5f, 0x61, 0xd8, 0x8d, 0x48,
	0xfc, 0x2a, 0x7d, 0x7b, 0xe2, 0xc5, 0xe1, 0xe6, 0xe5, 0xbe, 0x42, 0x6e, 0x5d, 0xf6, 0x05, 0xec,
	0xa2, 0x46, 0x3c, 0x4a, 0x83, 0x21, 0x44, 0x24, 0x0e, 0xd2, 0x5e, 0xe2, 0x62, 0x4e, 0x8e, 0x31,
	0x27, 0xcb, 0x63, 0xcc, 0xbc, 0x6b, 0xed, 0x1b, 0x69, 0xf0, 0xfa, 0x37, 0x81, 0xc0, 0xfb, 0x90,
	0x75, 0xa0, 0x95, 0xdd, 0x65, 0x53, 0xfa, 0x82, 0x5d, 0x40, 0x67, 0x26, 0x26, 0x77, 0xf3, 0x7b,
	0x31, 0xa4, 0xc4, 0xa3, 0x94, 0x36, 0x3c, 0x1a, 0xd1, 0xa6, 0x47, 0x1f, 0x68, 0xcb, 0xa3, 0x8f,
	0xf4, 0x8c, 0x05, 0xd0, 0x9e, 0x89, 0xc9, 0xf7, 0xe9, 0x38, 0xa3, 0xe7, 0x0e, 0x7e, 0xfc, 0xbc,
	0x9d, 0x2e, 0x69, 0xdb, 0xf3, 0x3e, 0xd1, 0x8e, 0x47, 0x9f, 0x69, 0x97, 0x51, 0xb8, 0x98, 0x89,
	0xd9, 0xe2, 0x5e, 0xf0, 0xf1, 0xf2, 0x36, 0xfb, 0x46, 0xc1, 0xf5, 0xf9, 0x74, 0x32, 0xcf, 0x6e,
	0x68, 0xf0, 0x70, 0x6e, 0x8f, 0x1a, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x81, 0xe5, 0xe9, 0x4e,
	0x80, 0x02, 0x00, 0x00,
}
