// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medical_compare/v1/answer.proto

package medicalcompare_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An answer is the percentage of this result for a measure
type Answer struct {
	// The percentage of people who responded with this answer
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// The label of the answer
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// The description of the answer
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The national average of people who responded with this answer
	NationalPercent float32 `protobuf:"fixed32,4,opt,name=national_percent,json=nationalPercent" json:"national_percent,omitempty"`
	// The state percentage of people who responded with this answer
	StatePercent float32 `protobuf:"fixed32,5,opt,name=state_percent,json=statePercent" json:"state_percent,omitempty"`
}

func (m *Answer) Reset()                    { *m = Answer{} }
func (m *Answer) String() string            { return proto.CompactTextString(m) }
func (*Answer) ProtoMessage()               {}
func (*Answer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Answer) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *Answer) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Answer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Answer) GetNationalPercent() float32 {
	if m != nil {
		return m.NationalPercent
	}
	return 0
}

func (m *Answer) GetStatePercent() float32 {
	if m != nil {
		return m.StatePercent
	}
	return 0
}

func init() {
	proto.RegisterType((*Answer)(nil), "medicalcompare.v1.Answer")
}

func init() { proto.RegisterFile("medical_compare/v1/answer.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xcf, 0x4d, 0x4d, 0xc9,
	0x4c, 0x4e, 0xcc, 0x89, 0x4f, 0xce, 0xcf, 0x2d, 0x48, 0x2c, 0x4a, 0xd5, 0x2f, 0x33, 0xd4, 0x4f,
	0xcc, 0x2b, 0x2e, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84, 0x2a, 0x80,
	0xca, 0xeb, 0x95, 0x19, 0x2a, 0xad, 0x62, 0xe4, 0x62, 0x73, 0x04, 0xab, 0x11, 0x92, 0xe0, 0x62,
	0x2f, 0x48, 0x2d, 0x4a, 0x4e, 0xcd, 0x2b, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0a, 0x82, 0x71,
	0x85, 0x44, 0xb8, 0x58, 0x73, 0x12, 0x93, 0x52, 0x73, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83,
	0x20, 0x1c, 0x21, 0x05, 0x2e, 0xee, 0x94, 0xd4, 0xe2, 0xe4, 0xa2, 0xcc, 0x82, 0x92, 0xcc, 0xfc,
	0x3c, 0x09, 0x66, 0xb0, 0x1c, 0xb2, 0x90, 0x90, 0x26, 0x97, 0x40, 0x5e, 0x22, 0x88, 0x95, 0x98,
	0x13, 0x0f, 0x33, 0x9a, 0x05, 0x6c, 0x34, 0x3f, 0x4c, 0x3c, 0x00, 0x6a, 0x85, 0x32, 0x17, 0x6f,
	0x71, 0x49, 0x62, 0x49, 0x2a, 0x5c, 0x1d, 0x2b, 0x58, 0x1d, 0x0f, 0x58, 0x10, 0xaa, 0x28, 0x89,
	0x0d, 0xec, 0x0d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x71, 0xeb, 0x21, 0xe9, 0x00,
	0x00, 0x00,
}
