syntax = "proto3";

package medicalcompare.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "medical_compare/v1/survey.proto";
import "medical_compare/v1/provider.proto";
import "medical_compare/v1/measure.proto";
import "medical_compare/v1/account.proto";

message GetSurveyRequest {
    // The identifier of the hospital
    string provider_id = 1;
    // The start date of the survey
    google.protobuf.Timestamp start_date = 2;
}

message GetSurveyResponse {
    Survey survey = 1;
}

message GetMeasuresRequest {
    // The identifier of the hospital
    string provider_id = 1;
    // The start date of the survey
    google.protobuf.Timestamp start_date = 2;
}

message GetMeasuresResponse {
    repeated SurveyMeasure measures = 1;
}

message GetProviderRequest {
    // The identifier of the hospital
    string provider_id = 1;
}

message GetProviderResponse {
    Provider provider = 1;
}

message GetAccountRequest {
    // The identifier of the account
    string account_id = 1;
}

message GetAccountResponse {
    Account account = 1;
}

message ListSurveysRequest {
    // The provider to look up valid survey dates for
    string provider_id = 1;
    // Options for how to page the response for this request
    PagedRequestOptions paging_options = 2;
}

message ListSurveysResponse {
    // The surveys for the requested provider
    repeated Survey surveys = 1;
    // Metadata about the paging
    PagedResponseMetadata paging_metadata = 3;
}

message PagedResponseMetadata {
    // A cursor that can be provided to retrieve the next page of results
    string next_cursor = 1;
    // Whether or not more results exist
    bool has_more = 2;
}

message PagedRequestOptions {
    // cursor can be passed to retrieve the next page of results keyed by the cursor
    string cursor = 1;
    // page_size specifies the number of items to return in the next page
    int64 page_size = 2;
}

message SearchProvidersRequest {
    // The string to search the providers for
    string search_term = 1;
    // Options for how to page the response for this request
    PagedRequestOptions paging_options = 2;
}

message SearchProvidersResponse {
    // The providers for the requested search term
    repeated Provider providers = 1;
    // Metadata about the paging
    PagedResponseMetadata paging_metadata = 2;
}

message UpdateAssociatedProviderRequest {
    // the account id to update the setting for
    string account_id = 1;
    // the provider id to set on the account
    string provider_id = 2;
}

message GetHistoricalMeasuresRequest {
    // The provider to look up measures for
    string provider_id = 1;
    // The type of measure to get
    MeasureType measure_type = 2;
    // The surveys to get the measures for
    repeated google.protobuf.Timestamp start_date = 3;
}

message GetHistoricalMeasuresResponse {
    repeated SurveyMeasure measures = 1;
}

service SurveyService {
    // Get a survey for a specific hospital & survey start date
    rpc GetSurvey(GetSurveyRequest) returns (GetSurveyResponse) {}

    // Get the measures for a specific hospital & survey start date
    rpc GetMeasures(GetMeasuresRequest) returns (GetMeasuresResponse) {}

    // List the surveys for a provider
    rpc ListSurveys(ListSurveysRequest) returns (ListSurveysResponse) {}

    // Get the measures of a specific type for multiple surveys
    rpc GetHistoricalMeasures(GetHistoricalMeasuresRequest) returns (GetHistoricalMeasuresResponse) {}
}

service ProviderService {
    // Get a provider
    rpc GetProvider(GetProviderRequest) returns (GetProviderResponse) {}

    // Search for providers
    rpc SearchProviders(SearchProvidersRequest) returns (SearchProvidersResponse);
}

service AccountService {
    // Get an account
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}

    //Update the associate provider of an account
    rpc UpdateAssociatedProvider(UpdateAssociatedProviderRequest) returns (google.protobuf.Empty) {}
}
