// Code generated by protoc-gen-go. DO NOT EDIT.
// source: medical_compare/v1/api.proto

package medicalcompare_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetSurveyRequest struct {
	// The identifier of the hospital
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// The start date of the survey
	StartDate *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
}

func (m *GetSurveyRequest) Reset()                    { *m = GetSurveyRequest{} }
func (m *GetSurveyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSurveyRequest) ProtoMessage()               {}
func (*GetSurveyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GetSurveyRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *GetSurveyRequest) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

type GetSurveyResponse struct {
	Survey *Survey `protobuf:"bytes,1,opt,name=survey" json:"survey,omitempty"`
}

func (m *GetSurveyResponse) Reset()                    { *m = GetSurveyResponse{} }
func (m *GetSurveyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSurveyResponse) ProtoMessage()               {}
func (*GetSurveyResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *GetSurveyResponse) GetSurvey() *Survey {
	if m != nil {
		return m.Survey
	}
	return nil
}

type GetMeasuresRequest struct {
	// The identifier of the hospital
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// The start date of the survey
	StartDate *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
}

func (m *GetMeasuresRequest) Reset()                    { *m = GetMeasuresRequest{} }
func (m *GetMeasuresRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMeasuresRequest) ProtoMessage()               {}
func (*GetMeasuresRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetMeasuresRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *GetMeasuresRequest) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

type GetMeasuresResponse struct {
	Measures []*SurveyMeasure `protobuf:"bytes,1,rep,name=measures" json:"measures,omitempty"`
}

func (m *GetMeasuresResponse) Reset()                    { *m = GetMeasuresResponse{} }
func (m *GetMeasuresResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMeasuresResponse) ProtoMessage()               {}
func (*GetMeasuresResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetMeasuresResponse) GetMeasures() []*SurveyMeasure {
	if m != nil {
		return m.Measures
	}
	return nil
}

type GetProviderRequest struct {
	// The identifier of the hospital
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
}

func (m *GetProviderRequest) Reset()                    { *m = GetProviderRequest{} }
func (m *GetProviderRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProviderRequest) ProtoMessage()               {}
func (*GetProviderRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *GetProviderRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

type GetProviderResponse struct {
	Provider *Provider `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
}

func (m *GetProviderResponse) Reset()                    { *m = GetProviderResponse{} }
func (m *GetProviderResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProviderResponse) ProtoMessage()               {}
func (*GetProviderResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *GetProviderResponse) GetProvider() *Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

type GetAccountRequest struct {
	// The identifier of the account
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *GetAccountRequest) Reset()                    { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()               {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *GetAccountRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type GetAccountResponse struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *GetAccountResponse) Reset()                    { *m = GetAccountResponse{} }
func (m *GetAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountResponse) ProtoMessage()               {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *GetAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type ListSurveysRequest struct {
	// The provider to look up valid survey dates for
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Options for how to page the response for this request
	PagingOptions *PagedRequestOptions `protobuf:"bytes,2,opt,name=paging_options,json=pagingOptions" json:"paging_options,omitempty"`
}

func (m *ListSurveysRequest) Reset()                    { *m = ListSurveysRequest{} }
func (m *ListSurveysRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSurveysRequest) ProtoMessage()               {}
func (*ListSurveysRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ListSurveysRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *ListSurveysRequest) GetPagingOptions() *PagedRequestOptions {
	if m != nil {
		return m.PagingOptions
	}
	return nil
}

type ListSurveysResponse struct {
	// The surveys for the requested provider
	Surveys []*Survey `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
	// Metadata about the paging
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,3,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
}

func (m *ListSurveysResponse) Reset()                    { *m = ListSurveysResponse{} }
func (m *ListSurveysResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSurveysResponse) ProtoMessage()               {}
func (*ListSurveysResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *ListSurveysResponse) GetSurveys() []*Survey {
	if m != nil {
		return m.Surveys
	}
	return nil
}

func (m *ListSurveysResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

type PagedResponseMetadata struct {
	// A cursor that can be provided to retrieve the next page of results
	NextCursor string `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *PagedResponseMetadata) Reset()                    { *m = PagedResponseMetadata{} }
func (m *PagedResponseMetadata) String() string            { return proto.CompactTextString(m) }
func (*PagedResponseMetadata) ProtoMessage()               {}
func (*PagedResponseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *PagedResponseMetadata) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *PagedResponseMetadata) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type PagedRequestOptions struct {
	// cursor can be passed to retrieve the next page of results keyed by the cursor
	Cursor string `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	// page_size specifies the number of items to return in the next page
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *PagedRequestOptions) Reset()                    { *m = PagedRequestOptions{} }
func (m *PagedRequestOptions) String() string            { return proto.CompactTextString(m) }
func (*PagedRequestOptions) ProtoMessage()               {}
func (*PagedRequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *PagedRequestOptions) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *PagedRequestOptions) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type SearchProvidersRequest struct {
	// The string to search the providers for
	SearchTerm string `protobuf:"bytes,1,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	// Options for how to page the response for this request
	PagingOptions *PagedRequestOptions `protobuf:"bytes,2,opt,name=paging_options,json=pagingOptions" json:"paging_options,omitempty"`
}

func (m *SearchProvidersRequest) Reset()                    { *m = SearchProvidersRequest{} }
func (m *SearchProvidersRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchProvidersRequest) ProtoMessage()               {}
func (*SearchProvidersRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *SearchProvidersRequest) GetSearchTerm() string {
	if m != nil {
		return m.SearchTerm
	}
	return ""
}

func (m *SearchProvidersRequest) GetPagingOptions() *PagedRequestOptions {
	if m != nil {
		return m.PagingOptions
	}
	return nil
}

type SearchProvidersResponse struct {
	// The providers for the requested search term
	Providers []*Provider `protobuf:"bytes,1,rep,name=providers" json:"providers,omitempty"`
	// Metadata about the paging
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,2,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
}

func (m *SearchProvidersResponse) Reset()                    { *m = SearchProvidersResponse{} }
func (m *SearchProvidersResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchProvidersResponse) ProtoMessage()               {}
func (*SearchProvidersResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *SearchProvidersResponse) GetProviders() []*Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *SearchProvidersResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

type UpdateAssociatedProviderRequest struct {
	// the account id to update the setting for
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// the provider id to set on the account
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
}

func (m *UpdateAssociatedProviderRequest) Reset()         { *m = UpdateAssociatedProviderRequest{} }
func (m *UpdateAssociatedProviderRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAssociatedProviderRequest) ProtoMessage()    {}
func (*UpdateAssociatedProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{14}
}

func (m *UpdateAssociatedProviderRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *UpdateAssociatedProviderRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

type GetHistoricalMeasuresRequest struct {
	// The provider to look up measures for
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// The type of measure to get
	MeasureType MeasureType `protobuf:"varint,2,opt,name=measure_type,json=measureType,enum=medicalcompare.v1.MeasureType" json:"measure_type,omitempty"`
	// The surveys to get the measures for
	StartDate []*google_protobuf.Timestamp `protobuf:"bytes,3,rep,name=start_date,json=startDate" json:"start_date,omitempty"`
}

func (m *GetHistoricalMeasuresRequest) Reset()                    { *m = GetHistoricalMeasuresRequest{} }
func (m *GetHistoricalMeasuresRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHistoricalMeasuresRequest) ProtoMessage()               {}
func (*GetHistoricalMeasuresRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *GetHistoricalMeasuresRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *GetHistoricalMeasuresRequest) GetMeasureType() MeasureType {
	if m != nil {
		return m.MeasureType
	}
	return MeasureType_NONE
}

func (m *GetHistoricalMeasuresRequest) GetStartDate() []*google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

type GetHistoricalMeasuresResponse struct {
	Measures []*SurveyMeasure `protobuf:"bytes,1,rep,name=measures" json:"measures,omitempty"`
}

func (m *GetHistoricalMeasuresResponse) Reset()                    { *m = GetHistoricalMeasuresResponse{} }
func (m *GetHistoricalMeasuresResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHistoricalMeasuresResponse) ProtoMessage()               {}
func (*GetHistoricalMeasuresResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *GetHistoricalMeasuresResponse) GetMeasures() []*SurveyMeasure {
	if m != nil {
		return m.Measures
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSurveyRequest)(nil), "medicalcompare.v1.GetSurveyRequest")
	proto.RegisterType((*GetSurveyResponse)(nil), "medicalcompare.v1.GetSurveyResponse")
	proto.RegisterType((*GetMeasuresRequest)(nil), "medicalcompare.v1.GetMeasuresRequest")
	proto.RegisterType((*GetMeasuresResponse)(nil), "medicalcompare.v1.GetMeasuresResponse")
	proto.RegisterType((*GetProviderRequest)(nil), "medicalcompare.v1.GetProviderRequest")
	proto.RegisterType((*GetProviderResponse)(nil), "medicalcompare.v1.GetProviderResponse")
	proto.RegisterType((*GetAccountRequest)(nil), "medicalcompare.v1.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "medicalcompare.v1.GetAccountResponse")
	proto.RegisterType((*ListSurveysRequest)(nil), "medicalcompare.v1.ListSurveysRequest")
	proto.RegisterType((*ListSurveysResponse)(nil), "medicalcompare.v1.ListSurveysResponse")
	proto.RegisterType((*PagedResponseMetadata)(nil), "medicalcompare.v1.PagedResponseMetadata")
	proto.RegisterType((*PagedRequestOptions)(nil), "medicalcompare.v1.PagedRequestOptions")
	proto.RegisterType((*SearchProvidersRequest)(nil), "medicalcompare.v1.SearchProvidersRequest")
	proto.RegisterType((*SearchProvidersResponse)(nil), "medicalcompare.v1.SearchProvidersResponse")
	proto.RegisterType((*UpdateAssociatedProviderRequest)(nil), "medicalcompare.v1.UpdateAssociatedProviderRequest")
	proto.RegisterType((*GetHistoricalMeasuresRequest)(nil), "medicalcompare.v1.GetHistoricalMeasuresRequest")
	proto.RegisterType((*GetHistoricalMeasuresResponse)(nil), "medicalcompare.v1.GetHistoricalMeasuresResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SurveyService service

type SurveyServiceClient interface {
	// Get a survey for a specific hospital & survey start date
	GetSurvey(ctx context.Context, in *GetSurveyRequest, opts ...grpc.CallOption) (*GetSurveyResponse, error)
	// Get the measures for a specific hospital & survey start date
	GetMeasures(ctx context.Context, in *GetMeasuresRequest, opts ...grpc.CallOption) (*GetMeasuresResponse, error)
	// List the surveys for a provider
	ListSurveys(ctx context.Context, in *ListSurveysRequest, opts ...grpc.CallOption) (*ListSurveysResponse, error)
	// Get the measures of a specific type for multiple surveys
	GetHistoricalMeasures(ctx context.Context, in *GetHistoricalMeasuresRequest, opts ...grpc.CallOption) (*GetHistoricalMeasuresResponse, error)
}

type surveyServiceClient struct {
	cc *grpc.ClientConn
}

func NewSurveyServiceClient(cc *grpc.ClientConn) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) GetSurvey(ctx context.Context, in *GetSurveyRequest, opts ...grpc.CallOption) (*GetSurveyResponse, error) {
	out := new(GetSurveyResponse)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.SurveyService/GetSurvey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetMeasures(ctx context.Context, in *GetMeasuresRequest, opts ...grpc.CallOption) (*GetMeasuresResponse, error) {
	out := new(GetMeasuresResponse)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.SurveyService/GetMeasures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) ListSurveys(ctx context.Context, in *ListSurveysRequest, opts ...grpc.CallOption) (*ListSurveysResponse, error) {
	out := new(ListSurveysResponse)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.SurveyService/ListSurveys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetHistoricalMeasures(ctx context.Context, in *GetHistoricalMeasuresRequest, opts ...grpc.CallOption) (*GetHistoricalMeasuresResponse, error) {
	out := new(GetHistoricalMeasuresResponse)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.SurveyService/GetHistoricalMeasures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SurveyService service

type SurveyServiceServer interface {
	// Get a survey for a specific hospital & survey start date
	GetSurvey(context.Context, *GetSurveyRequest) (*GetSurveyResponse, error)
	// Get the measures for a specific hospital & survey start date
	GetMeasures(context.Context, *GetMeasuresRequest) (*GetMeasuresResponse, error)
	// List the surveys for a provider
	ListSurveys(context.Context, *ListSurveysRequest) (*ListSurveysResponse, error)
	// Get the measures of a specific type for multiple surveys
	GetHistoricalMeasures(context.Context, *GetHistoricalMeasuresRequest) (*GetHistoricalMeasuresResponse, error)
}

func RegisterSurveyServiceServer(s *grpc.Server, srv SurveyServiceServer) {
	s.RegisterService(&_SurveyService_serviceDesc, srv)
}

func _SurveyService_GetSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.SurveyService/GetSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurvey(ctx, req.(*GetSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetMeasures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetMeasures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.SurveyService/GetMeasures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetMeasures(ctx, req.(*GetMeasuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_ListSurveys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).ListSurveys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.SurveyService/ListSurveys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).ListSurveys(ctx, req.(*ListSurveysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetHistoricalMeasures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalMeasuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetHistoricalMeasures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.SurveyService/GetHistoricalMeasures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetHistoricalMeasures(ctx, req.(*GetHistoricalMeasuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SurveyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "medicalcompare.v1.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSurvey",
			Handler:    _SurveyService_GetSurvey_Handler,
		},
		{
			MethodName: "GetMeasures",
			Handler:    _SurveyService_GetMeasures_Handler,
		},
		{
			MethodName: "ListSurveys",
			Handler:    _SurveyService_ListSurveys_Handler,
		},
		{
			MethodName: "GetHistoricalMeasures",
			Handler:    _SurveyService_GetHistoricalMeasures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medical_compare/v1/api.proto",
}

// Client API for ProviderService service

type ProviderServiceClient interface {
	// Get a provider
	GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*GetProviderResponse, error)
	// Search for providers
	SearchProviders(ctx context.Context, in *SearchProvidersRequest, opts ...grpc.CallOption) (*SearchProvidersResponse, error)
}

type providerServiceClient struct {
	cc *grpc.ClientConn
}

func NewProviderServiceClient(cc *grpc.ClientConn) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*GetProviderResponse, error) {
	out := new(GetProviderResponse)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.ProviderService/GetProvider", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) SearchProviders(ctx context.Context, in *SearchProvidersRequest, opts ...grpc.CallOption) (*SearchProvidersResponse, error) {
	out := new(SearchProvidersResponse)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.ProviderService/SearchProviders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProviderService service

type ProviderServiceServer interface {
	// Get a provider
	GetProvider(context.Context, *GetProviderRequest) (*GetProviderResponse, error)
	// Search for providers
	SearchProviders(context.Context, *SearchProvidersRequest) (*SearchProvidersResponse, error)
}

func RegisterProviderServiceServer(s *grpc.Server, srv ProviderServiceServer) {
	s.RegisterService(&_ProviderService_serviceDesc, srv)
}

func _ProviderService_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.ProviderService/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetProvider(ctx, req.(*GetProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_SearchProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).SearchProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.ProviderService/SearchProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).SearchProviders(ctx, req.(*SearchProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "medicalcompare.v1.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProvider",
			Handler:    _ProviderService_GetProvider_Handler,
		},
		{
			MethodName: "SearchProviders",
			Handler:    _ProviderService_SearchProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medical_compare/v1/api.proto",
}

// Client API for AccountService service

type AccountServiceClient interface {
	// Get an account
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Update the associate provider of an account
	UpdateAssociatedProvider(ctx context.Context, in *UpdateAssociatedProviderRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.AccountService/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAssociatedProvider(ctx context.Context, in *UpdateAssociatedProviderRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/medicalcompare.v1.AccountService/UpdateAssociatedProvider", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceServer interface {
	// Get an account
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// Update the associate provider of an account
	UpdateAssociatedProvider(context.Context, *UpdateAssociatedProviderRequest) (*google_protobuf1.Empty, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.AccountService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAssociatedProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssociatedProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAssociatedProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medicalcompare.v1.AccountService/UpdateAssociatedProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAssociatedProvider(ctx, req.(*UpdateAssociatedProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "medicalcompare.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAssociatedProvider",
			Handler:    _AccountService_UpdateAssociatedProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medical_compare/v1/api.proto",
}

func init() { proto.RegisterFile("medical_compare/v1/api.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0x8e, 0x89, 0x04, 0xc9, 0x49, 0x81, 0x32, 0x08, 0x1a, 0x0c, 0x34, 0xe9, 0xb4, 0xa0, 0xb4,
	0x17, 0x49, 0x31, 0xad, 0x2a, 0xa4, 0xde, 0xa0, 0xfe, 0x50, 0x50, 0xd3, 0x1f, 0x87, 0x4a, 0x95,
	0xaa, 0xd6, 0x1a, 0xec, 0x69, 0x62, 0x09, 0xc7, 0xee, 0xcc, 0x24, 0x2a, 0xa8, 0x97, 0xbd, 0xd8,
	0x97, 0xd8, 0x6b, 0x9e, 0x62, 0x9f, 0x63, 0x2f, 0xf6, 0x65, 0x56, 0xf1, 0xcc, 0xe4, 0xc7, 0x19,
	0x87, 0xac, 0x16, 0xed, 0xa5, 0xcf, 0x7c, 0xe7, 0x9c, 0xef, 0xfc, 0xcc, 0x37, 0x86, 0x83, 0x88,
	0x06, 0xa1, 0x4f, 0x6e, 0x3d, 0x3f, 0x8e, 0x12, 0xc2, 0x68, 0x6b, 0x78, 0xd2, 0x22, 0x49, 0xd8,
	0x4c, 0x58, 0x2c, 0x62, 0xb4, 0xa5, 0x4e, 0xd5, 0x61, 0x73, 0x78, 0x62, 0xd7, 0xba, 0x71, 0xdc,
	0xbd, 0xa5, 0xad, 0x14, 0x70, 0x33, 0xf8, 0xbb, 0x25, 0xc2, 0x88, 0x72, 0x41, 0xa2, 0x44, 0xfa,
	0xd8, 0xfb, 0x59, 0x00, 0x8d, 0x12, 0x71, 0xa7, 0x0e, 0x6b, 0x86, 0x74, 0x7c, 0xc0, 0x86, 0x54,
	0x03, 0x3e, 0x32, 0x00, 0x12, 0x16, 0x0f, 0xc3, 0x80, 0x32, 0x05, 0xa9, 0x1b, 0x20, 0x11, 0x25,
	0x7c, 0xc0, 0xe8, 0x02, 0x04, 0xf1, 0xfd, 0x78, 0xd0, 0x17, 0x12, 0x81, 0xfb, 0xf0, 0xfe, 0x05,
	0x15, 0x9d, 0x34, 0xb3, 0x4b, 0xff, 0x19, 0x50, 0x2e, 0x50, 0x0d, 0x2a, 0x3a, 0x93, 0x17, 0x06,
	0x55, 0xab, 0x6e, 0x35, 0xca, 0x2e, 0x68, 0xd3, 0x65, 0x80, 0xce, 0x00, 0xb8, 0x20, 0x4c, 0x78,
	0x01, 0x11, 0xb4, 0xba, 0x52, 0xb7, 0x1a, 0x15, 0xc7, 0x6e, 0xca, 0x72, 0x9b, 0xba, 0xdc, 0xe6,
	0xb5, 0xee, 0x87, 0x5b, 0x4e, 0xd1, 0xdf, 0x12, 0x41, 0xf1, 0xf7, 0xb0, 0x35, 0x95, 0x8f, 0x27,
	0x71, 0x9f, 0x53, 0x74, 0x02, 0xab, 0xb2, 0xf6, 0x34, 0x57, 0xc5, 0xd9, 0x6b, 0xce, 0xb5, 0xbb,
	0xa9, 0x5c, 0x14, 0x10, 0x27, 0x80, 0x2e, 0xa8, 0x68, 0xcb, 0x6a, 0xf9, 0xbb, 0x60, 0xde, 0x81,
	0xed, 0x99, 0x8c, 0x8a, 0xfb, 0xd7, 0x50, 0x52, 0x3d, 0xe7, 0x55, 0xab, 0x5e, 0x6c, 0x54, 0x9c,
	0x7a, 0x2e, 0x7b, 0xe5, 0xec, 0x8e, 0x3d, 0xf0, 0x97, 0x69, 0x19, 0xbf, 0x28, 0x82, 0xcb, 0x96,
	0x81, 0x7f, 0x4a, 0xb9, 0x4c, 0xdc, 0x14, 0x97, 0xaf, 0xa0, 0xa4, 0x41, 0xaa, 0x93, 0xfb, 0x06,
	0x2e, 0x63, 0xb7, 0x31, 0x18, 0x3b, 0xe9, 0x54, 0xce, 0xe5, 0x66, 0x68, 0x16, 0x87, 0x00, 0x6a,
	0x57, 0x26, 0x24, 0xca, 0xca, 0x72, 0x19, 0xe0, 0xab, 0x94, 0xfa, 0xd8, 0x47, 0x51, 0xf8, 0x02,
	0xd6, 0x14, 0x44, 0x31, 0xb0, 0x0d, 0x0c, 0xb4, 0x93, 0x86, 0xe2, 0xff, 0x2d, 0x40, 0x3f, 0x86,
	0x5c, 0xed, 0xc5, 0xf2, 0xe3, 0x6c, 0xc3, 0x46, 0x42, 0xba, 0x61, 0xbf, 0xeb, 0xc5, 0x89, 0x08,
	0xe3, 0x3e, 0x57, 0x23, 0x3d, 0x36, 0x95, 0x4d, 0xba, 0x34, 0x50, 0x91, 0x7f, 0x96, 0x68, 0x77,
	0x5d, 0x7a, 0xab, 0x4f, 0xfc, 0xdc, 0x82, 0xed, 0x19, 0x1a, 0xaa, 0xa8, 0x53, 0x58, 0x93, 0x6b,
	0xa7, 0x47, 0xbc, 0x60, 0x41, 0x35, 0x12, 0xfd, 0x0a, 0x9b, 0x8a, 0x5b, 0x44, 0x05, 0x09, 0x88,
	0x20, 0xd5, 0x62, 0x4a, 0xae, 0x91, 0x4f, 0x4e, 0xe6, 0x6b, 0x2b, 0xbc, 0xab, 0x8a, 0xd3, 0xdf,
	0xb8, 0x03, 0x3b, 0x46, 0xe0, 0xa8, 0x51, 0x7d, 0xfa, 0xaf, 0xf0, 0xfc, 0x01, 0xe3, 0x31, 0xd3,
	0x8d, 0x1a, 0x99, 0xbe, 0x49, 0x2d, 0x68, 0x0f, 0x4a, 0x3d, 0xc2, 0xbd, 0x28, 0x66, 0x72, 0xeb,
	0x4b, 0xee, 0x5a, 0x8f, 0xf0, 0x76, 0xcc, 0x28, 0xbe, 0x82, 0x6d, 0x43, 0x6b, 0xd0, 0x2e, 0xac,
	0xce, 0x44, 0x53, 0x5f, 0x68, 0x1f, 0xca, 0x09, 0xe9, 0x52, 0x8f, 0x87, 0xf7, 0x32, 0x54, 0xd1,
	0x2d, 0x8d, 0x0c, 0x9d, 0xf0, 0x9e, 0xe2, 0x67, 0x16, 0xec, 0x76, 0x28, 0x61, 0x7e, 0x4f, 0x2f,
	0xd9, 0xf4, 0x2c, 0x79, 0x7a, 0xe2, 0x09, 0xca, 0x22, 0x4d, 0x51, 0x9a, 0xae, 0x29, 0x8b, 0x9e,
	0x7a, 0x96, 0x0f, 0x16, 0x7c, 0x30, 0x47, 0x45, 0xcd, 0xf3, 0x0c, 0xca, 0x7a, 0x89, 0xf4, 0x44,
	0x17, 0x5e, 0x94, 0x09, 0xda, 0x34, 0xd5, 0x95, 0xb7, 0x9c, 0x2a, 0x81, 0xda, 0x6f, 0xc9, 0x48,
	0x8f, 0xce, 0x39, 0x8f, 0xfd, 0x90, 0x08, 0x1a, 0x64, 0x05, 0x61, 0xf1, 0x55, 0xcc, 0xde, 0x93,
	0x95, 0x39, 0xbd, 0x78, 0x61, 0xc1, 0xc1, 0x05, 0x15, 0x3f, 0x84, 0x5c, 0xc4, 0x6c, 0x44, 0xf2,
	0x8d, 0x85, 0xf3, 0x1c, 0xde, 0x53, 0xa2, 0xe5, 0x89, 0xbb, 0x44, 0x4e, 0x7e, 0xc3, 0xf9, 0xd0,
	0x50, 0xb4, 0x0a, 0x7d, 0x7d, 0x97, 0x50, 0xb7, 0x12, 0x4d, 0x3e, 0x32, 0xda, 0x5b, 0x4c, 0xdb,
	0xbe, 0xa4, 0xf6, 0xfe, 0x09, 0x87, 0x39, 0xf4, 0x9f, 0x42, 0x85, 0x9d, 0x87, 0x22, 0xac, 0xcb,
	0xb3, 0x0e, 0x65, 0xc3, 0xd0, 0xa7, 0xe8, 0x77, 0x28, 0x8f, 0x9f, 0x29, 0xf4, 0xb1, 0x21, 0x54,
	0xf6, 0xd1, 0xb4, 0x3f, 0x59, 0x0c, 0x92, 0x3c, 0x71, 0x01, 0xfd, 0x05, 0x95, 0xa9, 0x67, 0x04,
	0x1d, 0x99, 0xdd, 0x32, 0xf3, 0xb1, 0x8f, 0x1f, 0x83, 0x4d, 0xc7, 0x9f, 0x92, 0x30, 0x63, 0xfc,
	0x79, 0xa5, 0x35, 0xc6, 0x37, 0x28, 0x21, 0x2e, 0xa0, 0xff, 0x60, 0xc7, 0x38, 0x0a, 0xd4, 0x32,
	0x53, 0xcc, 0xdd, 0x39, 0xfb, 0xf3, 0xe5, 0x1d, 0x74, 0x76, 0xe7, 0x95, 0x05, 0x9b, 0xfa, 0x72,
	0xe8, 0x59, 0xc9, 0x8e, 0x6a, 0x6b, 0x5e, 0x47, 0x33, 0x57, 0x2a, 0xaf, 0xa3, 0xd9, 0x37, 0x15,
	0x17, 0x50, 0x0f, 0x36, 0x33, 0x42, 0x82, 0x3e, 0x35, 0x2d, 0x97, 0x51, 0xf7, 0xec, 0xcf, 0x96,
	0x81, 0xca, 0x5c, 0xce, 0x4b, 0x0b, 0x36, 0xd4, 0xdb, 0xa8, 0x8b, 0xfb, 0x03, 0x60, 0xf2, 0xca,
	0xa2, 0x9c, 0x25, 0x9b, 0x7d, 0xb8, 0xed, 0xa3, 0x47, 0x50, 0x53, 0x95, 0x55, 0xf3, 0x94, 0x07,
	0x39, 0x86, 0x20, 0x8f, 0xc8, 0x94, 0xbd, 0x3b, 0x77, 0x9b, 0xbf, 0x1b, 0xfd, 0xf2, 0xe2, 0xc2,
	0xcd, 0x6a, 0x6a, 0x39, 0x7d, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xd6, 0xde, 0x9d, 0x66, 0x0b,
	0x00, 0x00,
}
