// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snapshot/v1/reviews.proto

package snapshot_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ReviewSection represents the entire review section of a snapshot
type ReviewSection struct {
	Grade   Grade           `protobuf:"varint,1,opt,name=grade,enum=snapshot.v1.Grade" json:"grade,omitempty"`
	Content *SectionContent `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Data    *ReviewData     `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Config  *ReviewConfig   `protobuf:"bytes,4,opt,name=config" json:"config,omitempty"`
}

func (m *ReviewSection) Reset()                    { *m = ReviewSection{} }
func (m *ReviewSection) String() string            { return proto.CompactTextString(m) }
func (*ReviewSection) ProtoMessage()               {}
func (*ReviewSection) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ReviewSection) GetGrade() Grade {
	if m != nil {
		return m.Grade
	}
	return Grade_NO_GRADE
}

func (m *ReviewSection) GetContent() *SectionContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ReviewSection) GetData() *ReviewData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReviewSection) GetConfig() *ReviewConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// ReviewConfig represents the configuration for the review section
type ReviewConfig struct {
	HideContent               bool   `protobuf:"varint,1,opt,name=hide_content,json=hideContent" json:"hide_content,omitempty"`
	HideReviewsFound          bool   `protobuf:"varint,2,opt,name=hide_reviews_found,json=hideReviewsFound" json:"hide_reviews_found,omitempty"`
	HideReviewsFoundPerMonth  bool   `protobuf:"varint,3,opt,name=hide_reviews_found_per_month,json=hideReviewsFoundPerMonth" json:"hide_reviews_found_per_month,omitempty"`
	HideAverageReviewScore    bool   `protobuf:"varint,4,opt,name=hide_average_review_score,json=hideAverageReviewScore" json:"hide_average_review_score,omitempty"`
	HideNumberOfReviewSources bool   `protobuf:"varint,5,opt,name=hide_number_of_review_sources,json=hideNumberOfReviewSources" json:"hide_number_of_review_sources,omitempty"`
	CustomizedMessage         string `protobuf:"bytes,6,opt,name=customized_message,json=customizedMessage" json:"customized_message,omitempty"`
}

func (m *ReviewConfig) Reset()                    { *m = ReviewConfig{} }
func (m *ReviewConfig) String() string            { return proto.CompactTextString(m) }
func (*ReviewConfig) ProtoMessage()               {}
func (*ReviewConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ReviewConfig) GetHideContent() bool {
	if m != nil {
		return m.HideContent
	}
	return false
}

func (m *ReviewConfig) GetHideReviewsFound() bool {
	if m != nil {
		return m.HideReviewsFound
	}
	return false
}

func (m *ReviewConfig) GetHideReviewsFoundPerMonth() bool {
	if m != nil {
		return m.HideReviewsFoundPerMonth
	}
	return false
}

func (m *ReviewConfig) GetHideAverageReviewScore() bool {
	if m != nil {
		return m.HideAverageReviewScore
	}
	return false
}

func (m *ReviewConfig) GetHideNumberOfReviewSources() bool {
	if m != nil {
		return m.HideNumberOfReviewSources
	}
	return false
}

func (m *ReviewConfig) GetCustomizedMessage() string {
	if m != nil {
		return m.CustomizedMessage
	}
	return ""
}

// ReviewData represents the review data found for a business and related industry averages
type ReviewData struct {
	ReviewsFound          *ReviewDataItem      `protobuf:"bytes,1,opt,name=reviews_found,json=reviewsFound" json:"reviews_found,omitempty"`
	ReviewsFoundPerMonth  *ReviewDataItem      `protobuf:"bytes,2,opt,name=reviews_found_per_month,json=reviewsFoundPerMonth" json:"reviews_found_per_month,omitempty"`
	AverageReviewScore    *ReviewDataItem      `protobuf:"bytes,3,opt,name=average_review_score,json=averageReviewScore" json:"average_review_score,omitempty"`
	NumberOfReviewSources *ReviewDataItem      `protobuf:"bytes,4,opt,name=number_of_review_sources,json=numberOfReviewSources" json:"number_of_review_sources,omitempty"`
	SampleSourceCounts    []*SampleSourceCount `protobuf:"bytes,5,rep,name=sample_source_counts,json=sampleSourceCounts" json:"sample_source_counts,omitempty"`
}

func (m *ReviewData) Reset()                    { *m = ReviewData{} }
func (m *ReviewData) String() string            { return proto.CompactTextString(m) }
func (*ReviewData) ProtoMessage()               {}
func (*ReviewData) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ReviewData) GetReviewsFound() *ReviewDataItem {
	if m != nil {
		return m.ReviewsFound
	}
	return nil
}

func (m *ReviewData) GetReviewsFoundPerMonth() *ReviewDataItem {
	if m != nil {
		return m.ReviewsFoundPerMonth
	}
	return nil
}

func (m *ReviewData) GetAverageReviewScore() *ReviewDataItem {
	if m != nil {
		return m.AverageReviewScore
	}
	return nil
}

func (m *ReviewData) GetNumberOfReviewSources() *ReviewDataItem {
	if m != nil {
		return m.NumberOfReviewSources
	}
	return nil
}

func (m *ReviewData) GetSampleSourceCounts() []*SampleSourceCount {
	if m != nil {
		return m.SampleSourceCounts
	}
	return nil
}

type SampleSourceCount struct {
	SourceName  string `protobuf:"bytes,1,opt,name=source_name,json=sourceName" json:"source_name,omitempty"`
	ReviewCount int64  `protobuf:"varint,2,opt,name=review_count,json=reviewCount" json:"review_count,omitempty"`
}

func (m *SampleSourceCount) Reset()                    { *m = SampleSourceCount{} }
func (m *SampleSourceCount) String() string            { return proto.CompactTextString(m) }
func (*SampleSourceCount) ProtoMessage()               {}
func (*SampleSourceCount) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SampleSourceCount) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

func (m *SampleSourceCount) GetReviewCount() int64 {
	if m != nil {
		return m.ReviewCount
	}
	return 0
}

// ReviewDataItem is a holder for each row of the info section
type ReviewDataItem struct {
	// The grade of the item
	Grade Grade `protobuf:"varint,1,opt,name=grade,enum=snapshot.v1.Grade" json:"grade,omitempty"`
	// The value of the item for a business
	Business float32 `protobuf:"fixed32,2,opt,name=business" json:"business,omitempty"`
	// The industry average
	IndustryAverage float32 `protobuf:"fixed32,3,opt,name=industry_average,json=industryAverage" json:"industry_average,omitempty"`
}

func (m *ReviewDataItem) Reset()                    { *m = ReviewDataItem{} }
func (m *ReviewDataItem) String() string            { return proto.CompactTextString(m) }
func (*ReviewDataItem) ProtoMessage()               {}
func (*ReviewDataItem) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *ReviewDataItem) GetGrade() Grade {
	if m != nil {
		return m.Grade
	}
	return Grade_NO_GRADE
}

func (m *ReviewDataItem) GetBusiness() float32 {
	if m != nil {
		return m.Business
	}
	return 0
}

func (m *ReviewDataItem) GetIndustryAverage() float32 {
	if m != nil {
		return m.IndustryAverage
	}
	return 0
}

type UpdateReviewConfigRequest struct {
	// The id of the snapshot to update a section for
	SnapshotId   string        `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	ReviewConfig *ReviewConfig `protobuf:"bytes,2,opt,name=review_config,json=reviewConfig" json:"review_config,omitempty"`
	// Mask for what fields should be updated
	FieldMask *FieldMask `protobuf:"bytes,20,opt,name=field_mask,json=fieldMask" json:"field_mask,omitempty"`
}

func (m *UpdateReviewConfigRequest) Reset()                    { *m = UpdateReviewConfigRequest{} }
func (m *UpdateReviewConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateReviewConfigRequest) ProtoMessage()               {}
func (*UpdateReviewConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *UpdateReviewConfigRequest) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *UpdateReviewConfigRequest) GetReviewConfig() *ReviewConfig {
	if m != nil {
		return m.ReviewConfig
	}
	return nil
}

func (m *UpdateReviewConfigRequest) GetFieldMask() *FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type GetReviewSectionResponse struct {
	Section *ReviewSection `protobuf:"bytes,1,opt,name=section" json:"section,omitempty"`
}

func (m *GetReviewSectionResponse) Reset()                    { *m = GetReviewSectionResponse{} }
func (m *GetReviewSectionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetReviewSectionResponse) ProtoMessage()               {}
func (*GetReviewSectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *GetReviewSectionResponse) GetSection() *ReviewSection {
	if m != nil {
		return m.Section
	}
	return nil
}

func init() {
	proto.RegisterType((*ReviewSection)(nil), "snapshot.v1.ReviewSection")
	proto.RegisterType((*ReviewConfig)(nil), "snapshot.v1.ReviewConfig")
	proto.RegisterType((*ReviewData)(nil), "snapshot.v1.ReviewData")
	proto.RegisterType((*SampleSourceCount)(nil), "snapshot.v1.SampleSourceCount")
	proto.RegisterType((*ReviewDataItem)(nil), "snapshot.v1.ReviewDataItem")
	proto.RegisterType((*UpdateReviewConfigRequest)(nil), "snapshot.v1.UpdateReviewConfigRequest")
	proto.RegisterType((*GetReviewSectionResponse)(nil), "snapshot.v1.GetReviewSectionResponse")
}

func init() { proto.RegisterFile("snapshot/v1/reviews.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x52, 0x13, 0x4f,
	0x10, 0xc7, 0x6b, 0x13, 0xfe, 0x84, 0x4e, 0xe0, 0x07, 0x53, 0xf9, 0xc1, 0x26, 0xa2, 0xe2, 0x9e,
	0x62, 0xa9, 0xa1, 0x40, 0x39, 0x78, 0xb1, 0xb0, 0xb0, 0xa0, 0x38, 0x04, 0xa9, 0x51, 0xcb, 0xe3,
	0xd6, 0xb0, 0xdb, 0x09, 0x5b, 0xb0, 0x33, 0x71, 0x66, 0x36, 0x96, 0xde, 0x7c, 0x0c, 0x9f, 0xc3,
	0xc7, 0xf0, 0xe2, 0x23, 0x59, 0x3b, 0x33, 0x9b, 0x64, 0x49, 0xa8, 0x94, 0x37, 0xe8, 0xef, 0xe7,
	0xdb, 0xe9, 0xee, 0xd9, 0x6e, 0x68, 0x29, 0xce, 0x86, 0xea, 0x5a, 0xe8, 0xfd, 0xd1, 0xc1, 0xbe,
	0xc4, 0x51, 0x82, 0x5f, 0x55, 0x77, 0x28, 0x85, 0x16, 0xa4, 0x5e, 0x48, 0xdd, 0xd1, 0x41, 0xbb,
	0x3d, 0xcd, 0x8d, 0x05, 0x03, 0xb6, 0x77, 0xa7, 0xb5, 0x7e, 0x82, 0xb7, 0x71, 0x98, 0x32, 0x75,
	0x63, 0xd5, 0xe0, 0x8f, 0x07, 0xeb, 0xd4, 0x24, 0xfe, 0x80, 0x91, 0x4e, 0x04, 0x27, 0x1d, 0x58,
	0x1e, 0x48, 0x16, 0xa3, 0xef, 0xed, 0x79, 0x9d, 0x8d, 0x43, 0xd2, 0x9d, 0xfa, 0xa1, 0xee, 0x59,
	0xae, 0x50, 0x0b, 0x90, 0x23, 0x58, 0x8d, 0x04, 0xd7, 0xc8, 0xb5, 0x5f, 0xd9, 0xf3, 0x3a, 0xf5,
	0xc3, 0x07, 0x25, 0xd6, 0x25, 0x3c, 0xb1, 0x08, 0x2d, 0x58, 0xf2, 0x0c, 0x96, 0x62, 0xa6, 0x99,
	0x5f, 0x35, 0x9e, 0x9d, 0x92, 0xc7, 0x96, 0xf2, 0x8e, 0x69, 0x46, 0x0d, 0x44, 0x0e, 0x60, 0x25,
	0x12, 0xbc, 0x9f, 0x0c, 0xfc, 0x25, 0x83, 0xb7, 0xe6, 0xe0, 0x27, 0x06, 0xa0, 0x0e, 0x0c, 0x7e,
	0x57, 0xa0, 0x31, 0x2d, 0x90, 0x27, 0xd0, 0xb8, 0x4e, 0x62, 0x0c, 0x8b, 0x62, 0xf3, 0xc6, 0x6a,
	0xb4, 0x9e, 0xc7, 0x5c, 0x71, 0xe4, 0x39, 0x10, 0x83, 0xb8, 0x19, 0x87, 0x7d, 0x91, 0xf1, 0xd8,
	0x74, 0x55, 0xa3, 0x9b, 0xb9, 0x62, 0x13, 0xaa, 0xd3, 0x3c, 0x4e, 0xde, 0xc0, 0xee, 0x2c, 0x1d,
	0x0e, 0x51, 0x86, 0xa9, 0xe0, 0xfa, 0xda, 0x74, 0x56, 0xa3, 0xfe, 0x5d, 0xdf, 0x25, 0xca, 0x5e,
	0xae, 0x93, 0xd7, 0xd0, 0x32, 0x7e, 0x36, 0x42, 0xc9, 0x06, 0x45, 0x9e, 0x50, 0x45, 0x42, 0xa2,
	0xe9, 0xb3, 0x46, 0xb7, 0x73, 0xe0, 0xad, 0xd5, 0xdd, 0xfb, 0xe4, 0x2a, 0x39, 0x86, 0x87, 0xc6,
	0xca, 0xb3, 0xf4, 0x0a, 0x65, 0x28, 0xfa, 0x63, 0xb3, 0xc8, 0x64, 0x84, 0xca, 0x5f, 0x36, 0x76,
	0x93, 0xff, 0xc2, 0x30, 0xef, 0xfb, 0xce, 0x6f, 0x01, 0xf2, 0x02, 0x48, 0x94, 0x29, 0x2d, 0xd2,
	0xe4, 0x3b, 0xc6, 0x61, 0x8a, 0x4a, 0xb1, 0x01, 0xfa, 0x2b, 0x7b, 0x5e, 0x67, 0x8d, 0x6e, 0x4d,
	0x94, 0x9e, 0x15, 0x82, 0x9f, 0x55, 0x80, 0xc9, 0xab, 0x90, 0x63, 0x58, 0x2f, 0xcf, 0xc8, 0x9b,
	0xf3, 0xf2, 0x13, 0xfe, 0x5c, 0x63, 0x4a, 0x1b, 0x72, 0x7a, 0x78, 0x14, 0x76, 0xee, 0x9b, 0x5b,
	0x65, 0x71, 0xae, 0xa6, 0x9c, 0x37, 0xd0, 0x1e, 0x34, 0xe7, 0xce, 0xb2, 0xba, 0x38, 0x21, 0x61,
	0xb3, 0x43, 0xfe, 0x08, 0xfe, 0xbd, 0xf3, 0x5d, 0x5a, 0x9c, 0xf2, 0x7f, 0x3e, 0x77, 0xf0, 0x97,
	0xd0, 0x54, 0x2c, 0x1d, 0xde, 0xa2, 0xcb, 0x15, 0x46, 0x22, 0xe3, 0x3a, 0x7f, 0xb1, 0x6a, 0xa7,
	0x7e, 0xf8, 0xa8, 0xbc, 0x3b, 0x06, 0xb4, 0xce, 0x93, 0x1c, 0xa3, 0x44, 0xdd, 0x0d, 0xa9, 0xe0,
	0x33, 0x6c, 0xcd, 0x80, 0xe4, 0x31, 0xd4, 0x5d, 0x7e, 0xce, 0x52, 0xbb, 0xc5, 0x6b, 0x14, 0x6c,
	0xe8, 0x82, 0xa5, 0x98, 0xaf, 0x83, 0xeb, 0xc9, 0x14, 0x60, 0xa6, 0x5e, 0xa5, 0x75, 0xe9, 0x56,
	0x26, 0xe3, 0x3a, 0xf8, 0xe1, 0xc1, 0x46, 0xb9, 0xa9, 0x7f, 0x38, 0x0b, 0x6d, 0xa8, 0x5d, 0x65,
	0x2a, 0xe1, 0xa8, 0x94, 0xc9, 0x5d, 0xa1, 0xe3, 0xff, 0xc9, 0x53, 0xd8, 0x4c, 0x78, 0x9c, 0x29,
	0x2d, 0xbf, 0x15, 0x5f, 0xbf, 0x79, 0xa4, 0x0a, 0xfd, 0xaf, 0x88, 0xbb, 0x8f, 0x3e, 0xf8, 0xe5,
	0x41, 0xeb, 0xd3, 0x30, 0x66, 0x1a, 0x4b, 0x5b, 0x8e, 0x5f, 0x32, 0x54, 0xb6, 0x4b, 0x57, 0x40,
	0x98, 0xc4, 0xe3, 0x2e, 0x5d, 0xe8, 0x3c, 0xdf, 0xd1, 0xf5, 0x71, 0x97, 0xe6, 0x7e, 0x54, 0x16,
	0xdd, 0x8f, 0x86, 0x9c, 0x3e, 0x1a, 0x47, 0x00, 0x93, 0x63, 0xe9, 0x37, 0x8d, 0x79, 0xbb, 0x64,
	0x3e, 0xcd, 0xe5, 0x1e, 0x53, 0x37, 0x74, 0xad, 0x5f, 0xfc, 0x19, 0x5c, 0x82, 0x7f, 0x86, 0xba,
	0x74, 0x51, 0x29, 0xaa, 0xa1, 0xe0, 0x0a, 0xc9, 0x2b, 0x58, 0x55, 0x36, 0xe4, 0xb6, 0xa6, 0x3d,
	0xa7, 0x98, 0xc2, 0x54, 0xa0, 0x57, 0x2b, 0xe6, 0x50, 0xbf, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0x93, 0xdb, 0xad, 0x0c, 0x06, 0x00, 0x00,
}
