syntax = "proto3";

package vetl.v1;

import "google/protobuf/empty.proto";
import "vetl/v1/source.proto";
import "vetl/v1/sink.proto";
import "vetl/v1/transform.proto";

message CreateDataSourceRequest {
    // unique identifier for this data source
    string source_id = 1;
    DataSource source = 2;
}

message UpsertTransformRequest {
    // Whether or not this transform is visible to other services.
    bool public = 1;

    // Identifier for this transform
    string id = 2;

    // The set of parent transform that this transform depends on.
    repeated string parent_ids = 3;

    // The definition of the transform
    Transform transform = 4;
}

message CreateSubscriptionRequest {
    // Identifier for this subscription
    string id = 1;

    // Identifier of the transform to subscribe to
    string parent_id = 2;

    vetl.v1.DataSink sink = 3;
}

message BackfillSubscriptionRequest {
    // Identifier of the subscription to backfill
    string id = 1;
}

service VETL {
    // Create a data source
    rpc CreateDataSource(CreateDataSourceRequest) returns (google.protobuf.Empty) {
    }

    // Insert or Update a transform
    rpc UpsertTransform(UpsertTransformRequest) returns (google.protobuf.Empty) {
    }
    
    // Create a subscription to a transform's output
    rpc CreateSubscription(CreateSubscriptionRequest) returns (google.protobuf.Empty) {
    }

    // Backfill a subscription with all data from all its sources.
    // This should be triggered manually and used to migrate/transform historical data.
    rpc BackfillSubscription(BackfillSubscriptionRequest) returns (google.protobuf.Empty) {
    }
}
