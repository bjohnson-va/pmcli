syntax = "proto3";

package vetl.v1;

import "google/protobuf/timestamp.proto";

// TODO: This will become a common proto - dwalker
// Property defines a single property for a schema
message Property {
    // Unique identifier for this property. Must be in snake case format.
    // Example(s): account_group_id, listing_id, company_name
    string name = 1;

    enum Type {
        STRING = 0;
        INT64 = 1;
        DOUBLE = 2;
        BOOL = 3;
        TIMESTAMP = 4;
        GEOPOINT = 5;
        STRUCT = 6;
    }
    // Type for this property
    Type type = 2;

    // Indicates if the field is repeated.
    bool repeated = 3;

    // Indicates if the field is required. Only validates that the field has been supplied in create/update requests,
    // and not the actual value.
    // Example(s):
    // 1) A required string field would allow an empty string if the field was passed, but would fail if the field
    // was not present in the request.
    // 2) A required int property would allow 0 as a value, but would fail if the field was not supplied in the request.
    bool required = 4;

    // Can only be specified if the Type supplied is a STRUCT.
    // Is the schema of the structured property.
    repeated Property properties = 5;
}

// Schema describes the structure of data in a storage-agnostic way
message Schema {
    repeated Property properties = 1;
}

message Entity {
    int64 version = 4;
    Struct values = 5;
}

message Struct {
    map<string, Value> values = 1;
}

message ListValue {
    repeated Value values = 1;
}

message Value {
    oneof kind {
        // Represents a int64 value
        int64 int_value = 2;

        // Represents a double value.
        double double_value = 3;

        // Represents a string value.
        string string_value = 4;

        // Represents a boolean value.
        bool bool_value = 5;

        // Represents a structured value.
        Struct struct_value = 6;

        // Represents a timestamp value.
        google.protobuf.Timestamp timestamp_value = 7;

        // Represents a repeated `Value`.
        ListValue list_value = 8;

        // Represents a geopoint value
        GeoPoint geopoint_value = 9;
    }
}

message GeoPoint {
    double latitude = 1;
    double longitude = 2;
}