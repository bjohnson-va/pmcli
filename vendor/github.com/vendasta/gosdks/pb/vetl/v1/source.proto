syntax = "proto3";

package vetl.v1;

import "vetl/v1/entity.proto";

// Describes the schema associated with a particular source and how it is provided to vETL
message DataSource {
    // The Provider contains all the metadata necessary for vETL to read data from a particular source
    oneof provider {
        VStoreSource vstore = 1;
        DatastoreSource datastore = 3;
    }
    // Defines how the data is structured.
    Schema schema = 2;
}

// VStoreSource contains the necessary information for vETL to be able to read data from a particular VStore table
message VStoreSource {
    string namespace = 1;
    string kind = 2;
    repeated string primary_key = 3;
    // The index id of a pubsub secondary index that is suitable for vETL to read from in order to transform new data
    string pubsub_index_id = 4;
}

// DatastoreSource contains the necessary information for vETL to be able to read data from a particular Cloud Datastore table
// This source is throttled and will not provide updates in true realtime.
// Instead, updates are processed in bucketed windows, to rectify race conditions with creating/deleting in quick succession.
message DatastoreSource {
    message Namespace {
        // identifies the datastore namespace that the table lives under. Empty value here means the top level (empty) namespace.
        string namespace = 1;
        // if true, the model is contained in many namespaces, potentially all namespaces.
        bool all = 2;
    }
    Namespace namespace = 1;

    // the name of the table
    string kind = 2;

    // the topic name of the pubsub intake that will notify vETL of changes to entities
    string intake_pubsub_topic = 3;

    // the project id of the cloud datastore instance and intake_pubsub_topic
    string project_id = 4;
}