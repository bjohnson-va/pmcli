// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vetl/v1/entity.proto

package vetl_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Property_Type int32

const (
	Property_STRING    Property_Type = 0
	Property_INT64     Property_Type = 1
	Property_DOUBLE    Property_Type = 2
	Property_BOOL      Property_Type = 3
	Property_TIMESTAMP Property_Type = 4
	Property_GEOPOINT  Property_Type = 5
	Property_STRUCT    Property_Type = 6
)

var Property_Type_name = map[int32]string{
	0: "STRING",
	1: "INT64",
	2: "DOUBLE",
	3: "BOOL",
	4: "TIMESTAMP",
	5: "GEOPOINT",
	6: "STRUCT",
}
var Property_Type_value = map[string]int32{
	"STRING":    0,
	"INT64":     1,
	"DOUBLE":    2,
	"BOOL":      3,
	"TIMESTAMP": 4,
	"GEOPOINT":  5,
	"STRUCT":    6,
}

func (x Property_Type) String() string {
	return proto.EnumName(Property_Type_name, int32(x))
}
func (Property_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

// TODO: This will become a common proto - dwalker
// Property defines a single property for a schema
type Property struct {
	// Unique identifier for this property. Must be in snake case format.
	// Example(s): account_group_id, listing_id, company_name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Type for this property
	Type Property_Type `protobuf:"varint,2,opt,name=type,enum=vetl.v1.Property_Type" json:"type,omitempty"`
	// Indicates if the field is repeated.
	Repeated bool `protobuf:"varint,3,opt,name=repeated" json:"repeated,omitempty"`
	// Indicates if the field is required. Only validates that the field has been supplied in create/update requests,
	// and not the actual value.
	// Example(s):
	// 1) A required string field would allow an empty string if the field was passed, but would fail if the field
	// was not present in the request.
	// 2) A required int property would allow 0 as a value, but would fail if the field was not supplied in the request.
	Required bool `protobuf:"varint,4,opt,name=required" json:"required,omitempty"`
	// Can only be specified if the Type supplied is a STRUCT.
	// Is the schema of the structured property.
	Properties []*Property `protobuf:"bytes,5,rep,name=properties" json:"properties,omitempty"`
}

func (m *Property) Reset()                    { *m = Property{} }
func (m *Property) String() string            { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()               {}
func (*Property) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Property) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Property) GetType() Property_Type {
	if m != nil {
		return m.Type
	}
	return Property_STRING
}

func (m *Property) GetRepeated() bool {
	if m != nil {
		return m.Repeated
	}
	return false
}

func (m *Property) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Property) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

// Schema describes the structure of data in a storage-agnostic way
type Schema struct {
	Properties []*Property `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty"`
}

func (m *Schema) Reset()                    { *m = Schema{} }
func (m *Schema) String() string            { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()               {}
func (*Schema) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Schema) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

type Entity struct {
	Version int64   `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Values  *Struct `protobuf:"bytes,5,opt,name=values" json:"values,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Entity) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Entity) GetValues() *Struct {
	if m != nil {
		return m.Values
	}
	return nil
}

type Struct struct {
	Values map[string]*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Struct) Reset()                    { *m = Struct{} }
func (m *Struct) String() string            { return proto.CompactTextString(m) }
func (*Struct) ProtoMessage()               {}
func (*Struct) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Struct) GetValues() map[string]*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type ListValue struct {
	Values []*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListValue) Reset()                    { *m = ListValue{} }
func (m *ListValue) String() string            { return proto.CompactTextString(m) }
func (*ListValue) ProtoMessage()               {}
func (*ListValue) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ListValue) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type Value struct {
	// Types that are valid to be assigned to Kind:
	//	*Value_IntValue
	//	*Value_DoubleValue
	//	*Value_StringValue
	//	*Value_BoolValue
	//	*Value_StructValue
	//	*Value_TimestampValue
	//	*Value_ListValue
	//	*Value_GeopointValue
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type isValue_Kind interface {
	isValue_Kind()
}

type Value_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}
type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,oneof"`
}
type Value_StructValue struct {
	StructValue *Struct `protobuf:"bytes,6,opt,name=struct_value,json=structValue,oneof"`
}
type Value_TimestampValue struct {
	TimestampValue *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=timestamp_value,json=timestampValue,oneof"`
}
type Value_ListValue struct {
	ListValue *ListValue `protobuf:"bytes,8,opt,name=list_value,json=listValue,oneof"`
}
type Value_GeopointValue struct {
	GeopointValue *GeoPoint `protobuf:"bytes,9,opt,name=geopoint_value,json=geopointValue,oneof"`
}

func (*Value_IntValue) isValue_Kind()       {}
func (*Value_DoubleValue) isValue_Kind()    {}
func (*Value_StringValue) isValue_Kind()    {}
func (*Value_BoolValue) isValue_Kind()      {}
func (*Value_StructValue) isValue_Kind()    {}
func (*Value_TimestampValue) isValue_Kind() {}
func (*Value_ListValue) isValue_Kind()      {}
func (*Value_GeopointValue) isValue_Kind()  {}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Value) GetIntValue() int64 {
	if x, ok := m.GetKind().(*Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetKind().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetKind().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetBoolValue() bool {
	if x, ok := m.GetKind().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Value) GetStructValue() *Struct {
	if x, ok := m.GetKind().(*Value_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (m *Value) GetTimestampValue() *google_protobuf1.Timestamp {
	if x, ok := m.GetKind().(*Value_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (m *Value) GetListValue() *ListValue {
	if x, ok := m.GetKind().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (m *Value) GetGeopointValue() *GeoPoint {
	if x, ok := m.GetKind().(*Value_GeopointValue); ok {
		return x.GeopointValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_IntValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_StructValue)(nil),
		(*Value_TimestampValue)(nil),
		(*Value_ListValue)(nil),
		(*Value_GeopointValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_IntValue:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *Value_DoubleValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_StringValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Value_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_StructValue:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructValue); err != nil {
			return err
		}
	case *Value_TimestampValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TimestampValue); err != nil {
			return err
		}
	case *Value_ListValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListValue); err != nil {
			return err
		}
	case *Value_GeopointValue:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GeopointValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Kind has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 2: // kind.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_IntValue{int64(x)}
		return true, err
	case 3: // kind.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Kind = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 4: // kind.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &Value_StringValue{x}
		return true, err
	case 5: // kind.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_BoolValue{x != 0}
		return true, err
	case 6: // kind.struct_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Struct)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_StructValue{msg}
		return true, err
	case 7: // kind.timestamp_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Timestamp)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_TimestampValue{msg}
		return true, err
	case 8: // kind.list_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListValue)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_ListValue{msg}
		return true, err
	case 9: // kind.geopoint_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GeoPoint)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_GeopointValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_IntValue:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *Value_DoubleValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *Value_StringValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Value_BoolValue:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *Value_StructValue:
		s := proto.Size(x.StructValue)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_TimestampValue:
		s := proto.Size(x.TimestampValue)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_ListValue:
		s := proto.Size(x.ListValue)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_GeopointValue:
		s := proto.Size(x.GeopointValue)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GeoPoint struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *GeoPoint) Reset()                    { *m = GeoPoint{} }
func (m *GeoPoint) String() string            { return proto.CompactTextString(m) }
func (*GeoPoint) ProtoMessage()               {}
func (*GeoPoint) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *GeoPoint) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoPoint) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func init() {
	proto.RegisterType((*Property)(nil), "vetl.v1.Property")
	proto.RegisterType((*Schema)(nil), "vetl.v1.Schema")
	proto.RegisterType((*Entity)(nil), "vetl.v1.Entity")
	proto.RegisterType((*Struct)(nil), "vetl.v1.Struct")
	proto.RegisterType((*ListValue)(nil), "vetl.v1.ListValue")
	proto.RegisterType((*Value)(nil), "vetl.v1.Value")
	proto.RegisterType((*GeoPoint)(nil), "vetl.v1.GeoPoint")
	proto.RegisterEnum("vetl.v1.Property_Type", Property_Type_name, Property_Type_value)
}

func init() { proto.RegisterFile("vetl/v1/entity.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x6d, 0x9a, 0x34, 0x4b, 0x6e, 0xb7, 0x2e, 0x58, 0x08, 0x55, 0x05, 0xb4, 0xaa, 0x20, 0xa8,
	0x78, 0x48, 0xb5, 0x76, 0x42, 0x68, 0x3c, 0x31, 0x16, 0xad, 0x15, 0xdb, 0x5a, 0xb9, 0x19, 0x4f,
	0x48, 0x28, 0x6d, 0x4d, 0xb1, 0x96, 0xc6, 0x21, 0x71, 0x2a, 0xe5, 0x0b, 0xe0, 0x9d, 0x1f, 0x46,
	0xb6, 0x93, 0x74, 0x2a, 0x3c, 0xf0, 0x16, 0x9f, 0x7b, 0xce, 0xb9, 0xc7, 0xd7, 0xb9, 0xf0, 0x78,
	0x4b, 0x78, 0x38, 0xd8, 0x9e, 0x0e, 0x48, 0xc4, 0x29, 0xcf, 0xdd, 0x38, 0x61, 0x9c, 0xa1, 0x03,
	0x81, 0xba, 0xdb, 0xd3, 0xce, 0xc9, 0x9a, 0xb1, 0x75, 0x48, 0x06, 0x12, 0x5e, 0x64, 0xdf, 0x06,
	0x9c, 0x6e, 0x48, 0xca, 0x83, 0x4d, 0xac, 0x98, 0xbd, 0xdf, 0x75, 0xb0, 0x66, 0x09, 0x8b, 0x49,
	0xc2, 0x73, 0x84, 0xc0, 0x88, 0x82, 0x0d, 0x69, 0x6b, 0x5d, 0xad, 0x6f, 0x63, 0xf9, 0x8d, 0xde,
	0x80, 0xc1, 0xf3, 0x98, 0xb4, 0xeb, 0x5d, 0xad, 0xdf, 0x1a, 0x3e, 0x71, 0x0b, 0x67, 0xb7, 0x14,
	0xb9, 0x7e, 0x1e, 0x13, 0x2c, 0x39, 0xa8, 0x03, 0x56, 0x42, 0x62, 0x12, 0x70, 0xb2, 0x6a, 0xeb,
	0x5d, 0xad, 0x6f, 0xe1, 0xea, 0xac, 0x6a, 0x3f, 0x32, 0x9a, 0x90, 0x55, 0xdb, 0x28, 0x6b, 0xea,
	0x8c, 0x4e, 0x01, 0x62, 0x65, 0x47, 0x49, 0xda, 0x6e, 0x74, 0xf5, 0x7e, 0x73, 0xf8, 0xe8, 0xaf,
	0x4e, 0xf8, 0x01, 0xa9, 0xf7, 0x05, 0x0c, 0xd1, 0x18, 0x01, 0x98, 0x73, 0x1f, 0x4f, 0x6e, 0xaf,
	0x9c, 0x1a, 0xb2, 0xa1, 0x31, 0xb9, 0xf5, 0xdf, 0x9e, 0x39, 0x9a, 0x80, 0x2f, 0xa7, 0x77, 0x17,
	0xd7, 0x9e, 0x53, 0x47, 0x16, 0x18, 0x17, 0xd3, 0xe9, 0xb5, 0xa3, 0xa3, 0x23, 0xb0, 0xfd, 0xc9,
	0x8d, 0x37, 0xf7, 0x3f, 0xdc, 0xcc, 0x1c, 0x03, 0x1d, 0x82, 0x75, 0xe5, 0x4d, 0x67, 0xd3, 0xc9,
	0xad, 0xef, 0x34, 0x0a, 0xa7, 0xbb, 0x8f, 0xbe, 0x63, 0xf6, 0xde, 0x83, 0x39, 0x5f, 0x7e, 0x27,
	0x9b, 0x60, 0x2f, 0x9a, 0xf6, 0x3f, 0xd1, 0x3e, 0x81, 0xe9, 0xc9, 0xc7, 0x40, 0x6d, 0x38, 0xd8,
	0x92, 0x24, 0xa5, 0x2c, 0x92, 0x57, 0xd6, 0x71, 0x79, 0x44, 0xaf, 0xc1, 0xdc, 0x06, 0x61, 0x26,
	0x6f, 0xab, 0xf5, 0x9b, 0xc3, 0xe3, 0xca, 0x72, 0xce, 0x93, 0x6c, 0xc9, 0x71, 0x51, 0xee, 0xfd,
	0xd2, 0xc0, 0x54, 0x10, 0x1a, 0x55, 0x1a, 0x15, 0xe3, 0xe9, 0x9e, 0xc6, 0xfd, 0x2c, 0xab, 0x5e,
	0xc4, 0x93, 0xbc, 0xd4, 0x77, 0x26, 0xd0, 0x7c, 0x00, 0x23, 0x07, 0xf4, 0x7b, 0x92, 0x17, 0x0f,
	0x2c, 0x3e, 0xd1, 0x4b, 0x68, 0x48, 0xaa, 0x7c, 0xe0, 0xe6, 0xb0, 0x55, 0x99, 0x4a, 0x19, 0x56,
	0xc5, 0xf3, 0xfa, 0x3b, 0xad, 0x37, 0x02, 0xfb, 0x9a, 0xa6, 0x5c, 0xe2, 0xe8, 0xd5, 0x5e, 0x98,
	0x7d, 0x5d, 0x99, 0xff, 0xa7, 0x0e, 0x0d, 0xa5, 0x78, 0x0e, 0x36, 0x8d, 0xf8, 0xd7, 0x5d, 0x33,
	0x7d, 0x5c, 0xc3, 0x16, 0x8d, 0x0a, 0xc3, 0x17, 0x70, 0xb8, 0x62, 0xd9, 0x22, 0x24, 0x05, 0x43,
	0xfc, 0x3f, 0xda, 0xb8, 0x86, 0x9b, 0x0a, 0xad, 0x48, 0x29, 0x4f, 0x68, 0xb4, 0x2e, 0x48, 0x62,
	0xaa, 0xb6, 0x20, 0x29, 0x54, 0x91, 0x4e, 0x00, 0x16, 0x8c, 0x85, 0x05, 0x45, 0xcc, 0xd7, 0x1a,
	0xd7, 0xb0, 0x2d, 0x30, 0x45, 0x38, 0x93, 0x2e, 0xd9, 0xb2, 0x0c, 0x63, 0xfe, 0xf3, 0x09, 0x0a,
	0xdb, 0x6c, 0x59, 0x04, 0xf4, 0xe0, 0xb8, 0x5a, 0x9e, 0x42, 0x78, 0x20, 0x85, 0x1d, 0x57, 0x2d,
	0x99, 0x5b, 0x2e, 0x99, 0xeb, 0x97, 0xbc, 0x71, 0x0d, 0xb7, 0x2a, 0x91, 0xb2, 0x19, 0x01, 0x84,
	0x34, 0x2d, 0x5b, 0x5b, 0xd2, 0x01, 0x55, 0xad, 0xab, 0x01, 0x8b, 0xc4, 0x61, 0x35, 0xed, 0x73,
	0x68, 0xad, 0x09, 0x8b, 0xd9, 0x6e, 0x80, 0xb6, 0x14, 0xee, 0xfe, 0xc4, 0x2b, 0xc2, 0x66, 0xa2,
	0x3c, 0xae, 0xe1, 0xa3, 0x92, 0x2a, 0xb5, 0x17, 0x26, 0x18, 0xf7, 0x34, 0x5a, 0xf5, 0x2e, 0xc1,
	0x2a, 0x49, 0x62, 0x19, 0xc3, 0x80, 0x53, 0x9e, 0xad, 0xd4, 0xb2, 0x6b, 0xb8, 0x3a, 0xa3, 0x67,
	0x60, 0x87, 0x2c, 0x5a, 0xab, 0x62, 0x5d, 0x16, 0x77, 0xc0, 0xc2, 0x94, 0x97, 0x1c, 0xfd, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xd0, 0xbd, 0x7c, 0x0a, 0x78, 0x04, 0x00, 0x00,
}
