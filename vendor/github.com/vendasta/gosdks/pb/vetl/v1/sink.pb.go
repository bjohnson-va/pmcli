// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vetl/v1/sink.proto

package vetl_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Describes the destination for a transform's output
type DataSink struct {
	// The Sink contains all the metadata necessary for vETL to write data to a particular destination
	//
	// Types that are valid to be assigned to Sink:
	//	*DataSink_Vstore
	//	*DataSink_Tesseract
	Sink isDataSink_Sink `protobuf_oneof:"sink"`
}

func (m *DataSink) Reset()                    { *m = DataSink{} }
func (m *DataSink) String() string            { return proto.CompactTextString(m) }
func (*DataSink) ProtoMessage()               {}
func (*DataSink) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type isDataSink_Sink interface {
	isDataSink_Sink()
}

type DataSink_Vstore struct {
	Vstore *VStoreSink `protobuf:"bytes,1,opt,name=vstore,oneof"`
}
type DataSink_Tesseract struct {
	Tesseract *TesseractSink `protobuf:"bytes,2,opt,name=tesseract,oneof"`
}

func (*DataSink_Vstore) isDataSink_Sink()    {}
func (*DataSink_Tesseract) isDataSink_Sink() {}

func (m *DataSink) GetSink() isDataSink_Sink {
	if m != nil {
		return m.Sink
	}
	return nil
}

func (m *DataSink) GetVstore() *VStoreSink {
	if x, ok := m.GetSink().(*DataSink_Vstore); ok {
		return x.Vstore
	}
	return nil
}

func (m *DataSink) GetTesseract() *TesseractSink {
	if x, ok := m.GetSink().(*DataSink_Tesseract); ok {
		return x.Tesseract
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataSink) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataSink_OneofMarshaler, _DataSink_OneofUnmarshaler, _DataSink_OneofSizer, []interface{}{
		(*DataSink_Vstore)(nil),
		(*DataSink_Tesseract)(nil),
	}
}

func _DataSink_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataSink)
	// sink
	switch x := m.Sink.(type) {
	case *DataSink_Vstore:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vstore); err != nil {
			return err
		}
	case *DataSink_Tesseract:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tesseract); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataSink.Sink has unexpected type %T", x)
	}
	return nil
}

func _DataSink_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataSink)
	switch tag {
	case 1: // sink.vstore
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VStoreSink)
		err := b.DecodeMessage(msg)
		m.Sink = &DataSink_Vstore{msg}
		return true, err
	case 2: // sink.tesseract
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TesseractSink)
		err := b.DecodeMessage(msg)
		m.Sink = &DataSink_Tesseract{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataSink_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataSink)
	// sink
	switch x := m.Sink.(type) {
	case *DataSink_Vstore:
		s := proto.Size(x.Vstore)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataSink_Tesseract:
		s := proto.Size(x.Tesseract)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TesseractSink contains the necessary information for vETL to be able to write data to a particular Tesseract table
type TesseractSink struct {
	Namespace  string   `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Kind       string   `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	PrimaryKey []string `protobuf:"bytes,3,rep,name=primary_key,json=primaryKey" json:"primary_key,omitempty"`
	// Sets how the concurrency control for this table is managed
	//
	// Types that are valid to be assigned to ConcurrencyControl:
	//	*TesseractSink_VersionConcurrencyControl_
	//	*TesseractSink_LastModifiedConcurrencyControl_
	ConcurrencyControl isTesseractSink_ConcurrencyControl `protobuf_oneof:"concurrency_control"`
}

func (m *TesseractSink) Reset()                    { *m = TesseractSink{} }
func (m *TesseractSink) String() string            { return proto.CompactTextString(m) }
func (*TesseractSink) ProtoMessage()               {}
func (*TesseractSink) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type isTesseractSink_ConcurrencyControl interface {
	isTesseractSink_ConcurrencyControl()
}

type TesseractSink_VersionConcurrencyControl_ struct {
	VersionConcurrencyControl *TesseractSink_VersionConcurrencyControl `protobuf:"bytes,10,opt,name=version_concurrency_control,json=versionConcurrencyControl,oneof"`
}
type TesseractSink_LastModifiedConcurrencyControl_ struct {
	LastModifiedConcurrencyControl *TesseractSink_LastModifiedConcurrencyControl `protobuf:"bytes,11,opt,name=last_modified_concurrency_control,json=lastModifiedConcurrencyControl,oneof"`
}

func (*TesseractSink_VersionConcurrencyControl_) isTesseractSink_ConcurrencyControl()      {}
func (*TesseractSink_LastModifiedConcurrencyControl_) isTesseractSink_ConcurrencyControl() {}

func (m *TesseractSink) GetConcurrencyControl() isTesseractSink_ConcurrencyControl {
	if m != nil {
		return m.ConcurrencyControl
	}
	return nil
}

func (m *TesseractSink) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *TesseractSink) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *TesseractSink) GetPrimaryKey() []string {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *TesseractSink) GetVersionConcurrencyControl() *TesseractSink_VersionConcurrencyControl {
	if x, ok := m.GetConcurrencyControl().(*TesseractSink_VersionConcurrencyControl_); ok {
		return x.VersionConcurrencyControl
	}
	return nil
}

func (m *TesseractSink) GetLastModifiedConcurrencyControl() *TesseractSink_LastModifiedConcurrencyControl {
	if x, ok := m.GetConcurrencyControl().(*TesseractSink_LastModifiedConcurrencyControl_); ok {
		return x.LastModifiedConcurrencyControl
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TesseractSink) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TesseractSink_OneofMarshaler, _TesseractSink_OneofUnmarshaler, _TesseractSink_OneofSizer, []interface{}{
		(*TesseractSink_VersionConcurrencyControl_)(nil),
		(*TesseractSink_LastModifiedConcurrencyControl_)(nil),
	}
}

func _TesseractSink_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TesseractSink)
	// concurrency_control
	switch x := m.ConcurrencyControl.(type) {
	case *TesseractSink_VersionConcurrencyControl_:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VersionConcurrencyControl); err != nil {
			return err
		}
	case *TesseractSink_LastModifiedConcurrencyControl_:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LastModifiedConcurrencyControl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TesseractSink.ConcurrencyControl has unexpected type %T", x)
	}
	return nil
}

func _TesseractSink_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TesseractSink)
	switch tag {
	case 10: // concurrency_control.version_concurrency_control
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TesseractSink_VersionConcurrencyControl)
		err := b.DecodeMessage(msg)
		m.ConcurrencyControl = &TesseractSink_VersionConcurrencyControl_{msg}
		return true, err
	case 11: // concurrency_control.last_modified_concurrency_control
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TesseractSink_LastModifiedConcurrencyControl)
		err := b.DecodeMessage(msg)
		m.ConcurrencyControl = &TesseractSink_LastModifiedConcurrencyControl_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TesseractSink_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TesseractSink)
	// concurrency_control
	switch x := m.ConcurrencyControl.(type) {
	case *TesseractSink_VersionConcurrencyControl_:
		s := proto.Size(x.VersionConcurrencyControl)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TesseractSink_LastModifiedConcurrencyControl_:
		s := proto.Size(x.LastModifiedConcurrencyControl)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Provides concurrency control through a monotonically increasing version number
type TesseractSink_VersionConcurrencyControl struct {
	VersionField string `protobuf:"bytes,1,opt,name=version_field,json=versionField" json:"version_field,omitempty"`
}

func (m *TesseractSink_VersionConcurrencyControl) Reset() {
	*m = TesseractSink_VersionConcurrencyControl{}
}
func (m *TesseractSink_VersionConcurrencyControl) String() string { return proto.CompactTextString(m) }
func (*TesseractSink_VersionConcurrencyControl) ProtoMessage()    {}
func (*TesseractSink_VersionConcurrencyControl) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1, 0}
}

func (m *TesseractSink_VersionConcurrencyControl) GetVersionField() string {
	if m != nil {
		return m.VersionField
	}
	return ""
}

// Provides concurrency control through a timestamp based approach
type TesseractSink_LastModifiedConcurrencyControl struct {
	LastModifiedField string `protobuf:"bytes,1,opt,name=last_modified_field,json=lastModifiedField" json:"last_modified_field,omitempty"`
}

func (m *TesseractSink_LastModifiedConcurrencyControl) Reset() {
	*m = TesseractSink_LastModifiedConcurrencyControl{}
}
func (m *TesseractSink_LastModifiedConcurrencyControl) String() string {
	return proto.CompactTextString(m)
}
func (*TesseractSink_LastModifiedConcurrencyControl) ProtoMessage() {}
func (*TesseractSink_LastModifiedConcurrencyControl) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1, 1}
}

func (m *TesseractSink_LastModifiedConcurrencyControl) GetLastModifiedField() string {
	if m != nil {
		return m.LastModifiedField
	}
	return ""
}

// VStoreSink contains the necessary information for vETL to be able to write data to a particular VStore table
type VStoreSink struct {
	Namespace        string                       `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Kind             string                       `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	PrimaryKey       []string                     `protobuf:"bytes,3,rep,name=primary_key,json=primaryKey" json:"primary_key,omitempty"`
	SecondaryIndexes []*VStoreSink_SecondaryIndex `protobuf:"bytes,4,rep,name=secondary_indexes,json=secondaryIndexes" json:"secondary_indexes,omitempty"`
}

func (m *VStoreSink) Reset()                    { *m = VStoreSink{} }
func (m *VStoreSink) String() string            { return proto.CompactTextString(m) }
func (*VStoreSink) ProtoMessage()               {}
func (*VStoreSink) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *VStoreSink) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *VStoreSink) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *VStoreSink) GetPrimaryKey() []string {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *VStoreSink) GetSecondaryIndexes() []*VStoreSink_SecondaryIndex {
	if m != nil {
		return m.SecondaryIndexes
	}
	return nil
}

type VStoreSink_SecondaryIndex struct {
	// Name of the secondary index, this name must be unique from other secondary indexes
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Index configuration and denotes the type of the secondary index as well.
	//
	// Types that are valid to be assigned to Index:
	//	*VStoreSink_SecondaryIndex_CloudSqlConfig
	Index isVStoreSink_SecondaryIndex_Index `protobuf_oneof:"index"`
}

func (m *VStoreSink_SecondaryIndex) Reset()                    { *m = VStoreSink_SecondaryIndex{} }
func (m *VStoreSink_SecondaryIndex) String() string            { return proto.CompactTextString(m) }
func (*VStoreSink_SecondaryIndex) ProtoMessage()               {}
func (*VStoreSink_SecondaryIndex) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 0} }

type isVStoreSink_SecondaryIndex_Index interface {
	isVStoreSink_SecondaryIndex_Index()
}

type VStoreSink_SecondaryIndex_CloudSqlConfig struct {
	CloudSqlConfig *VStoreSink_SecondaryIndex_CloudSQLConfig `protobuf:"bytes,2,opt,name=cloud_sql_config,json=cloudSqlConfig,oneof"`
}

func (*VStoreSink_SecondaryIndex_CloudSqlConfig) isVStoreSink_SecondaryIndex_Index() {}

func (m *VStoreSink_SecondaryIndex) GetIndex() isVStoreSink_SecondaryIndex_Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *VStoreSink_SecondaryIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VStoreSink_SecondaryIndex) GetCloudSqlConfig() *VStoreSink_SecondaryIndex_CloudSQLConfig {
	if x, ok := m.GetIndex().(*VStoreSink_SecondaryIndex_CloudSqlConfig); ok {
		return x.CloudSqlConfig
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VStoreSink_SecondaryIndex) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VStoreSink_SecondaryIndex_OneofMarshaler, _VStoreSink_SecondaryIndex_OneofUnmarshaler, _VStoreSink_SecondaryIndex_OneofSizer, []interface{}{
		(*VStoreSink_SecondaryIndex_CloudSqlConfig)(nil),
	}
}

func _VStoreSink_SecondaryIndex_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VStoreSink_SecondaryIndex)
	// index
	switch x := m.Index.(type) {
	case *VStoreSink_SecondaryIndex_CloudSqlConfig:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloudSqlConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VStoreSink_SecondaryIndex.Index has unexpected type %T", x)
	}
	return nil
}

func _VStoreSink_SecondaryIndex_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VStoreSink_SecondaryIndex)
	switch tag {
	case 2: // index.cloud_sql_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VStoreSink_SecondaryIndex_CloudSQLConfig)
		err := b.DecodeMessage(msg)
		m.Index = &VStoreSink_SecondaryIndex_CloudSqlConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VStoreSink_SecondaryIndex_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VStoreSink_SecondaryIndex)
	// index
	switch x := m.Index.(type) {
	case *VStoreSink_SecondaryIndex_CloudSqlConfig:
		s := proto.Size(x.CloudSqlConfig)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VStoreSink_SecondaryIndex_CloudSQLConfig struct {
	IndexName                  string `protobuf:"bytes,1,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
	InstanceIp                 string `protobuf:"bytes,2,opt,name=instance_ip,json=instanceIp" json:"instance_ip,omitempty"`
	UserName                   string `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password                   string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	ClientKey                  []byte `protobuf:"bytes,5,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ClientCert                 []byte `protobuf:"bytes,6,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	ServerCertificateAuthority []byte `protobuf:"bytes,7,opt,name=server_certificate_authority,json=serverCertificateAuthority,proto3" json:"server_certificate_authority,omitempty"`
	ProjectId                  string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	InstanceName               string `protobuf:"bytes,9,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) Reset() {
	*m = VStoreSink_SecondaryIndex_CloudSQLConfig{}
}
func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) String() string { return proto.CompactTextString(m) }
func (*VStoreSink_SecondaryIndex_CloudSQLConfig) ProtoMessage()    {}
func (*VStoreSink_SecondaryIndex_CloudSQLConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{2, 0, 0}
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetInstanceIp() string {
	if m != nil {
		return m.InstanceIp
	}
	return ""
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetClientKey() []byte {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetClientCert() []byte {
	if m != nil {
		return m.ClientCert
	}
	return nil
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetServerCertificateAuthority() []byte {
	if m != nil {
		return m.ServerCertificateAuthority
	}
	return nil
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *VStoreSink_SecondaryIndex_CloudSQLConfig) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func init() {
	proto.RegisterType((*DataSink)(nil), "vetl.v1.DataSink")
	proto.RegisterType((*TesseractSink)(nil), "vetl.v1.TesseractSink")
	proto.RegisterType((*TesseractSink_VersionConcurrencyControl)(nil), "vetl.v1.TesseractSink.VersionConcurrencyControl")
	proto.RegisterType((*TesseractSink_LastModifiedConcurrencyControl)(nil), "vetl.v1.TesseractSink.LastModifiedConcurrencyControl")
	proto.RegisterType((*VStoreSink)(nil), "vetl.v1.VStoreSink")
	proto.RegisterType((*VStoreSink_SecondaryIndex)(nil), "vetl.v1.VStoreSink.SecondaryIndex")
	proto.RegisterType((*VStoreSink_SecondaryIndex_CloudSQLConfig)(nil), "vetl.v1.VStoreSink.SecondaryIndex.CloudSQLConfig")
}

func init() { proto.RegisterFile("vetl/v1/sink.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0x4f, 0x53, 0x13, 0x4f,
	0x10, 0x25, 0x24, 0x84, 0x6c, 0x07, 0x28, 0x18, 0xea, 0xf7, 0xab, 0x25, 0x20, 0xc4, 0x78, 0xc9,
	0xc5, 0x45, 0xb0, 0xf4, 0x8c, 0xc4, 0xb2, 0xa0, 0xc4, 0x7f, 0x1b, 0x8b, 0x9b, 0xb5, 0xb5, 0xce,
	0x76, 0x74, 0xcc, 0x32, 0xb3, 0xcc, 0x4c, 0x56, 0xf7, 0xea, 0xc1, 0xbb, 0x9f, 0xcc, 0x6f, 0xe0,
	0x67, 0xb1, 0x66, 0x76, 0x96, 0x90, 0xaa, 0x04, 0x4f, 0xde, 0x66, 0x5f, 0xbf, 0x37, 0xfd, 0x5e,
	0x4f, 0x27, 0x40, 0x72, 0xd4, 0xe9, 0x61, 0x7e, 0x74, 0xa8, 0x18, 0x1f, 0x07, 0x99, 0x14, 0x5a,
	0x90, 0x55, 0x83, 0x05, 0xf9, 0x51, 0xaf, 0x80, 0xd6, 0xf3, 0x58, 0xc7, 0x43, 0xc6, 0xc7, 0xe4,
	0x21, 0x34, 0x73, 0xa5, 0x85, 0x44, 0xbf, 0xd6, 0xad, 0xf5, 0xdb, 0xc7, 0xdb, 0x81, 0x63, 0x05,
	0x97, 0x43, 0x03, 0x1b, 0xd2, 0xd9, 0x52, 0xe8, 0x48, 0xe4, 0x29, 0x78, 0x1a, 0x95, 0x42, 0x19,
	0x53, 0xed, 0x2f, 0x5b, 0xc5, 0xff, 0x37, 0x8a, 0xf7, 0x55, 0xc5, 0x89, 0xa6, 0xd4, 0xd3, 0x26,
	0x34, 0x8c, 0x93, 0xde, 0x8f, 0x06, 0xac, 0xcf, 0xd0, 0xc8, 0x1e, 0x78, 0x3c, 0xbe, 0x42, 0x95,
	0xc5, 0xb4, 0xf4, 0xe0, 0x85, 0x53, 0x80, 0x10, 0x68, 0x8c, 0x19, 0x4f, 0x6c, 0x2b, 0x2f, 0xb4,
	0x67, 0x72, 0x00, 0xed, 0x4c, 0xb2, 0xab, 0x58, 0x16, 0xd1, 0x18, 0x0b, 0xbf, 0xde, 0xad, 0xf7,
	0xbd, 0x10, 0x1c, 0xf4, 0x12, 0x0b, 0x22, 0x61, 0x37, 0x47, 0xa9, 0x98, 0xe0, 0x11, 0x15, 0x9c,
	0x4e, 0xa4, 0x44, 0x4e, 0x0b, 0x73, 0xd6, 0x52, 0xa4, 0x3e, 0x58, 0xdb, 0x8f, 0xe6, 0xdb, 0x0e,
	0x2e, 0x4b, 0xe5, 0x60, 0x2a, 0x1c, 0x94, 0xba, 0xb3, 0xa5, 0x70, 0x27, 0x5f, 0x54, 0x24, 0xdf,
	0x6b, 0x70, 0x3f, 0x8d, 0x95, 0x8e, 0xae, 0x44, 0xc2, 0x46, 0x0c, 0x93, 0xb9, 0xad, 0xdb, 0xb6,
	0xf5, 0x93, 0x05, 0xad, 0x2f, 0x62, 0xa5, 0x5f, 0x39, 0xf9, 0xdc, 0xfe, 0xfb, 0xe9, 0x9d, 0x8c,
	0xce, 0x09, 0xec, 0x2c, 0xb4, 0x4f, 0x1e, 0xc0, 0x7a, 0x35, 0x95, 0x11, 0xc3, 0x34, 0x71, 0xc3,
	0x5e, 0x73, 0xe0, 0x0b, 0x83, 0x75, 0xde, 0xc2, 0xfe, 0xdd, 0x2e, 0x48, 0x00, 0xdb, 0xb3, 0x39,
	0x6f, 0x5f, 0xb6, 0x75, 0xdb, 0xa0, 0xbd, 0xf1, 0xf4, 0x3f, 0xd8, 0x9e, 0x33, 0x89, 0xde, 0xcf,
	0x15, 0x80, 0xe9, 0x86, 0xfd, 0x8b, 0x2d, 0x78, 0x03, 0x5b, 0x0a, 0xa9, 0xe0, 0x89, 0xa1, 0x30,
	0x9e, 0xe0, 0x37, 0x54, 0x7e, 0xa3, 0x5b, 0xef, 0xb7, 0x8f, 0x7b, 0x73, 0x96, 0x3c, 0x18, 0x56,
	0xe4, 0x73, 0xc3, 0x0d, 0x37, 0xd5, 0xcc, 0x37, 0xaa, 0xce, 0xef, 0x3a, 0x6c, 0xcc, 0x92, 0x8c,
	0x31, 0xe3, 0xd2, 0x39, 0xb6, 0x67, 0xf2, 0x01, 0x36, 0x69, 0x2a, 0x26, 0x49, 0xa4, 0xae, 0x53,
	0x13, 0x77, 0xc4, 0x3e, 0xb9, 0x5f, 0xca, 0xd1, 0xdf, 0xdb, 0x06, 0x03, 0x23, 0x1d, 0xbe, 0xbb,
	0x18, 0x58, 0xe1, 0xd9, 0x52, 0xb8, 0x61, 0x2f, 0x1b, 0x5e, 0xa7, 0x25, 0xd2, 0xf9, 0xb5, 0x0c,
	0x1b, 0xb3, 0x24, 0x72, 0x0f, 0xc0, 0xe6, 0x8b, 0x6e, 0x79, 0xf1, 0x2c, 0xf2, 0xda, 0x18, 0x3a,
	0x80, 0x36, 0xe3, 0x4a, 0xc7, 0x9c, 0x62, 0xc4, 0x32, 0x37, 0x44, 0xa8, 0xa0, 0xf3, 0x8c, 0xec,
	0x82, 0x37, 0x51, 0x28, 0x4b, 0x79, 0xdd, 0x96, 0x5b, 0x06, 0xb0, 0xea, 0x0e, 0xb4, 0xb2, 0x58,
	0xa9, 0xaf, 0x42, 0x26, 0x7e, 0xa3, 0xac, 0x55, 0xdf, 0xa6, 0x31, 0x4d, 0x19, 0x72, 0x6d, 0x9f,
	0x60, 0xa5, 0x5b, 0xeb, 0xaf, 0x85, 0x5e, 0x89, 0x98, 0x17, 0x38, 0x80, 0xb6, 0x2b, 0x53, 0x94,
	0xda, 0x6f, 0xda, 0xba, 0x53, 0x0c, 0x50, 0x6a, 0x72, 0x02, 0x7b, 0x0a, 0x65, 0x8e, 0xd2, 0x12,
	0xd8, 0x88, 0xd1, 0x58, 0x63, 0x14, 0x4f, 0xf4, 0x67, 0x21, 0x99, 0x2e, 0xfc, 0x55, 0xab, 0xe8,
	0x94, 0x9c, 0xc1, 0x94, 0xf2, 0xac, 0x62, 0x18, 0x07, 0x99, 0x14, 0x5f, 0x90, 0xea, 0x88, 0x25,
	0x7e, 0xab, 0x8c, 0xee, 0x90, 0xf3, 0xc4, 0xec, 0xfc, 0x4d, 0x74, 0x9b, 0xce, 0x2b, 0x77, 0xbe,
	0x02, 0x4d, 0xc2, 0xd3, 0x55, 0x58, 0xb1, 0xc3, 0xfa, 0xd8, 0xb4, 0xff, 0x93, 0x8f, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xd5, 0x1b, 0x43, 0xb6, 0x3d, 0x05, 0x00, 0x00,
}
