// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package business_v1 is a generated protocol buffer package.

It is generated from these files:
	api.proto
	field_mask.proto

It has these top-level messages:
	Geo
	Product
	ExternalIdentifiers
	SocialURLs
	HoursOfOperation
	HealthCareProfessionalInformation
	CustomField
	RichData
	BasicData
	Administration
	Business
	ProjectionFilter
	UpdateOperation
	CreateRequest
	CreateResponse
	GetMultiRequest
	GetMultiResponse
	UpdateRequest
	FieldMask
*/
package business_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HoursOfOperation_DayOfWeek int32

const (
	HoursOfOperation_MONDAY          HoursOfOperation_DayOfWeek = 0
	HoursOfOperation_TUESDAY         HoursOfOperation_DayOfWeek = 1
	HoursOfOperation_WEDNESDAY       HoursOfOperation_DayOfWeek = 2
	HoursOfOperation_THURSDAY        HoursOfOperation_DayOfWeek = 3
	HoursOfOperation_FRIDAY          HoursOfOperation_DayOfWeek = 4
	HoursOfOperation_SATURDAY        HoursOfOperation_DayOfWeek = 5
	HoursOfOperation_SUNDAY          HoursOfOperation_DayOfWeek = 6
	HoursOfOperation_PUBLIC_HOLIDAYS HoursOfOperation_DayOfWeek = 7
)

var HoursOfOperation_DayOfWeek_name = map[int32]string{
	0: "MONDAY",
	1: "TUESDAY",
	2: "WEDNESDAY",
	3: "THURSDAY",
	4: "FRIDAY",
	5: "SATURDAY",
	6: "SUNDAY",
	7: "PUBLIC_HOLIDAYS",
}
var HoursOfOperation_DayOfWeek_value = map[string]int32{
	"MONDAY":          0,
	"TUESDAY":         1,
	"WEDNESDAY":       2,
	"THURSDAY":        3,
	"FRIDAY":          4,
	"SATURDAY":        5,
	"SUNDAY":          6,
	"PUBLIC_HOLIDAYS": 7,
}

func (x HoursOfOperation_DayOfWeek) String() string {
	return proto.EnumName(HoursOfOperation_DayOfWeek_name, int32(x))
}
func (HoursOfOperation_DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

type HealthCareProfessionalInformation_Gender int32

const (
	HealthCareProfessionalInformation_NotSpecified HealthCareProfessionalInformation_Gender = 0
	HealthCareProfessionalInformation_Female       HealthCareProfessionalInformation_Gender = 1
	HealthCareProfessionalInformation_Male         HealthCareProfessionalInformation_Gender = 2
	HealthCareProfessionalInformation_Other        HealthCareProfessionalInformation_Gender = 3
)

var HealthCareProfessionalInformation_Gender_name = map[int32]string{
	0: "NotSpecified",
	1: "Female",
	2: "Male",
	3: "Other",
}
var HealthCareProfessionalInformation_Gender_value = map[string]int32{
	"NotSpecified": 0,
	"Female":       1,
	"Male":         2,
	"Other":        3,
}

func (x HealthCareProfessionalInformation_Gender) String() string {
	return proto.EnumName(HealthCareProfessionalInformation_Gender_name, int32(x))
}
func (HealthCareProfessionalInformation_Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type RichData_PaymentMethods int32

const (
	RichData_AMERICAN_EXPRESS RichData_PaymentMethods = 0
	RichData_ANDROID_PAY      RichData_PaymentMethods = 1
	RichData_APPLE_PAY        RichData_PaymentMethods = 2
	RichData_CASH             RichData_PaymentMethods = 3
	RichData_CHECK            RichData_PaymentMethods = 4
	RichData_DEBIT            RichData_PaymentMethods = 5
	RichData_DINERS_CLUB      RichData_PaymentMethods = 6
	RichData_DISCOVER         RichData_PaymentMethods = 7
	RichData_MASTERCARD       RichData_PaymentMethods = 8
	RichData_PAYPAL           RichData_PaymentMethods = 9
	RichData_SAMSUNG_PAY      RichData_PaymentMethods = 10
	RichData_STORE_CARD       RichData_PaymentMethods = 11
	RichData_TRAVELERS_CHECK  RichData_PaymentMethods = 12
	RichData_VISA             RichData_PaymentMethods = 13
)

var RichData_PaymentMethods_name = map[int32]string{
	0:  "AMERICAN_EXPRESS",
	1:  "ANDROID_PAY",
	2:  "APPLE_PAY",
	3:  "CASH",
	4:  "CHECK",
	5:  "DEBIT",
	6:  "DINERS_CLUB",
	7:  "DISCOVER",
	8:  "MASTERCARD",
	9:  "PAYPAL",
	10: "SAMSUNG_PAY",
	11: "STORE_CARD",
	12: "TRAVELERS_CHECK",
	13: "VISA",
}
var RichData_PaymentMethods_value = map[string]int32{
	"AMERICAN_EXPRESS": 0,
	"ANDROID_PAY":      1,
	"APPLE_PAY":        2,
	"CASH":             3,
	"CHECK":            4,
	"DEBIT":            5,
	"DINERS_CLUB":      6,
	"DISCOVER":         7,
	"MASTERCARD":       8,
	"PAYPAL":           9,
	"SAMSUNG_PAY":      10,
	"STORE_CARD":       11,
	"TRAVELERS_CHECK":  12,
	"VISA":             13,
}

func (x RichData_PaymentMethods) String() string {
	return proto.EnumName(RichData_PaymentMethods_name, int32(x))
}
func (RichData_PaymentMethods) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

// Geo stores a geographic point for marking locations
type Geo struct {
	// The latitude of the point is the north/south angle the point makes with
	// the equator it ranges from -90° at the south pole, through 0° at the
	// equator, and to +90° at the north pole
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// The longitude of the point is the west/east angle the point makes with
	// the Prime Meridian (The Royal Observatory in Greenwich, England) it
	// ranges from -180°, though 0° at the Royal Observatory, and to +180°.
	// Note that there is a discontinuity at ±180° as they describe the same
	// angle.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Geo) Reset()                    { *m = Geo{} }
func (m *Geo) String() string            { return proto.CompactTextString(m) }
func (*Geo) ProtoMessage()               {}
func (*Geo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Geo) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Geo) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

// A representation of a single product on a business
type Product struct {
	// Whether the product is a trial account or not
	IsTrial bool `protobuf:"varint,1,opt,name=is_trial,json=isTrial" json:"is_trial,omitempty"`
	// Tags on the product
	Tags []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	// The marketplace app id or the legacy product id of the product
	MarketplaceAppId string `protobuf:"bytes,3,opt,name=marketplace_app_id,json=marketplaceAppId" json:"marketplace_app_id,omitempty"`
	// The product-specific Account ID
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// The date on which the product expires
	Expiry *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Product) GetIsTrial() bool {
	if m != nil {
		return m.IsTrial
	}
	return false
}

func (m *Product) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Product) GetMarketplaceAppId() string {
	if m != nil {
		return m.MarketplaceAppId
	}
	return ""
}

func (m *Product) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Product) GetExpiry() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

// A set of identifiers associated with a business.  Note that they are
// optional, so Market ID and Partner ID are not included in this structure
type ExternalIdentifiers struct {
	// An indicator of where this account was created.  SDK clients may choose
	// to override this value
	Origin string `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	// Reserved for external customer use.  Allows SDK clients to assign an id
	// to a business that is meaningful in their external system.
	CustomerIdentifier string `protobuf:"bytes,2,opt,name=customer_identifier,json=customerIdentifier" json:"customer_identifier,omitempty"`
	// Tags are used for grouping businesses and list construction.  There is a
	// limit of 16 tags per business. Note that tags are not used to indicate
	// list membership.
	Tags []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	// The ids of the lists that this business is a part of.
	ActionLists []string `protobuf:"bytes,4,rep,name=action_lists,json=actionLists" json:"action_lists,omitempty"`
	// The service category of the business.  This is important for listing
	// services and helping to refine what rich data is relevant to a particular
	// business.  Up to 3 categories can be assigned from the taxonomy.
	TaxonomyIds []string `protobuf:"bytes,5,rep,name=taxonomy_ids,json=taxonomyIds" json:"taxonomy_ids,omitempty"`
	// The ID of the salesperson associated with this business.
	SalesPersonId string `protobuf:"bytes,6,opt,name=sales_person_id,json=salesPersonId" json:"sales_person_id,omitempty"`
}

func (m *ExternalIdentifiers) Reset()                    { *m = ExternalIdentifiers{} }
func (m *ExternalIdentifiers) String() string            { return proto.CompactTextString(m) }
func (*ExternalIdentifiers) ProtoMessage()               {}
func (*ExternalIdentifiers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExternalIdentifiers) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *ExternalIdentifiers) GetCustomerIdentifier() string {
	if m != nil {
		return m.CustomerIdentifier
	}
	return ""
}

func (m *ExternalIdentifiers) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ExternalIdentifiers) GetActionLists() []string {
	if m != nil {
		return m.ActionLists
	}
	return nil
}

func (m *ExternalIdentifiers) GetTaxonomyIds() []string {
	if m != nil {
		return m.TaxonomyIds
	}
	return nil
}

func (m *ExternalIdentifiers) GetSalesPersonId() string {
	if m != nil {
		return m.SalesPersonId
	}
	return ""
}

// A set of Social Media URLs associated with the business.  These should be the
// publically accessible URLs.
type SocialURLs struct {
	// The business's Google+ Page.  Should not be a Google+ User profile.
	GoogleplusUrl string `protobuf:"bytes,1,opt,name=googleplus_url,json=googleplusUrl" json:"googleplus_url,omitempty"`
	// The business's LinkedIn Company Page.  Should not be a LinkedIn personal
	// profile
	LinkedinUrl string `protobuf:"bytes,2,opt,name=linkedin_url,json=linkedinUrl" json:"linkedin_url,omitempty"`
	// The business's FourSquare Location Page.
	FoursquareUrl string `protobuf:"bytes,3,opt,name=foursquare_url,json=foursquareUrl" json:"foursquare_url,omitempty"`
	// The business's Twitter Page.  Twitter does not differentiate between
	// users and businesses.
	TwitterUrl string `protobuf:"bytes,4,opt,name=twitter_url,json=twitterUrl" json:"twitter_url,omitempty"`
	// The business's Facebook Page.  The page should be public, and should
	// not be a facebook user.
	FacebookUrl string `protobuf:"bytes,5,opt,name=facebook_url,json=facebookUrl" json:"facebook_url,omitempty"`
	// A RSS feed URL for content produced by the business.  Usually a blog
	// or podcast feed.
	RssUrl string `protobuf:"bytes,6,opt,name=rss_url,json=rssUrl" json:"rss_url,omitempty"`
	// The URL for the business's youtube channel.
	YoutubeUrl string `protobuf:"bytes,7,opt,name=youtube_url,json=youtubeUrl" json:"youtube_url,omitempty"`
	// The URL for the business's instagram account.  Instagram does not
	// differentiate between users and businesses.
	InstagramUrl string `protobuf:"bytes,8,opt,name=instagram_url,json=instagramUrl" json:"instagram_url,omitempty"`
	// The URL for the business's Pinterest account.
	PinterestUrl string `protobuf:"bytes,9,opt,name=pinterest_url,json=pinterestUrl" json:"pinterest_url,omitempty"`
}

func (m *SocialURLs) Reset()                    { *m = SocialURLs{} }
func (m *SocialURLs) String() string            { return proto.CompactTextString(m) }
func (*SocialURLs) ProtoMessage()               {}
func (*SocialURLs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SocialURLs) GetGoogleplusUrl() string {
	if m != nil {
		return m.GoogleplusUrl
	}
	return ""
}

func (m *SocialURLs) GetLinkedinUrl() string {
	if m != nil {
		return m.LinkedinUrl
	}
	return ""
}

func (m *SocialURLs) GetFoursquareUrl() string {
	if m != nil {
		return m.FoursquareUrl
	}
	return ""
}

func (m *SocialURLs) GetTwitterUrl() string {
	if m != nil {
		return m.TwitterUrl
	}
	return ""
}

func (m *SocialURLs) GetFacebookUrl() string {
	if m != nil {
		return m.FacebookUrl
	}
	return ""
}

func (m *SocialURLs) GetRssUrl() string {
	if m != nil {
		return m.RssUrl
	}
	return ""
}

func (m *SocialURLs) GetYoutubeUrl() string {
	if m != nil {
		return m.YoutubeUrl
	}
	return ""
}

func (m *SocialURLs) GetInstagramUrl() string {
	if m != nil {
		return m.InstagramUrl
	}
	return ""
}

func (m *SocialURLs) GetPinterestUrl() string {
	if m != nil {
		return m.PinterestUrl
	}
	return ""
}

// Stores information about the hours that a business is open in the form of
// a list of time-spans describing the business's hours.
type HoursOfOperation struct {
	// The list of time spans that describe the business's hours
	HoursOfOperation []*HoursOfOperation_Span `protobuf:"bytes,1,rep,name=hours_of_operation,json=hoursOfOperation" json:"hours_of_operation,omitempty"`
}

func (m *HoursOfOperation) Reset()                    { *m = HoursOfOperation{} }
func (m *HoursOfOperation) String() string            { return proto.CompactTextString(m) }
func (*HoursOfOperation) ProtoMessage()               {}
func (*HoursOfOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HoursOfOperation) GetHoursOfOperation() []*HoursOfOperation_Span {
	if m != nil {
		return m.HoursOfOperation
	}
	return nil
}

// Stores information about a particular timespan that the business
// is open
type HoursOfOperation_Span struct {
	// The days of the week (a list of days as text) this span applies to
	DayOfWeek []HoursOfOperation_DayOfWeek `protobuf:"varint,1,rep,packed,name=day_of_week,json=dayOfWeek,enum=business.v1.HoursOfOperation_DayOfWeek" json:"day_of_week,omitempty"`
	// A description of when the business opens in military time:
	// "16:40" is 4:30 PM?
	Opens string `protobuf:"bytes,2,opt,name=opens" json:"opens,omitempty"`
	// A descriptoin of when the business closes in military time:
	// "13:00" is 1:00 PM?
	Closes string `protobuf:"bytes,3,opt,name=closes" json:"closes,omitempty"`
	// A description accompanying the span.  Use this field for
	// describing holiday hours?
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *HoursOfOperation_Span) Reset()                    { *m = HoursOfOperation_Span{} }
func (m *HoursOfOperation_Span) String() string            { return proto.CompactTextString(m) }
func (*HoursOfOperation_Span) ProtoMessage()               {}
func (*HoursOfOperation_Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *HoursOfOperation_Span) GetDayOfWeek() []HoursOfOperation_DayOfWeek {
	if m != nil {
		return m.DayOfWeek
	}
	return nil
}

func (m *HoursOfOperation_Span) GetOpens() string {
	if m != nil {
		return m.Opens
	}
	return ""
}

func (m *HoursOfOperation_Span) GetCloses() string {
	if m != nil {
		return m.Closes
	}
	return ""
}

func (m *HoursOfOperation_Span) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Stores data specific to a business in the "Medical" Taxonomy
type HealthCareProfessionalInformation struct {
	// The birth date of the practitioner. Some patients have an age
	// preference when selecting a practitioner
	DateOfBirth *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=date_of_birth,json=dateOfBirth" json:"date_of_birth,omitempty"`
	// Direct contact email for the practitioner
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// A list of free-form locations where the practitioner performed their
	// fellowships if applicable
	Fellowship []string `protobuf:"bytes,3,rep,name=fellowship" json:"fellowship,omitempty"`
	// The first name of the practitioner
	FirstName string `protobuf:"bytes,4,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// The gender of the practitioner. Some patients have a gender
	// preference when selecting a practitioner
	Gender HealthCareProfessionalInformation_Gender `protobuf:"varint,5,opt,name=gender,enum=business.v1.HealthCareProfessionalInformation_Gender" json:"gender,omitempty"`
	// The initials of the practitioner
	Initials string `protobuf:"bytes,6,opt,name=initials" json:"initials,omitempty"`
	// A free-form text list of insurance providers accepted by
	// the practitioner
	InsurancesAccepted []string `protobuf:"bytes,7,rep,name=insurances_accepted,json=insurancesAccepted" json:"insurances_accepted,omitempty"`
	// Indicates whether the practitioner is accepting new patients.  Can be
	// null, indicating that they did not specify.
	IsTakingPatients *google_protobuf2.BoolValue `protobuf:"bytes,8,opt,name=is_taking_patients,json=isTakingPatients" json:"is_taking_patients,omitempty"`
	// The last name of the practitioner
	LastName string `protobuf:"bytes,9,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	// The practitioner's medical licence number, assigned by their
	// particular certification authority.
	MedicalLicenseNumber string `protobuf:"bytes,10,opt,name=medical_license_number,json=medicalLicenseNumber" json:"medical_license_number,omitempty"`
	// The 10-digit NPI number is assigned to all health practitioners by the
	// Centers for Medicare and Medicaid Services (CMS).
	NationalProviderIdentifier string `protobuf:"bytes,11,opt,name=national_provider_identifier,json=nationalProviderIdentifier" json:"national_provider_identifier,omitempty"`
	// Which operating office this location refers to
	Office string `protobuf:"bytes,12,opt,name=office" json:"office,omitempty"`
	// A list of free-form text credentials held by the practitioner
	ProfessionalCredential []string `protobuf:"bytes,13,rep,name=professional_credential,json=professionalCredential" json:"professional_credential,omitempty"`
	// A list of free-form locations where the practitioner performed their
	// residencies if applicable.
	Residency []string `protobuf:"bytes,14,rep,name=residency" json:"residency,omitempty"`
	// A list of free-form text schools the practitioner obtained educational
	// certifications through
	School []string `protobuf:"bytes,15,rep,name=school" json:"school,omitempty"`
	// A list of free-form specialties of the practitioner
	Specialty []string `protobuf:"bytes,16,rep,name=specialty" json:"specialty,omitempty"`
	// The title used by the practitioner to describe themselves
	StandardizedTitle string `protobuf:"bytes,17,opt,name=standardized_title,json=standardizedTitle" json:"standardized_title,omitempty"`
	// The license number issued by the practitioner's state
	StateLicense string `protobuf:"bytes,18,opt,name=state_license,json=stateLicense" json:"state_license,omitempty"`
}

func (m *HealthCareProfessionalInformation) Reset()         { *m = HealthCareProfessionalInformation{} }
func (m *HealthCareProfessionalInformation) String() string { return proto.CompactTextString(m) }
func (*HealthCareProfessionalInformation) ProtoMessage()    {}
func (*HealthCareProfessionalInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

func (m *HealthCareProfessionalInformation) GetDateOfBirth() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DateOfBirth
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetFellowship() []string {
	if m != nil {
		return m.Fellowship
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetGender() HealthCareProfessionalInformation_Gender {
	if m != nil {
		return m.Gender
	}
	return HealthCareProfessionalInformation_NotSpecified
}

func (m *HealthCareProfessionalInformation) GetInitials() string {
	if m != nil {
		return m.Initials
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetInsurancesAccepted() []string {
	if m != nil {
		return m.InsurancesAccepted
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetIsTakingPatients() *google_protobuf2.BoolValue {
	if m != nil {
		return m.IsTakingPatients
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetMedicalLicenseNumber() string {
	if m != nil {
		return m.MedicalLicenseNumber
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetNationalProviderIdentifier() string {
	if m != nil {
		return m.NationalProviderIdentifier
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetOffice() string {
	if m != nil {
		return m.Office
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetProfessionalCredential() []string {
	if m != nil {
		return m.ProfessionalCredential
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetResidency() []string {
	if m != nil {
		return m.Residency
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetSchool() []string {
	if m != nil {
		return m.School
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetSpecialty() []string {
	if m != nil {
		return m.Specialty
	}
	return nil
}

func (m *HealthCareProfessionalInformation) GetStandardizedTitle() string {
	if m != nil {
		return m.StandardizedTitle
	}
	return ""
}

func (m *HealthCareProfessionalInformation) GetStateLicense() string {
	if m != nil {
		return m.StateLicense
	}
	return ""
}

// CustomField allows partners to extend the metrics stored on a business to
// suit their own use cases
type CustomField struct {
	// The name of the custom field should be meaningful to users
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The value of the custom field for a particular business
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *CustomField) Reset()                    { *m = CustomField{} }
func (m *CustomField) String() string            { return proto.CompactTextString(m) }
func (*CustomField) ProtoMessage()               {}
func (*CustomField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CustomField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// RichData stores data on businesses that is more in-depth than the basic data
// much of this data is specific to certain types of business.  This means that
// proper selection of taxonomy ids is important to effectively using RichData.
type RichData struct {
	// The toll-free phone number associated with a business.  This is stored
	// separately than basic NAP data because many listing sites don't allow
	// a toll-free number to be used as a primary phone number, but they often
	// do allow it to be captured separately.
	TollFreeNumber string `protobuf:"bytes,1,opt,name=toll_free_number,json=tollFreeNumber" json:"toll_free_number,omitempty"`
	// The long-form description of the business.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The short description of the business or "tagline"
	ShortDescription string `protobuf:"bytes,3,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	// A free-form text list of services offered by the business
	ServicesOffered []string `protobuf:"bytes,4,rep,name=services_offered,json=servicesOffered" json:"services_offered,omitempty"`
	// A free-form text list of brands carried by the business
	BrandsCarried []string `protobuf:"bytes,5,rep,name=brands_carried,json=brandsCarried" json:"brands_carried,omitempty"`
	// A landmark near the business that is helpful to customers trying to
	// locate the business (ie. The Penhorn Mall)
	Landmark string `protobuf:"bytes,6,opt,name=landmark" json:"landmark,omitempty"`
	// A list of payment methods accepted by the business
	PaymentMethods []RichData_PaymentMethods `protobuf:"varint,7,rep,packed,name=payment_methods,json=paymentMethods,enum=business.v1.RichData_PaymentMethods" json:"payment_methods,omitempty"`
	// A set of custom fields on a business specific to a partner
	CustomFields []*CustomField `protobuf:"bytes,8,rep,name=custom_fields,json=customFields" json:"custom_fields,omitempty"`
	// RichData specific to business in the "Medical" Taxonomy
	HealthCareProfessionalInformation *HealthCareProfessionalInformation `protobuf:"bytes,9,opt,name=health_care_professional_information,json=healthCareProfessionalInformation" json:"health_care_professional_information,omitempty"`
}

func (m *RichData) Reset()                    { *m = RichData{} }
func (m *RichData) String() string            { return proto.CompactTextString(m) }
func (*RichData) ProtoMessage()               {}
func (*RichData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RichData) GetTollFreeNumber() string {
	if m != nil {
		return m.TollFreeNumber
	}
	return ""
}

func (m *RichData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RichData) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *RichData) GetServicesOffered() []string {
	if m != nil {
		return m.ServicesOffered
	}
	return nil
}

func (m *RichData) GetBrandsCarried() []string {
	if m != nil {
		return m.BrandsCarried
	}
	return nil
}

func (m *RichData) GetLandmark() string {
	if m != nil {
		return m.Landmark
	}
	return ""
}

func (m *RichData) GetPaymentMethods() []RichData_PaymentMethods {
	if m != nil {
		return m.PaymentMethods
	}
	return nil
}

func (m *RichData) GetCustomFields() []*CustomField {
	if m != nil {
		return m.CustomFields
	}
	return nil
}

func (m *RichData) GetHealthCareProfessionalInformation() *HealthCareProfessionalInformation {
	if m != nil {
		return m.HealthCareProfessionalInformation
	}
	return nil
}

// A set of basic information about a business that is common to almost all
// types of business.  Most of this information is required to construct a
// good online business listing.
type BasicData struct {
	// The operating name of the business
	CompanyName string `protobuf:"bytes,1,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
	// The street address of the location
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// The city of the location
	City string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	// The state/province/territory of the location
	State string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	// The zip/postalcode of the location
	Zip string `protobuf:"bytes,5,opt,name=zip" json:"zip,omitempty"`
	// The country of the location
	Country string `protobuf:"bytes,6,opt,name=country" json:"country,omitempty"`
	// The website of the location or business
	Website string `protobuf:"bytes,7,opt,name=website" json:"website,omitempty"`
	// A list of local phone numbers used by the business.  These can
	// not be toll-free numbers
	WorkNumber []string `protobuf:"bytes,8,rep,name=work_number,json=workNumber" json:"work_number,omitempty"`
	// A list of call-tracking nubmers used by the business.  These are
	// generally used for advertising attribution.
	CallTrackingNumber []string `protobuf:"bytes,9,rep,name=call_tracking_number,json=callTrackingNumber" json:"call_tracking_number,omitempty"`
	// The geo point describing the location
	Location *Geo `protobuf:"bytes,10,opt,name=location" json:"location,omitempty"`
	// The timezone of the location in text form (ie. "MT" or "ET")
	Timezone string `protobuf:"bytes,11,opt,name=timezone" json:"timezone,omitempty"`
}

func (m *BasicData) Reset()                    { *m = BasicData{} }
func (m *BasicData) String() string            { return proto.CompactTextString(m) }
func (*BasicData) ProtoMessage()               {}
func (*BasicData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BasicData) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *BasicData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BasicData) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *BasicData) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *BasicData) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *BasicData) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *BasicData) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *BasicData) GetWorkNumber() []string {
	if m != nil {
		return m.WorkNumber
	}
	return nil
}

func (m *BasicData) GetCallTrackingNumber() []string {
	if m != nil {
		return m.CallTrackingNumber
	}
	return nil
}

func (m *BasicData) GetLocation() *Geo {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *BasicData) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

// A set of information about the administration of this business. This information is only
// available to admins, and not to the local business owner
type Administration struct {
	// Notes about this business
	Notes string `protobuf:"bytes,1,opt,name=notes" json:"notes,omitempty"`
}

func (m *Administration) Reset()                    { *m = Administration{} }
func (m *Administration) String() string            { return proto.CompactTextString(m) }
func (*Administration) ProtoMessage()               {}
func (*Administration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Administration) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

// Describes all of the details about a single location of a business.  For
// multi-location businesses, one Business for each location in the platform
// is required.
type Business struct {
	// A unique business identifier.  This is a universally unique ID that is
	// used throughout the platform to identify a single business location.
	BusinessId string `protobuf:"bytes,1,opt,name=business_id,json=businessId" json:"business_id,omitempty"`
	// The partner ID that this business has a relationship
	PartnerId string `protobuf:"bytes,2,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The market ID that the business has a relationship with.  Note that
	// "" can be a valid market ID.
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// Stores the basic data on the account.  This field should never be
	// null.
	BasicData *BasicData `protobuf:"bytes,4,opt,name=basic_data,json=basicData" json:"basic_data,omitempty"`
	// Indicates whether the business has been suspended due to billing
	// issues.
	Suspended bool `protobuf:"varint,5,opt,name=suspended" json:"suspended,omitempty"`
	// When the business was deleted.  If the the timestamp is zero, then the
	// business has not been deleted.
	Deleted *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=deleted" json:"deleted,omitempty"`
	// When the business was first created.  This field is automatically
	// assigned by the system and can not be specified on creation or
	// update operations.
	Created *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=created" json:"created,omitempty"`
	// When any fields on the business were last modified.  This field i9s
	// automatically assigned by the system and can not be specified on
	// creation or update operations.
	Updated *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=updated" json:"updated,omitempty"`
	// A list of attributes that have been inferred.  This field uses a
	// syntax equivalent to the FieldMask.
	InferredAttributes []string `protobuf:"bytes,9,rep,name=inferred_attributes,json=inferredAttributes" json:"inferred_attributes,omitempty"`
	// A list of the products currently provisioned for the business
	Products []*Product `protobuf:"bytes,11,rep,name=products" json:"products,omitempty"`
	// External Identifiers on the account.  Because these fields are all
	// optional, this field can be null, but any good business will have
	// a taxonomhy specified, so in practice it should not be null.
	ExternalIdentifiers *ExternalIdentifiers `protobuf:"bytes,12,opt,name=external_identifiers,json=externalIdentifiers" json:"external_identifiers,omitempty"`
	// The list of social URLs associated with the business.  This field
	// can be null.
	SocialUrls *SocialURLs `protobuf:"bytes,13,opt,name=social_urls,json=socialUrls" json:"social_urls,omitempty"`
	// The hours of operation of the business.  This field can be null.
	HoursOfOperation *HoursOfOperation `protobuf:"bytes,14,opt,name=hours_of_operation,json=hoursOfOperation" json:"hours_of_operation,omitempty"`
	// Extra data about the business.  Much of this data may be specific
	// to certain types of business.  This field can be null.
	RichData *RichData `protobuf:"bytes,15,opt,name=rich_data,json=richData" json:"rich_data,omitempty"`
	// Data about the administration of this business. This field can be null.
	Administration *Administration `protobuf:"bytes,16,opt,name=administration" json:"administration,omitempty"`
}

func (m *Business) Reset()                    { *m = Business{} }
func (m *Business) String() string            { return proto.CompactTextString(m) }
func (*Business) ProtoMessage()               {}
func (*Business) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Business) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *Business) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *Business) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *Business) GetBasicData() *BasicData {
	if m != nil {
		return m.BasicData
	}
	return nil
}

func (m *Business) GetSuspended() bool {
	if m != nil {
		return m.Suspended
	}
	return false
}

func (m *Business) GetDeleted() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Business) GetCreated() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Business) GetUpdated() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *Business) GetInferredAttributes() []string {
	if m != nil {
		return m.InferredAttributes
	}
	return nil
}

func (m *Business) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *Business) GetExternalIdentifiers() *ExternalIdentifiers {
	if m != nil {
		return m.ExternalIdentifiers
	}
	return nil
}

func (m *Business) GetSocialUrls() *SocialURLs {
	if m != nil {
		return m.SocialUrls
	}
	return nil
}

func (m *Business) GetHoursOfOperation() *HoursOfOperation {
	if m != nil {
		return m.HoursOfOperation
	}
	return nil
}

func (m *Business) GetRichData() *RichData {
	if m != nil {
		return m.RichData
	}
	return nil
}

func (m *Business) GetAdministration() *Administration {
	if m != nil {
		return m.Administration
	}
	return nil
}

type ProjectionFilter struct {
	// Controls if products is returned on the business
	Products bool `protobuf:"varint,1,opt,name=products" json:"products,omitempty"`
	// Controls if external_identifiers is returned on the business
	ExternalIdentifiers bool `protobuf:"varint,2,opt,name=external_identifiers,json=externalIdentifiers" json:"external_identifiers,omitempty"`
	// Controls if social_urls is returned on the business
	SocialUrls bool `protobuf:"varint,3,opt,name=social_urls,json=socialUrls" json:"social_urls,omitempty"`
	// Controls if hours_of_operation is returned on the business
	HoursOfOperation bool `protobuf:"varint,4,opt,name=hours_of_operation,json=hoursOfOperation" json:"hours_of_operation,omitempty"`
	// Controls if contact_details is returned on the business
	ContactDetails bool `protobuf:"varint,5,opt,name=contact_details,json=contactDetails" json:"contact_details,omitempty"`
	// Controls if rich_data is returned on the business
	RichData bool `protobuf:"varint,6,opt,name=rich_data,json=richData" json:"rich_data,omitempty"`
}

func (m *ProjectionFilter) Reset()                    { *m = ProjectionFilter{} }
func (m *ProjectionFilter) String() string            { return proto.CompactTextString(m) }
func (*ProjectionFilter) ProtoMessage()               {}
func (*ProjectionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ProjectionFilter) GetProducts() bool {
	if m != nil {
		return m.Products
	}
	return false
}

func (m *ProjectionFilter) GetExternalIdentifiers() bool {
	if m != nil {
		return m.ExternalIdentifiers
	}
	return false
}

func (m *ProjectionFilter) GetSocialUrls() bool {
	if m != nil {
		return m.SocialUrls
	}
	return false
}

func (m *ProjectionFilter) GetHoursOfOperation() bool {
	if m != nil {
		return m.HoursOfOperation
	}
	return false
}

func (m *ProjectionFilter) GetContactDetails() bool {
	if m != nil {
		return m.ContactDetails
	}
	return false
}

func (m *ProjectionFilter) GetRichData() bool {
	if m != nil {
		return m.RichData
	}
	return false
}

// Update operation allows updating a specific piece of the business
type UpdateOperation struct {
	// Types that are valid to be assigned to Operation:
	//	*UpdateOperation_BasicData
	//	*UpdateOperation_SocialUrls
	//	*UpdateOperation_HoursOfOperation
	//	*UpdateOperation_Administration
	Operation isUpdateOperation_Operation `protobuf_oneof:"operation"`
	FieldMask *FieldMask                  `protobuf:"bytes,20,opt,name=field_mask,json=fieldMask" json:"field_mask,omitempty"`
}

func (m *UpdateOperation) Reset()                    { *m = UpdateOperation{} }
func (m *UpdateOperation) String() string            { return proto.CompactTextString(m) }
func (*UpdateOperation) ProtoMessage()               {}
func (*UpdateOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isUpdateOperation_Operation interface {
	isUpdateOperation_Operation()
}

type UpdateOperation_BasicData struct {
	BasicData *BasicData `protobuf:"bytes,1,opt,name=basic_data,json=basicData,oneof"`
}
type UpdateOperation_SocialUrls struct {
	SocialUrls *SocialURLs `protobuf:"bytes,2,opt,name=social_urls,json=socialUrls,oneof"`
}
type UpdateOperation_HoursOfOperation struct {
	HoursOfOperation *HoursOfOperation `protobuf:"bytes,3,opt,name=hours_of_operation,json=hoursOfOperation,oneof"`
}
type UpdateOperation_Administration struct {
	Administration *Administration `protobuf:"bytes,4,opt,name=administration,oneof"`
}

func (*UpdateOperation_BasicData) isUpdateOperation_Operation()        {}
func (*UpdateOperation_SocialUrls) isUpdateOperation_Operation()       {}
func (*UpdateOperation_HoursOfOperation) isUpdateOperation_Operation() {}
func (*UpdateOperation_Administration) isUpdateOperation_Operation()   {}

func (m *UpdateOperation) GetOperation() isUpdateOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *UpdateOperation) GetBasicData() *BasicData {
	if x, ok := m.GetOperation().(*UpdateOperation_BasicData); ok {
		return x.BasicData
	}
	return nil
}

func (m *UpdateOperation) GetSocialUrls() *SocialURLs {
	if x, ok := m.GetOperation().(*UpdateOperation_SocialUrls); ok {
		return x.SocialUrls
	}
	return nil
}

func (m *UpdateOperation) GetHoursOfOperation() *HoursOfOperation {
	if x, ok := m.GetOperation().(*UpdateOperation_HoursOfOperation); ok {
		return x.HoursOfOperation
	}
	return nil
}

func (m *UpdateOperation) GetAdministration() *Administration {
	if x, ok := m.GetOperation().(*UpdateOperation_Administration); ok {
		return x.Administration
	}
	return nil
}

func (m *UpdateOperation) GetFieldMask() *FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateOperation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateOperation_OneofMarshaler, _UpdateOperation_OneofUnmarshaler, _UpdateOperation_OneofSizer, []interface{}{
		(*UpdateOperation_BasicData)(nil),
		(*UpdateOperation_SocialUrls)(nil),
		(*UpdateOperation_HoursOfOperation)(nil),
		(*UpdateOperation_Administration)(nil),
	}
}

func _UpdateOperation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateOperation)
	// operation
	switch x := m.Operation.(type) {
	case *UpdateOperation_BasicData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicData); err != nil {
			return err
		}
	case *UpdateOperation_SocialUrls:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SocialUrls); err != nil {
			return err
		}
	case *UpdateOperation_HoursOfOperation:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HoursOfOperation); err != nil {
			return err
		}
	case *UpdateOperation_Administration:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Administration); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdateOperation.Operation has unexpected type %T", x)
	}
	return nil
}

func _UpdateOperation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateOperation)
	switch tag {
	case 1: // operation.basic_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasicData)
		err := b.DecodeMessage(msg)
		m.Operation = &UpdateOperation_BasicData{msg}
		return true, err
	case 2: // operation.social_urls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SocialURLs)
		err := b.DecodeMessage(msg)
		m.Operation = &UpdateOperation_SocialUrls{msg}
		return true, err
	case 3: // operation.hours_of_operation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HoursOfOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &UpdateOperation_HoursOfOperation{msg}
		return true, err
	case 4: // operation.administration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Administration)
		err := b.DecodeMessage(msg)
		m.Operation = &UpdateOperation_Administration{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateOperation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateOperation)
	// operation
	switch x := m.Operation.(type) {
	case *UpdateOperation_BasicData:
		s := proto.Size(x.BasicData)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateOperation_SocialUrls:
		s := proto.Size(x.SocialUrls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateOperation_HoursOfOperation:
		s := proto.Size(x.HoursOfOperation)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateOperation_Administration:
		s := proto.Size(x.Administration)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateRequest struct {
	Business *Business `protobuf:"bytes,1,opt,name=business" json:"business,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateRequest) GetBusiness() *Business {
	if m != nil {
		return m.Business
	}
	return nil
}

type CreateResponse struct {
	BusinessId string `protobuf:"bytes,1,opt,name=business_id,json=businessId" json:"business_id,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateResponse) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

type GetMultiRequest struct {
	BusinessIds      []string          `protobuf:"bytes,1,rep,name=business_ids,json=businessIds" json:"business_ids,omitempty"`
	ProjectionFilter *ProjectionFilter `protobuf:"bytes,2,opt,name=projection_filter,json=projectionFilter" json:"projection_filter,omitempty"`
}

func (m *GetMultiRequest) Reset()                    { *m = GetMultiRequest{} }
func (m *GetMultiRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMultiRequest) ProtoMessage()               {}
func (*GetMultiRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetMultiRequest) GetBusinessIds() []string {
	if m != nil {
		return m.BusinessIds
	}
	return nil
}

func (m *GetMultiRequest) GetProjectionFilter() *ProjectionFilter {
	if m != nil {
		return m.ProjectionFilter
	}
	return nil
}

type GetMultiResponse struct {
	Businesss []*GetMultiResponse_BusinessContainer `protobuf:"bytes,1,rep,name=businesss" json:"businesss,omitempty"`
}

func (m *GetMultiResponse) Reset()                    { *m = GetMultiResponse{} }
func (m *GetMultiResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMultiResponse) ProtoMessage()               {}
func (*GetMultiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetMultiResponse) GetBusinesss() []*GetMultiResponse_BusinessContainer {
	if m != nil {
		return m.Businesss
	}
	return nil
}

type GetMultiResponse_BusinessContainer struct {
	Business *Business `protobuf:"bytes,1,opt,name=business" json:"business,omitempty"`
}

func (m *GetMultiResponse_BusinessContainer) Reset()         { *m = GetMultiResponse_BusinessContainer{} }
func (m *GetMultiResponse_BusinessContainer) String() string { return proto.CompactTextString(m) }
func (*GetMultiResponse_BusinessContainer) ProtoMessage()    {}
func (*GetMultiResponse_BusinessContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 0}
}

func (m *GetMultiResponse_BusinessContainer) GetBusiness() *Business {
	if m != nil {
		return m.Business
	}
	return nil
}

type UpdateRequest struct {
	BusinessId       string             `protobuf:"bytes,1,opt,name=business_id,json=businessId" json:"business_id,omitempty"`
	UpdateOperations []*UpdateOperation `protobuf:"bytes,2,rep,name=update_operations,json=updateOperations" json:"update_operations,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateRequest) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *UpdateRequest) GetUpdateOperations() []*UpdateOperation {
	if m != nil {
		return m.UpdateOperations
	}
	return nil
}

func init() {
	proto.RegisterType((*Geo)(nil), "business.v1.Geo")
	proto.RegisterType((*Product)(nil), "business.v1.Product")
	proto.RegisterType((*ExternalIdentifiers)(nil), "business.v1.ExternalIdentifiers")
	proto.RegisterType((*SocialURLs)(nil), "business.v1.SocialURLs")
	proto.RegisterType((*HoursOfOperation)(nil), "business.v1.HoursOfOperation")
	proto.RegisterType((*HoursOfOperation_Span)(nil), "business.v1.HoursOfOperation.Span")
	proto.RegisterType((*HealthCareProfessionalInformation)(nil), "business.v1.HealthCareProfessionalInformation")
	proto.RegisterType((*CustomField)(nil), "business.v1.CustomField")
	proto.RegisterType((*RichData)(nil), "business.v1.RichData")
	proto.RegisterType((*BasicData)(nil), "business.v1.BasicData")
	proto.RegisterType((*Administration)(nil), "business.v1.Administration")
	proto.RegisterType((*Business)(nil), "business.v1.Business")
	proto.RegisterType((*ProjectionFilter)(nil), "business.v1.ProjectionFilter")
	proto.RegisterType((*UpdateOperation)(nil), "business.v1.UpdateOperation")
	proto.RegisterType((*CreateRequest)(nil), "business.v1.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "business.v1.CreateResponse")
	proto.RegisterType((*GetMultiRequest)(nil), "business.v1.GetMultiRequest")
	proto.RegisterType((*GetMultiResponse)(nil), "business.v1.GetMultiResponse")
	proto.RegisterType((*GetMultiResponse_BusinessContainer)(nil), "business.v1.GetMultiResponse.BusinessContainer")
	proto.RegisterType((*UpdateRequest)(nil), "business.v1.UpdateRequest")
	proto.RegisterEnum("business.v1.HoursOfOperation_DayOfWeek", HoursOfOperation_DayOfWeek_name, HoursOfOperation_DayOfWeek_value)
	proto.RegisterEnum("business.v1.HealthCareProfessionalInformation_Gender", HealthCareProfessionalInformation_Gender_name, HealthCareProfessionalInformation_Gender_value)
	proto.RegisterEnum("business.v1.RichData_PaymentMethods", RichData_PaymentMethods_name, RichData_PaymentMethods_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BusinessService service

type BusinessServiceClient interface {
	// Create is used to create a new business.  Clients must specify the
	// partner ID and market ID that they want the business to be created
	// in.  Their IAM identity must have the appropriate policy setup for
	// this to be allowed.  Note that products can not be provisioned with
	// this RPC; a business must be created with this RPC first, and then
	// products can be provisioned on it.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// GetMulti is used to get Business(es) by their Business ID.  It
	// currently does not support Customer IDs. In a future release this
	// RPC will support lookup by either Busines ID or Customer ID. This
	// RPC also does not provide any search functionality.
	GetMulti(ctx context.Context, in *GetMultiRequest, opts ...grpc.CallOption) (*GetMultiResponse, error)
	// Update is used to update specified fields of their business
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type businessServiceClient struct {
	cc *grpc.ClientConn
}

func NewBusinessServiceClient(cc *grpc.ClientConn) BusinessServiceClient {
	return &businessServiceClient{cc}
}

func (c *businessServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/business.v1.BusinessService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) GetMulti(ctx context.Context, in *GetMultiRequest, opts ...grpc.CallOption) (*GetMultiResponse, error) {
	out := new(GetMultiResponse)
	err := grpc.Invoke(ctx, "/business.v1.BusinessService/GetMulti", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/business.v1.BusinessService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BusinessService service

type BusinessServiceServer interface {
	// Create is used to create a new business.  Clients must specify the
	// partner ID and market ID that they want the business to be created
	// in.  Their IAM identity must have the appropriate policy setup for
	// this to be allowed.  Note that products can not be provisioned with
	// this RPC; a business must be created with this RPC first, and then
	// products can be provisioned on it.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// GetMulti is used to get Business(es) by their Business ID.  It
	// currently does not support Customer IDs. In a future release this
	// RPC will support lookup by either Busines ID or Customer ID. This
	// RPC also does not provide any search functionality.
	GetMulti(context.Context, *GetMultiRequest) (*GetMultiResponse, error)
	// Update is used to update specified fields of their business
	Update(context.Context, *UpdateRequest) (*google_protobuf3.Empty, error)
}

func RegisterBusinessServiceServer(s *grpc.Server, srv BusinessServiceServer) {
	s.RegisterService(&_BusinessService_serviceDesc, srv)
}

func _BusinessService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.BusinessService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_GetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).GetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.BusinessService/GetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).GetMulti(ctx, req.(*GetMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.v1.BusinessService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BusinessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "business.v1.BusinessService",
	HandlerType: (*BusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BusinessService_Create_Handler,
		},
		{
			MethodName: "GetMulti",
			Handler:    _BusinessService_GetMulti_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BusinessService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x76, 0x22, 0xc7,
	0xf5, 0x17, 0x42, 0x42, 0x70, 0x11, 0xa8, 0xa7, 0x46, 0xff, 0x31, 0x7f, 0xcd, 0x8c, 0xad, 0x21,
	0xfe, 0x50, 0x12, 0x87, 0xf1, 0x10, 0xfb, 0x38, 0x27, 0xdf, 0x08, 0x18, 0x89, 0x58, 0x48, 0x9c,
	0x06, 0xc6, 0xf1, 0xaa, 0x4f, 0xd1, 0x5d, 0x88, 0x8a, 0x9a, 0xae, 0x76, 0x55, 0x31, 0x32, 0x93,
	0x9c, 0x93, 0x2c, 0xf2, 0x0c, 0xd9, 0x66, 0x9d, 0x47, 0xc8, 0x03, 0xe4, 0x11, 0xb2, 0xca, 0xc6,
	0x39, 0x27, 0x9b, 0xbc, 0x40, 0xd6, 0x39, 0xf5, 0xd1, 0x40, 0x23, 0x59, 0x4a, 0xb2, 0xe3, 0xde,
	0xfb, 0xbb, 0xb7, 0xab, 0xee, 0x77, 0x01, 0x05, 0x1c, 0xd3, 0x5a, 0xcc, 0x99, 0x64, 0xa8, 0x38,
	0x9a, 0x09, 0x1a, 0x11, 0x21, 0x6a, 0xaf, 0x5f, 0x1c, 0x3c, 0xb9, 0x64, 0xec, 0x32, 0x24, 0xcf,
	0x71, 0x4c, 0x9f, 0xe3, 0x28, 0x62, 0x12, 0x4b, 0xca, 0x22, 0x61, 0xa0, 0x07, 0xef, 0x58, 0xa9,
	0xa6, 0x46, 0xb3, 0xf1, 0x73, 0x49, 0xa7, 0x44, 0x48, 0x3c, 0x8d, 0x2d, 0xe0, 0xed, 0x75, 0xc0,
	0x35, 0xc7, 0x71, 0x4c, 0x78, 0x62, 0xe0, 0xf1, 0xba, 0x9c, 0x4c, 0x63, 0x39, 0xb7, 0x42, 0x67,
	0x4c, 0x49, 0x18, 0x78, 0x53, 0x2c, 0xae, 0x0c, 0xa7, 0xfa, 0x33, 0xc8, 0x9e, 0x10, 0x86, 0x0e,
	0x20, 0x1f, 0x62, 0x49, 0xe5, 0x2c, 0x20, 0x95, 0xcc, 0x61, 0xe6, 0x28, 0xe3, 0x2e, 0x68, 0xf4,
	0x04, 0x0a, 0x21, 0x8b, 0x2e, 0x8d, 0x70, 0x53, 0x0b, 0x97, 0x8c, 0xea, 0x9f, 0x33, 0xb0, 0xd3,
	0xe3, 0x2c, 0x98, 0xf9, 0x12, 0xfd, 0x3f, 0xe4, 0xa9, 0xf0, 0x24, 0xa7, 0x38, 0xd4, 0x56, 0xf2,
	0xee, 0x0e, 0x15, 0x03, 0x45, 0x22, 0x04, 0x5b, 0x12, 0x5f, 0x8a, 0xca, 0xe6, 0x61, 0xf6, 0xa8,
	0xe0, 0xea, 0xdf, 0xe8, 0x43, 0x40, 0x53, 0xcc, 0xaf, 0x88, 0x8c, 0x43, 0xec, 0x13, 0x0f, 0xc7,
	0xb1, 0x47, 0x83, 0x4a, 0xf6, 0x30, 0x73, 0x54, 0x70, 0x9d, 0x15, 0x49, 0x23, 0x8e, 0x3b, 0x01,
	0x7a, 0x0a, 0x80, 0x7d, 0x9f, 0xcd, 0x22, 0xa9, 0x50, 0x5b, 0x1a, 0x55, 0xb0, 0x9c, 0x4e, 0x80,
	0xea, 0x90, 0x23, 0x5f, 0xc5, 0x94, 0xcf, 0x2b, 0xdb, 0x87, 0x99, 0xa3, 0x62, 0xfd, 0xa0, 0x66,
	0x1c, 0x51, 0x4b, 0x1c, 0x51, 0x1b, 0x24, 0x9e, 0x74, 0x2d, 0xb2, 0xfa, 0x75, 0x06, 0x1e, 0xb6,
	0xbf, 0x92, 0x84, 0x47, 0x38, 0xec, 0x04, 0x24, 0x92, 0x74, 0x4c, 0x09, 0x17, 0xe8, 0x11, 0xe4,
	0x18, 0xa7, 0x97, 0x34, 0xd2, 0xb7, 0x28, 0xb8, 0x96, 0x42, 0xcf, 0xe1, 0xa1, 0x3f, 0x13, 0x92,
	0x4d, 0x09, 0xf7, 0xe8, 0x02, 0xaf, 0x7d, 0x52, 0x70, 0x51, 0x22, 0x5a, 0x5a, 0x5a, 0xdc, 0x3a,
	0xbb, 0x72, 0xeb, 0x67, 0xb0, 0x8b, 0x7d, 0x15, 0x72, 0x2f, 0xa4, 0x42, 0x8a, 0xca, 0x96, 0x96,
	0x15, 0x0d, 0xef, 0x4c, 0xb1, 0x14, 0x44, 0xe2, 0xaf, 0x58, 0xc4, 0xa6, 0x73, 0x8f, 0x06, 0xa2,
	0xb2, 0x6d, 0x20, 0x09, 0xaf, 0x13, 0x08, 0xf4, 0x3e, 0xec, 0x09, 0x1c, 0x12, 0xe1, 0xa9, 0xd0,
	0xb3, 0x48, 0xb9, 0x24, 0xa7, 0x8f, 0x51, 0xd2, 0xec, 0x9e, 0xe6, 0x76, 0x82, 0xea, 0x5f, 0x36,
	0x01, 0xfa, 0xcc, 0xa7, 0x38, 0x1c, 0xba, 0x67, 0x02, 0xbd, 0x07, 0x65, 0xe3, 0x96, 0x38, 0x9c,
	0x09, 0x6f, 0xc6, 0x43, 0x7b, 0xc3, 0xd2, 0x92, 0x3b, 0xe4, 0xa1, 0x3a, 0x40, 0x48, 0xa3, 0x2b,
	0x12, 0xd0, 0x48, 0x83, 0xcc, 0x0d, 0x8b, 0x09, 0x4f, 0x41, 0xde, 0x83, 0xf2, 0x98, 0xcd, 0xb8,
	0xf8, 0x72, 0x86, 0x39, 0xd1, 0x20, 0x13, 0xb8, 0xd2, 0x92, 0xab, 0x60, 0xef, 0x40, 0x51, 0x5e,
	0x53, 0x29, 0x09, 0xd7, 0x18, 0x13, 0x36, 0xb0, 0x2c, 0xfb, 0xa9, 0x31, 0xf6, 0xc9, 0x88, 0xb1,
	0x2b, 0x8d, 0xd8, 0x36, 0x9f, 0x4a, 0x78, 0x0a, 0xf2, 0x16, 0xec, 0x70, 0x61, 0x4e, 0x6b, 0xee,
	0x98, 0xe3, 0x42, 0x58, 0xe3, 0x73, 0x36, 0x93, 0xb3, 0x91, 0x39, 0xc0, 0x8e, 0x31, 0x6e, 0x59,
	0x0a, 0xf0, 0x2d, 0x28, 0xd1, 0x48, 0x48, 0x7c, 0xc9, 0xf1, 0x54, 0x43, 0xf2, 0x1a, 0xb2, 0xbb,
	0x60, 0x5a, 0x50, 0x4c, 0x23, 0x49, 0x38, 0x11, 0x52, 0x83, 0x0a, 0x06, 0xb4, 0x60, 0x0e, 0x79,
	0x58, 0xfd, 0x7d, 0x16, 0x9c, 0x53, 0x75, 0xb3, 0x8b, 0xf1, 0x45, 0x4c, 0xb8, 0xae, 0x59, 0xd4,
	0x03, 0x34, 0x51, 0x3c, 0x8f, 0x8d, 0x3d, 0x96, 0x70, 0x2b, 0x99, 0xc3, 0xec, 0x51, 0xb1, 0x5e,
	0xad, 0xad, 0x14, 0x7d, 0x6d, 0x5d, 0xb5, 0xd6, 0x8f, 0x71, 0xe4, 0x3a, 0x93, 0x35, 0xf6, 0xc1,
	0x1f, 0x33, 0xb0, 0xa5, 0x44, 0xe8, 0x04, 0x8a, 0x01, 0x9e, 0x2b, 0xc3, 0xd7, 0x84, 0x5c, 0x69,
	0x9b, 0xe5, 0xfa, 0x07, 0x77, 0xdb, 0x6c, 0xe1, 0xf9, 0xc5, 0xf8, 0x73, 0x42, 0xae, 0xdc, 0x42,
	0x90, 0xfc, 0x44, 0xfb, 0xb0, 0xcd, 0x62, 0x12, 0x09, 0x1b, 0x43, 0x43, 0xa8, 0x0c, 0xf7, 0x43,
	0x26, 0x88, 0xb0, 0x51, 0xb3, 0x14, 0x3a, 0x84, 0x62, 0x40, 0x84, 0xcf, 0x69, 0xac, 0xaf, 0x62,
	0xc2, 0xb5, 0xca, 0xaa, 0xfe, 0x06, 0x0a, 0x8b, 0xef, 0x20, 0x80, 0x5c, 0xf7, 0xe2, 0xbc, 0xd5,
	0xf8, 0xc2, 0xd9, 0x40, 0x45, 0xd8, 0x19, 0x0c, 0xdb, 0x7d, 0x45, 0x64, 0x50, 0x09, 0x0a, 0x9f,
	0xb7, 0x5b, 0xe7, 0x86, 0xdc, 0x44, 0xbb, 0x90, 0x1f, 0x9c, 0x0e, 0x5d, 0x4d, 0x65, 0x95, 0xd6,
	0x4b, 0xb7, 0xa3, 0x7e, 0x6f, 0x29, 0x49, 0xbf, 0x31, 0x18, 0xba, 0x8a, 0xda, 0x56, 0x92, 0xfe,
	0x50, 0xdb, 0xcb, 0xa1, 0x87, 0xb0, 0xd7, 0x1b, 0x1e, 0x9f, 0x75, 0x9a, 0xde, 0xe9, 0xc5, 0x99,
	0x42, 0xf7, 0x9d, 0x9d, 0xea, 0x3f, 0x73, 0xf0, 0xec, 0x94, 0xe0, 0x50, 0x4e, 0x9a, 0x98, 0x93,
	0x1e, 0x67, 0x63, 0x22, 0x04, 0x65, 0xaa, 0x7e, 0xa3, 0x31, 0xe3, 0x53, 0x13, 0x97, 0x9f, 0x42,
	0x29, 0xc0, 0x92, 0x28, 0xef, 0x8d, 0x28, 0x97, 0x13, 0x9d, 0xe4, 0x77, 0xb7, 0x84, 0xa2, 0x52,
	0xb8, 0x18, 0x1f, 0x2b, 0xb8, 0xf2, 0x19, 0x99, 0x62, 0x9a, 0xe4, 0xbd, 0x21, 0xd0, 0xdb, 0x00,
	0x63, 0x12, 0x86, 0xec, 0x5a, 0x4c, 0x68, 0x6c, 0x4b, 0x7a, 0x85, 0xa3, 0x1a, 0xd4, 0x98, 0x72,
	0x21, 0xbd, 0x08, 0x4f, 0x49, 0xd2, 0xa0, 0x34, 0xe7, 0x1c, 0x4f, 0x09, 0xea, 0x42, 0xee, 0x92,
	0x44, 0x01, 0xe1, 0x3a, 0xc5, 0xcb, 0xf5, 0x4f, 0xd2, 0xc1, 0xbc, 0xef, 0x52, 0xb5, 0x13, 0xad,
	0xec, 0x5a, 0x23, 0xaa, 0x63, 0xd3, 0x88, 0x4a, 0x8a, 0x43, 0x61, 0xab, 0x62, 0x41, 0xab, 0x3e,
	0x45, 0x23, 0x31, 0xe3, 0x38, 0xf2, 0x89, 0xf0, 0xb0, 0xef, 0x93, 0x58, 0x92, 0xa0, 0xb2, 0xa3,
	0x8f, 0x8c, 0x96, 0xa2, 0x86, 0x95, 0xa0, 0x53, 0x40, 0xaa, 0x71, 0xe3, 0x2b, 0x1a, 0x5d, 0x7a,
	0x31, 0x96, 0x94, 0x44, 0x52, 0xe8, 0x62, 0xb9, 0xcd, 0x6b, 0xc7, 0x8c, 0x85, 0xaf, 0x70, 0x38,
	0x23, 0xae, 0x43, 0xc5, 0x40, 0x2b, 0xf5, 0xac, 0x0e, 0x7a, 0x0c, 0x85, 0x10, 0x27, 0x3e, 0x30,
	0x85, 0x94, 0x57, 0x0c, 0xed, 0x82, 0x8f, 0xe1, 0xd1, 0x94, 0x04, 0xd4, 0xc7, 0xa1, 0x17, 0x52,
	0x9f, 0x44, 0x82, 0x78, 0xd1, 0x6c, 0x3a, 0x22, 0xbc, 0x02, 0x1a, 0xb9, 0x6f, 0xa5, 0x67, 0x46,
	0x78, 0xae, 0x65, 0xe8, 0xe7, 0xf0, 0x24, 0xd2, 0x2e, 0xc0, 0xa1, 0x17, 0x73, 0xf6, 0x9a, 0x06,
	0xe9, 0xf6, 0x5b, 0xd4, 0xba, 0x07, 0x09, 0xa6, 0x67, 0x21, 0x2b, 0x6d, 0x58, 0xf5, 0xf3, 0xf1,
	0x98, 0xfa, 0xa4, 0xb2, 0x6b, 0xfb, 0xb9, 0xa6, 0xd0, 0xa7, 0xf0, 0x56, 0xbc, 0xe2, 0x6d, 0xcf,
	0xe7, 0x44, 0x2b, 0xe1, 0xb0, 0x52, 0xd2, 0xbe, 0x7a, 0xb4, 0x2a, 0x6e, 0x2e, 0xa4, 0x6a, 0x24,
	0x72, 0x22, 0xd4, 0x19, 0xfc, 0x79, 0xa5, 0xac, 0xa1, 0x4b, 0x86, 0xfa, 0x9c, 0xf0, 0x27, 0x8c,
	0x85, 0x95, 0x3d, 0x2d, 0xb2, 0x94, 0xd2, 0x12, 0x31, 0x51, 0xbd, 0x58, 0xce, 0x2b, 0x8e, 0xd1,
	0x5a, 0x30, 0xd0, 0xf7, 0x00, 0x09, 0x89, 0xa3, 0x00, 0xf3, 0x80, 0xbe, 0x21, 0x81, 0x27, 0xa9,
	0x0c, 0x49, 0xe5, 0x81, 0x3e, 0xf0, 0x83, 0x55, 0xc9, 0x40, 0x09, 0x54, 0xd7, 0x12, 0x52, 0x25,
	0xb9, 0xf5, 0x64, 0x05, 0x99, 0xae, 0xa5, 0x99, 0xd6, 0x81, 0xd5, 0x1f, 0x41, 0xce, 0xa4, 0x0d,
	0x72, 0x60, 0xf7, 0x9c, 0xc9, 0xbe, 0xfa, 0xda, 0x98, 0x92, 0xc0, 0xd9, 0xd0, 0x55, 0x48, 0xa6,
	0x38, 0x24, 0x4e, 0x06, 0xe5, 0x61, 0xab, 0xab, 0x7e, 0x6d, 0xa2, 0x02, 0x6c, 0x5f, 0xc8, 0x09,
	0xe1, 0x4e, 0xb6, 0xfa, 0x29, 0x14, 0x9b, 0x7a, 0xa4, 0xbd, 0x54, 0x4b, 0x83, 0x9a, 0x65, 0x3a,
	0xa8, 0x66, 0x60, 0xe8, 0xdf, 0xaa, 0x50, 0x5e, 0xab, 0x44, 0x48, 0x0a, 0x45, 0x13, 0xd5, 0x7f,
	0x6c, 0x43, 0xde, 0xa5, 0xfe, 0xa4, 0x85, 0x25, 0x46, 0x47, 0xe0, 0x48, 0x16, 0x86, 0xde, 0x98,
	0x93, 0x45, 0xb4, 0x8d, 0x89, 0xb2, 0xe2, 0xbf, 0xe4, 0x24, 0x89, 0xf3, 0x5a, 0xef, 0xd9, 0xbc,
	0xd1, 0x7b, 0xd0, 0x77, 0xe1, 0x81, 0x98, 0x30, 0x2e, 0xbd, 0x55, 0x9c, 0xdd, 0x17, 0xb4, 0xa0,
	0xb5, 0x02, 0xfe, 0x36, 0x38, 0x82, 0xf0, 0xd7, 0x54, 0x95, 0x00, 0x1b, 0x8f, 0x09, 0x27, 0x81,
	0x9d, 0xb5, 0x7b, 0x09, 0xff, 0xc2, 0xb0, 0xd5, 0x2c, 0x1b, 0x71, 0x1c, 0x05, 0xc2, 0xf3, 0x31,
	0xe7, 0x94, 0x04, 0x76, 0xe2, 0x96, 0x0c, 0xb7, 0x69, 0x98, 0x66, 0x49, 0x8a, 0x02, 0xb5, 0x99,
	0x24, 0x25, 0x97, 0xd0, 0xa8, 0x0b, 0x7b, 0x31, 0x9e, 0x4f, 0x49, 0x24, 0xbd, 0x29, 0x91, 0x13,
	0x16, 0x08, 0x5d, 0x6e, 0xe5, 0xfa, 0xbb, 0xa9, 0x32, 0x4f, 0xdc, 0x52, 0xeb, 0x19, 0x70, 0xd7,
	0x60, 0xdd, 0x72, 0x9c, 0xa2, 0xd1, 0x4f, 0xa0, 0x64, 0xd6, 0x09, 0x4f, 0x6f, 0x6c, 0xaa, 0x16,
	0xd5, 0x50, 0xa9, 0xa4, 0x8c, 0xad, 0x44, 0xc7, 0xdd, 0xf5, 0x97, 0x84, 0x40, 0xbf, 0x85, 0x77,
	0x27, 0xba, 0xa1, 0xa8, 0x0b, 0x11, 0x2f, 0x95, 0xe4, 0x74, 0xd9, 0x53, 0x74, 0x81, 0x16, 0xeb,
	0xb5, 0xff, 0xae, 0x13, 0xb9, 0xcf, 0x26, 0xf7, 0x41, 0xaa, 0x7f, 0xcf, 0x40, 0x39, 0x7d, 0x45,
	0xb4, 0x0f, 0x4e, 0xa3, 0xdb, 0x76, 0x3b, 0xcd, 0xc6, 0xb9, 0xd7, 0xfe, 0x65, 0xcf, 0x6d, 0xf7,
	0xfb, 0xce, 0x06, 0xda, 0x83, 0x62, 0xe3, 0xbc, 0xe5, 0x5e, 0x74, 0x5a, 0x5e, 0x2f, 0x99, 0x1c,
	0x8d, 0x5e, 0xef, 0xac, 0xad, 0xc9, 0x4d, 0x95, 0x99, 0xcd, 0x46, 0xff, 0xd4, 0xc9, 0xaa, 0xcc,
	0x6c, 0x9e, 0xb6, 0x9b, 0x9f, 0x39, 0x5b, 0xea, 0x67, 0xab, 0x7d, 0xdc, 0x19, 0x38, 0xdb, 0x4a,
	0xbf, 0xd5, 0x39, 0x6f, 0xbb, 0x7d, 0xaf, 0x79, 0x36, 0x3c, 0x76, 0x72, 0x6a, 0xa0, 0xb4, 0x3a,
	0xfd, 0xe6, 0xc5, 0xab, 0xb6, 0xeb, 0xec, 0xa0, 0x32, 0x40, 0xb7, 0xd1, 0x1f, 0xb4, 0xdd, 0x66,
	0xc3, 0x6d, 0x39, 0x79, 0x95, 0xf4, 0xbd, 0xc6, 0x17, 0xbd, 0xc6, 0x99, 0x53, 0x50, 0xaa, 0xfd,
	0x46, 0xb7, 0x3f, 0x3c, 0x3f, 0xd1, 0xdf, 0x02, 0x05, 0xee, 0x0f, 0x2e, 0xdc, 0xb6, 0xa7, 0xc1,
	0x45, 0x35, 0x81, 0x06, 0x6e, 0xe3, 0x55, 0xfb, 0x4c, 0x9b, 0xd7, 0xdf, 0xde, 0x55, 0x07, 0x7a,
	0xd5, 0xe9, 0x37, 0x9c, 0x52, 0xf5, 0xaf, 0x9b, 0x50, 0x38, 0xc6, 0x82, 0xfa, 0x3a, 0xcf, 0x9f,
	0xc1, 0xae, 0xcf, 0xa6, 0x31, 0x8e, 0xe6, 0xde, 0x4a, 0x99, 0x14, 0x2d, 0x4f, 0xb7, 0xbf, 0x0a,
	0xec, 0xe0, 0x20, 0xe0, 0x44, 0x24, 0xc3, 0x38, 0x21, 0x55, 0x6d, 0xf9, 0x54, 0xce, 0x6d, 0x2e,
	0xeb, 0xdf, 0xaa, 0xb6, 0x74, 0x2d, 0xdb, 0x49, 0x62, 0x08, 0xe4, 0x40, 0xf6, 0x0d, 0x8d, 0xed,
	0x96, 0xa4, 0x7e, 0x2a, 0xab, 0x7a, 0x07, 0xe6, 0x73, 0x9b, 0x94, 0x09, 0xa9, 0x24, 0xd7, 0x64,
	0x24, 0xa8, 0x24, 0x76, 0x35, 0x4a, 0x48, 0xb5, 0x38, 0x5d, 0x33, 0x7e, 0x95, 0xd4, 0x63, 0xde,
	0xcc, 0x32, 0xc5, 0xb2, 0xb5, 0xf8, 0x11, 0xec, 0xfb, 0x38, 0x0c, 0x3d, 0xc9, 0xb1, 0xaf, 0x87,
	0x82, 0x45, 0x16, 0xcc, 0x08, 0x51, 0xb2, 0x81, 0x15, 0x59, 0x8d, 0x0f, 0x21, 0x1f, 0x32, 0xdf,
	0xa4, 0x15, 0xe8, 0xb4, 0x72, 0x52, 0x69, 0x75, 0x42, 0x98, 0xbb, 0x40, 0xa8, 0x52, 0x52, 0x0f,
	0x9b, 0x37, 0x2c, 0x22, 0xb6, 0x7f, 0x2f, 0xe8, 0xea, 0xfb, 0x50, 0x6e, 0x04, 0x53, 0x1a, 0x51,
	0x21, 0xed, 0x9e, 0xb5, 0x0f, 0xdb, 0x11, 0x93, 0x44, 0x58, 0xa7, 0x1a, 0xa2, 0xfa, 0x87, 0x1c,
	0xe4, 0x8f, 0xed, 0x17, 0xd4, 0x8d, 0x92, 0xaf, 0xa9, 0x5d, 0xd8, 0x00, 0x21, 0x61, 0x99, 0xe7,
	0x43, 0x8c, 0xb9, 0x8c, 0xf4, 0xec, 0xb0, 0xfe, 0x2f, 0x58, 0x4e, 0x27, 0x50, 0x73, 0xcb, 0xbc,
	0x38, 0x96, 0x4f, 0x90, 0xbc, 0x61, 0x74, 0x02, 0xf4, 0x09, 0xc0, 0x48, 0x05, 0xda, 0x0b, 0xb0,
	0xc4, 0x3a, 0x1e, 0xc5, 0xfa, 0xa3, 0xd4, 0xed, 0x16, 0x79, 0xe0, 0x16, 0x46, 0x8b, 0x94, 0x50,
	0xfd, 0x7e, 0x26, 0x62, 0xd5, 0x80, 0x03, 0x1d, 0xb1, 0xbc, 0xbb, 0x64, 0xa0, 0x8f, 0x61, 0x27,
	0x20, 0x21, 0x51, 0x83, 0x39, 0x77, 0xef, 0x7a, 0x92, 0x40, 0x95, 0x96, 0xcf, 0x09, 0x36, 0xe3,
	0xfc, 0x5e, 0x2d, 0x0b, 0x55, 0x5a, 0xb3, 0x38, 0xd0, 0x5a, 0xf9, 0xfb, 0xb5, 0x2c, 0xd4, 0xac,
	0x11, 0x63, 0xc2, 0x39, 0x09, 0x3c, 0x2c, 0x25, 0xa7, 0xa3, 0x99, 0x0a, 0x42, 0x21, 0x59, 0x23,
	0x8c, 0xa8, 0xb1, 0x90, 0xa0, 0x8f, 0x20, 0x1f, 0x9b, 0xa7, 0xa0, 0xa8, 0x14, 0x75, 0xc3, 0xda,
	0x4f, 0x79, 0xc9, 0xbe, 0x13, 0xdd, 0x05, 0x0a, 0xf5, 0x61, 0x9f, 0xd8, 0x07, 0xd8, 0xca, 0x48,
	0x17, 0x7a, 0x4e, 0x17, 0xeb, 0x87, 0x29, 0xed, 0x5b, 0x5e, 0x6a, 0xee, 0x43, 0x72, 0xcb, 0xf3,
	0xed, 0x07, 0x50, 0x14, 0xfa, 0xc9, 0xa3, 0xb6, 0x79, 0x51, 0x29, 0x69, 0x5b, 0x6f, 0xa5, 0x6c,
	0x2d, 0x9f, 0x44, 0x2e, 0x18, 0xec, 0x90, 0x87, 0x02, 0x7d, 0x76, 0xeb, 0x42, 0x5f, 0xd6, 0x06,
	0x9e, 0xde, 0xb9, 0x7c, 0xdf, 0xdc, 0xe5, 0x51, 0x1d, 0x0a, 0x9c, 0xfa, 0x13, 0x93, 0x34, 0x7b,
	0xda, 0xc6, 0xff, 0xdd, 0x3a, 0x0c, 0xdc, 0x3c, 0x4f, 0xa6, 0x65, 0x13, 0xca, 0x38, 0x95, 0xfb,
	0x15, 0x47, 0x2b, 0x3e, 0x4e, 0x29, 0xa6, 0xcb, 0xc3, 0x5d, 0x53, 0xa9, 0xfe, 0x2b, 0x03, 0x4e,
	0x8f, 0xb3, 0x5f, 0x11, 0xfd, 0xa4, 0x7c, 0x49, 0x43, 0x69, 0xf6, 0xc5, 0x45, 0x6c, 0xcc, 0xdb,
	0x7c, 0x19, 0x85, 0x17, 0xdf, 0x10, 0x85, 0x4d, 0x8d, 0xbb, 0xd5, 0xc7, 0xef, 0xa4, 0x7d, 0x9c,
	0xd5, 0xc8, 0x55, 0x57, 0x7e, 0x78, 0xab, 0x2b, 0xb7, 0x34, 0xee, 0xa6, 0xaf, 0x3e, 0x80, 0x3d,
	0x9f, 0x45, 0x12, 0xfb, 0x6a, 0xb6, 0x4b, 0x4c, 0x43, 0x61, 0x0b, 0xa6, 0x6c, 0xd9, 0x2d, 0xc3,
	0x55, 0x75, 0xba, 0x74, 0x6a, 0xce, 0xdc, 0x23, 0xf1, 0x5e, 0xf5, 0xeb, 0x4d, 0xd8, 0x1b, 0xea,
	0xe4, 0x5d, 0x5a, 0xfe, 0x34, 0x55, 0xbb, 0x99, 0xbb, 0x6a, 0xf7, 0x74, 0x63, 0xb5, 0x7a, 0x7f,
	0x98, 0xbe, 0xe1, 0xe6, 0x9d, 0x59, 0x74, 0xba, 0x91, 0xba, 0x7c, 0xf7, 0xd6, 0xcb, 0x67, 0xff,
	0x83, 0x3c, 0x3a, 0xdd, 0xb8, 0xc5, 0x3b, 0xed, 0x1b, 0x59, 0xb1, 0x75, 0x6f, 0x56, 0x9c, 0x6e,
	0xac, 0xe7, 0x85, 0x6a, 0x63, 0xcb, 0xff, 0x7f, 0x2a, 0xfb, 0xb7, 0xb8, 0x42, 0xaf, 0x0f, 0x5d,
	0x2c, 0xae, 0xd4, 0xc3, 0xc5, 0xfe, 0x3c, 0x2e, 0x42, 0x61, 0x71, 0x87, 0xea, 0x31, 0x94, 0x9a,
	0xba, 0xa9, 0xb8, 0xe4, 0xcb, 0x19, 0x11, 0x12, 0xbd, 0x80, 0x7c, 0x62, 0xc1, 0x7a, 0x37, 0x9d,
	0xe4, 0x49, 0x87, 0x76, 0x17, 0xb0, 0xea, 0x0b, 0x28, 0x27, 0x36, 0x44, 0xcc, 0x22, 0x41, 0xee,
	0xed, 0xde, 0xd5, 0xdf, 0x65, 0x60, 0xef, 0x84, 0xc8, 0xee, 0x2c, 0x94, 0x34, 0xf9, 0xf2, 0x33,
	0xd8, 0x5d, 0x51, 0x12, 0xfa, 0x8d, 0x5c, 0x70, 0x8b, 0x4b, 0x2d, 0x81, 0x7e, 0x01, 0x0f, 0xe2,
	0x45, 0x21, 0x78, 0x63, 0x5d, 0x09, 0x36, 0x92, 0x4f, 0xd7, 0x3b, 0x53, 0xaa, 0x5c, 0x5c, 0x27,
	0x5e, 0xe3, 0x54, 0xff, 0x94, 0x01, 0x67, 0x79, 0x04, 0x7b, 0xf0, 0x2e, 0x14, 0x12, 0x33, 0xc2,
	0x3e, 0xfc, 0x9f, 0xaf, 0x8d, 0xbd, 0xb4, 0xc6, 0xc2, 0x1f, 0x4d, 0x95, 0xd7, 0x34, 0x22, 0xdc,
	0x5d, 0x5a, 0x38, 0x78, 0x09, 0x0f, 0x6e, 0xc8, 0xff, 0x17, 0x0f, 0xff, 0x1a, 0x4a, 0xa6, 0x0e,
	0x12, 0x5f, 0xdd, 0x3b, 0x1e, 0x3b, 0xf0, 0xc0, 0xb4, 0xfd, 0x65, 0xbe, 0x9a, 0x3f, 0xeb, 0x8a,
	0xf5, 0x27, 0xa9, 0xaf, 0xad, 0xd5, 0x97, 0xeb, 0xcc, 0xd2, 0x0c, 0x51, 0xff, 0x5b, 0x06, 0xf6,
	0x92, 0x33, 0xf5, 0xcd, 0xa6, 0x8d, 0x1a, 0x90, 0x33, 0x21, 0x47, 0x07, 0xe9, 0x15, 0x76, 0x35,
	0x97, 0x0e, 0x1e, 0xdf, 0x2a, 0xb3, 0xae, 0x3e, 0x81, 0x7c, 0xe2, 0x4c, 0xf4, 0xe4, 0x1b, 0x7c,
	0x6c, 0xcc, 0x3c, 0xbd, 0x33, 0x02, 0xe8, 0xc7, 0x90, 0x33, 0x97, 0x58, 0x3b, 0x4b, 0xca, 0x63,
	0x07, 0x8f, 0x6e, 0x4c, 0xc8, 0xf6, 0x34, 0x96, 0xf3, 0xe3, 0xef, 0x40, 0xc5, 0x67, 0xd3, 0xda,
	0x6b, 0x12, 0x05, 0x58, 0x48, 0xbc, 0x6a, 0xe1, 0xb8, 0x9c, 0x5c, 0xbb, 0xa7, 0x74, 0xc4, 0x28,
	0xa7, 0x75, 0xbf, 0xff, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x0c, 0xd1, 0x54, 0x0b, 0x16,
	0x00, 0x00,
}
