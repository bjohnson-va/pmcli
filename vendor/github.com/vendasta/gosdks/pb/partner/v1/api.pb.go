// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package partner_v1 is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	URL
	Branding
	GetBrandingRequest
	GetBrandingResponse
*/
package partner_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Branding_UITheme int32

const (
	Branding_Dark  Branding_UITheme = 0
	Branding_Light Branding_UITheme = 1
)

var Branding_UITheme_name = map[int32]string{
	0: "Dark",
	1: "Light",
}
var Branding_UITheme_value = map[string]int32{
	"Dark":  0,
	"Light": 1,
}

func (x Branding_UITheme) String() string {
	return proto.EnumName(Branding_UITheme_name, int32(x))
}
func (Branding_UITheme) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// URL stores both secure/insecure versions of a URL
type URL struct {
	Secure   string `protobuf:"bytes,1,opt,name=secure" json:"secure,omitempty"`
	Insecure string `protobuf:"bytes,2,opt,name=insecure" json:"insecure,omitempty"`
}

func (m *URL) Reset()                    { *m = URL{} }
func (m *URL) String() string            { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()               {}
func (*URL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *URL) GetSecure() string {
	if m != nil {
		return m.Secure
	}
	return ""
}

func (m *URL) GetInsecure() string {
	if m != nil {
		return m.Insecure
	}
	return ""
}

// Branding contains the major visual data for a branded partner/market context
type Branding struct {
	// Major theme of the UI -- Dark/Light
	UiTheme Branding_UITheme `protobuf:"varint,1,opt,name=ui_theme,json=uiTheme,enum=partner.v1.Branding_UITheme" json:"ui_theme,omitempty"`
	// Primary Color
	PrimaryColor string `protobuf:"bytes,2,opt,name=primary_color,json=primaryColor" json:"primary_color,omitempty"`
	// Assets such as logos and icons
	Assets *Branding_Assets `protobuf:"bytes,3,opt,name=assets" json:"assets,omitempty"`
	// Application branding information
	Apps map[string]*Branding_App `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Branding) Reset()                    { *m = Branding{} }
func (m *Branding) String() string            { return proto.CompactTextString(m) }
func (*Branding) ProtoMessage()               {}
func (*Branding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Branding) GetUiTheme() Branding_UITheme {
	if m != nil {
		return m.UiTheme
	}
	return Branding_Dark
}

func (m *Branding) GetPrimaryColor() string {
	if m != nil {
		return m.PrimaryColor
	}
	return ""
}

func (m *Branding) GetAssets() *Branding_Assets {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *Branding) GetApps() map[string]*Branding_App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type Branding_Assets struct {
	// Favicon is the small icon that will appear in browser tabs
	FaviconUrl *URL `protobuf:"bytes,1,opt,name=favicon_url,json=faviconUrl" json:"favicon_url,omitempty"`
	// Shortut Icon is a mid-size icon that will appear in other browsing contexts, such as when the page is added to homescreen
	ShortcutIconUrl *URL `protobuf:"bytes,3,opt,name=shortcut_icon_url,json=shortcutIconUrl" json:"shortcut_icon_url,omitempty"`
	// Logo is the image that will be used to brand the platform within pages
	LogoUrl *URL `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
}

func (m *Branding_Assets) Reset()                    { *m = Branding_Assets{} }
func (m *Branding_Assets) String() string            { return proto.CompactTextString(m) }
func (*Branding_Assets) ProtoMessage()               {}
func (*Branding_Assets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Branding_Assets) GetFaviconUrl() *URL {
	if m != nil {
		return m.FaviconUrl
	}
	return nil
}

func (m *Branding_Assets) GetShortcutIconUrl() *URL {
	if m != nil {
		return m.ShortcutIconUrl
	}
	return nil
}

func (m *Branding_Assets) GetLogoUrl() *URL {
	if m != nil {
		return m.LogoUrl
	}
	return nil
}

type Branding_App struct {
	// The whitelabeled name of the application
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Branding_App) Reset()                    { *m = Branding_App{} }
func (m *Branding_App) String() string            { return proto.CompactTextString(m) }
func (*Branding_App) ProtoMessage()               {}
func (*Branding_App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *Branding_App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetBrandingRequest struct {
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	MarketId  string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *GetBrandingRequest) Reset()                    { *m = GetBrandingRequest{} }
func (m *GetBrandingRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBrandingRequest) ProtoMessage()               {}
func (*GetBrandingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetBrandingRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *GetBrandingRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type GetBrandingResponse struct {
	Branding *Branding `protobuf:"bytes,1,opt,name=branding" json:"branding,omitempty"`
}

func (m *GetBrandingResponse) Reset()                    { *m = GetBrandingResponse{} }
func (m *GetBrandingResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBrandingResponse) ProtoMessage()               {}
func (*GetBrandingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetBrandingResponse) GetBranding() *Branding {
	if m != nil {
		return m.Branding
	}
	return nil
}

func init() {
	proto.RegisterType((*URL)(nil), "partner.v1.URL")
	proto.RegisterType((*Branding)(nil), "partner.v1.Branding")
	proto.RegisterType((*Branding_Assets)(nil), "partner.v1.Branding.Assets")
	proto.RegisterType((*Branding_App)(nil), "partner.v1.Branding.App")
	proto.RegisterType((*GetBrandingRequest)(nil), "partner.v1.GetBrandingRequest")
	proto.RegisterType((*GetBrandingResponse)(nil), "partner.v1.GetBrandingResponse")
	proto.RegisterEnum("partner.v1.Branding_UITheme", Branding_UITheme_name, Branding_UITheme_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Whitelabel service

type WhitelabelClient interface {
	// Gets the branding for a partner/market brand context
	GetBranding(ctx context.Context, in *GetBrandingRequest, opts ...grpc.CallOption) (*GetBrandingResponse, error)
}

type whitelabelClient struct {
	cc *grpc.ClientConn
}

func NewWhitelabelClient(cc *grpc.ClientConn) WhitelabelClient {
	return &whitelabelClient{cc}
}

func (c *whitelabelClient) GetBranding(ctx context.Context, in *GetBrandingRequest, opts ...grpc.CallOption) (*GetBrandingResponse, error) {
	out := new(GetBrandingResponse)
	err := grpc.Invoke(ctx, "/partner.v1.Whitelabel/GetBranding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Whitelabel service

type WhitelabelServer interface {
	// Gets the branding for a partner/market brand context
	GetBranding(context.Context, *GetBrandingRequest) (*GetBrandingResponse, error)
}

func RegisterWhitelabelServer(s *grpc.Server, srv WhitelabelServer) {
	s.RegisterService(&_Whitelabel_serviceDesc, srv)
}

func _Whitelabel_GetBranding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhitelabelServer).GetBranding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.v1.Whitelabel/GetBranding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhitelabelServer).GetBranding(ctx, req.(*GetBrandingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Whitelabel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "partner.v1.Whitelabel",
	HandlerType: (*WhitelabelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBranding",
			Handler:    _Whitelabel_GetBranding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x63, 0x37, 0xb1, 0xc7, 0x40, 0xc3, 0x80, 0x50, 0x70, 0xa1, 0x44, 0xe6, 0x12, 0x71,
	0xb0, 0x8a, 0x7b, 0xe0, 0xeb, 0x54, 0x3e, 0x54, 0x45, 0xca, 0xa1, 0xac, 0xb0, 0xb8, 0x61, 0x6d,
	0x92, 0x25, 0x59, 0xc5, 0xb1, 0x97, 0xdd, 0x75, 0xa4, 0xfc, 0x00, 0x7e, 0x09, 0x7f, 0x14, 0xd9,
	0x5e, 0x87, 0x56, 0xb8, 0xb7, 0xd9, 0x37, 0xef, 0xbd, 0x99, 0xf1, 0x8c, 0xc1, 0xa3, 0x82, 0x47,
	0x42, 0x16, 0xba, 0x40, 0x10, 0x54, 0xea, 0x9c, 0xc9, 0x68, 0xf7, 0x3a, 0x7c, 0x07, 0x76, 0x42,
	0x66, 0xf8, 0x04, 0xfa, 0x8a, 0x2d, 0x4a, 0xc9, 0x46, 0xd6, 0xd8, 0x9a, 0x78, 0xc4, 0xbc, 0x30,
	0x00, 0x97, 0xe7, 0x26, 0xd3, 0xab, 0x33, 0x87, 0x77, 0xf8, 0xdb, 0x01, 0xf7, 0xa3, 0xa4, 0xf9,
	0x92, 0xe7, 0x2b, 0x7c, 0x03, 0x6e, 0xc9, 0x53, 0xbd, 0x66, 0xdb, 0xc6, 0xe2, 0x41, 0xfc, 0x2c,
	0xfa, 0x57, 0x26, 0x6a, 0x79, 0x51, 0x32, 0xfd, 0x56, 0x71, 0xc8, 0xa0, 0xe4, 0x75, 0x80, 0x2f,
	0xe1, 0xbe, 0x90, 0x7c, 0x4b, 0xe5, 0x3e, 0x5d, 0x14, 0x59, 0x21, 0x4d, 0x99, 0x7b, 0x06, 0xfc,
	0x54, 0x61, 0x78, 0x01, 0x7d, 0xaa, 0x14, 0xd3, 0x6a, 0x64, 0x8f, 0xad, 0x89, 0x1f, 0x9f, 0x76,
	0x7a, 0x5f, 0xd6, 0x14, 0x62, 0xa8, 0x18, 0x83, 0x43, 0x85, 0x50, 0x23, 0x67, 0x6c, 0x4f, 0xfc,
	0xf8, 0xac, 0x5b, 0x22, 0x84, 0xfa, 0x92, 0x6b, 0xb9, 0x27, 0x35, 0x37, 0xf8, 0x63, 0x41, 0xbf,
	0xb1, 0xc1, 0x73, 0xf0, 0x7f, 0xd2, 0x1d, 0x5f, 0x14, 0x79, 0x5a, 0xca, 0xac, 0x1e, 0xca, 0x8f,
	0x4f, 0x6e, 0xba, 0x24, 0x64, 0x46, 0xc0, 0x70, 0x12, 0x99, 0xe1, 0x07, 0x78, 0xa8, 0xd6, 0x85,
	0xd4, 0x8b, 0x52, 0xa7, 0x07, 0x9d, 0xdd, 0xad, 0x3b, 0x69, 0x99, 0x53, 0x23, 0x7e, 0x05, 0x6e,
	0x56, 0xac, 0x8a, 0x5a, 0xd3, 0xeb, 0xd6, 0x0c, 0x2a, 0x42, 0x22, 0xb3, 0xe0, 0x29, 0xd8, 0x97,
	0x42, 0x20, 0x82, 0x93, 0xd3, 0x6d, 0xbb, 0x98, 0x3a, 0x0e, 0xbe, 0x82, 0x77, 0x98, 0x09, 0x87,
	0x60, 0x6f, 0xd8, 0xde, 0xac, 0xb4, 0x0a, 0x31, 0x82, 0xe3, 0x1d, 0xcd, 0x4a, 0x66, 0x4a, 0x8c,
	0xee, 0xfa, 0x28, 0xa4, 0xa1, 0xbd, 0xef, 0xbd, 0xb5, 0xc2, 0x33, 0x18, 0x98, 0xad, 0xa1, 0x0b,
	0xce, 0x67, 0x2a, 0x37, 0xc3, 0x23, 0xf4, 0xe0, 0x78, 0xc6, 0x57, 0x6b, 0x3d, 0xb4, 0xc2, 0x6b,
	0xc0, 0x2b, 0xa6, 0x5b, 0x35, 0x61, 0xbf, 0x4a, 0xa6, 0x34, 0x3e, 0x87, 0xf6, 0xcc, 0x52, 0xbe,
	0x34, 0x2d, 0x78, 0x06, 0x99, 0x2e, 0xf1, 0x14, 0xbc, 0x2d, 0x95, 0x1b, 0xa6, 0xab, 0xac, 0xb9,
	0xac, 0x06, 0x98, 0x2e, 0xc3, 0x2b, 0x78, 0x74, 0xcb, 0x51, 0x89, 0x22, 0x57, 0x0c, 0xcf, 0xc1,
	0x9d, 0x1b, 0xcc, 0xac, 0xe3, 0x71, 0x57, 0xff, 0xe4, 0xc0, 0x8a, 0x7f, 0x00, 0x7c, 0x5f, 0x73,
	0xcd, 0x32, 0x3a, 0x67, 0x19, 0x5e, 0x83, 0x7f, 0xc3, 0x16, 0x6f, 0x5d, 0xc4, 0xff, 0x13, 0x04,
	0x2f, 0xee, 0xcc, 0x37, 0xfd, 0x84, 0x47, 0xf3, 0x7e, 0xfd, 0x43, 0x5d, 0xfc, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0xfb, 0x53, 0x83, 0x5d, 0x03, 0x00, 0x00,
}
