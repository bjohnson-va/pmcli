// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketplace_apps/v1/api.proto

package marketplaceapps_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CreateAddonRequest is issued to create a new addon for an app
type CreateAddonRequest struct {
	// The ID of the app that the addon will be created for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// The wholesale price the addon will be created with, in cents
	Price int64 `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	// The title the addon will be created with
	Title string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	// A short description of the features the addon will provide
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// Order form fields
	OrderForm *OrderForm `protobuf:"bytes,6,opt,name=order_form,json=orderForm" json:"order_form,omitempty"`
	// Indicates if the order form should be used during addon activation
	UsesOrderForm bool `protobuf:"varint,7,opt,name=uses_order_form,json=usesOrderForm" json:"uses_order_form,omitempty"`
	// Addon billing_frequency
	BillingFrequency string `protobuf:"bytes,8,opt,name=billing_frequency,json=billingFrequency" json:"billing_frequency,omitempty"`
	// Addon service_model
	ServiceModel []string `protobuf:"bytes,9,rep,name=service_model,json=serviceModel" json:"service_model,omitempty"`
	// A tagline for an addon
	Tagline string `protobuf:"bytes,10,opt,name=tagline" json:"tagline,omitempty"`
	// Icon url for the addon
	Icon string `protobuf:"bytes,11,opt,name=icon" json:"icon,omitempty"`
	// The banner image of an addon
	BannerImage string `protobuf:"bytes,12,opt,name=banner_image,json=bannerImage" json:"banner_image,omitempty"`
	// Reseller marketing information
	ResellerMarketing *MarketingInformation `protobuf:"bytes,13,opt,name=reseller_marketing,json=resellerMarketing" json:"reseller_marketing,omitempty"`
	// End user marketing information
	EndUserMarketing *MarketingInformation `protobuf:"bytes,14,opt,name=end_user_marketing,json=endUserMarketing" json:"end_user_marketing,omitempty"`
	// Is the addon discoverable within marketplace
	Discoverable bool `protobuf:"varint,15,opt,name=discoverable" json:"discoverable,omitempty"`
	// A list of screenshots for an addon
	Screenshots []string `protobuf:"bytes,16,rep,name=screenshots" json:"screenshots,omitempty"`
	// Can the addon be activated multiple times
	MultipleActivations bool `protobuf:"varint,17,opt,name=multiple_activations,json=multipleActivations" json:"multiple_activations,omitempty"`
	// List of restrictions for the addon
	Restrictions *Restrictions `protobuf:"bytes,18,opt,name=restrictions" json:"restrictions,omitempty"`
}

func (m *CreateAddonRequest) Reset()                    { *m = CreateAddonRequest{} }
func (m *CreateAddonRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAddonRequest) ProtoMessage()               {}
func (*CreateAddonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateAddonRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateAddonRequest) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CreateAddonRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateAddonRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateAddonRequest) GetOrderForm() *OrderForm {
	if m != nil {
		return m.OrderForm
	}
	return nil
}

func (m *CreateAddonRequest) GetUsesOrderForm() bool {
	if m != nil {
		return m.UsesOrderForm
	}
	return false
}

func (m *CreateAddonRequest) GetBillingFrequency() string {
	if m != nil {
		return m.BillingFrequency
	}
	return ""
}

func (m *CreateAddonRequest) GetServiceModel() []string {
	if m != nil {
		return m.ServiceModel
	}
	return nil
}

func (m *CreateAddonRequest) GetTagline() string {
	if m != nil {
		return m.Tagline
	}
	return ""
}

func (m *CreateAddonRequest) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CreateAddonRequest) GetBannerImage() string {
	if m != nil {
		return m.BannerImage
	}
	return ""
}

func (m *CreateAddonRequest) GetResellerMarketing() *MarketingInformation {
	if m != nil {
		return m.ResellerMarketing
	}
	return nil
}

func (m *CreateAddonRequest) GetEndUserMarketing() *MarketingInformation {
	if m != nil {
		return m.EndUserMarketing
	}
	return nil
}

func (m *CreateAddonRequest) GetDiscoverable() bool {
	if m != nil {
		return m.Discoverable
	}
	return false
}

func (m *CreateAddonRequest) GetScreenshots() []string {
	if m != nil {
		return m.Screenshots
	}
	return nil
}

func (m *CreateAddonRequest) GetMultipleActivations() bool {
	if m != nil {
		return m.MultipleActivations
	}
	return false
}

func (m *CreateAddonRequest) GetRestrictions() *Restrictions {
	if m != nil {
		return m.Restrictions
	}
	return nil
}

// UpdateAddonRequest is issued to update an existing addon for an app
type UpdateAddonRequest struct {
	// The ID of the app that the addon will be updated for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// The ID of the addon
	AddonId string `protobuf:"bytes,2,opt,name=addon_id,json=addonId" json:"addon_id,omitempty"`
	// The wholesale price the addon will be created with, in cents
	Price int64 `protobuf:"varint,20,opt,name=price" json:"price,omitempty"`
	// The title the addon will be created with
	Title string `protobuf:"bytes,21,opt,name=title" json:"title,omitempty"`
	// A short description of the features the addon will provide
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Order form fields
	OrderForm *OrderForm `protobuf:"bytes,4,opt,name=order_form,json=orderForm" json:"order_form,omitempty"`
	// Indicates if the order form should be used during addon activation
	UsesOrderForm bool `protobuf:"varint,5,opt,name=uses_order_form,json=usesOrderForm" json:"uses_order_form,omitempty"`
	// Addon billing_frequency
	BillingFrequency string `protobuf:"bytes,8,opt,name=billing_frequency,json=billingFrequency" json:"billing_frequency,omitempty"`
	// Addon service_model
	ServiceModel []string `protobuf:"bytes,9,rep,name=service_model,json=serviceModel" json:"service_model,omitempty"`
	// A tagline for an addon
	Tagline string `protobuf:"bytes,10,opt,name=tagline" json:"tagline,omitempty"`
	// Icon url for the addon
	Icon string `protobuf:"bytes,11,opt,name=icon" json:"icon,omitempty"`
	// The banner image of an addon
	BannerImage string `protobuf:"bytes,12,opt,name=banner_image,json=bannerImage" json:"banner_image,omitempty"`
	// Reseller marketing information
	ResellerMarketing *MarketingInformation `protobuf:"bytes,13,opt,name=reseller_marketing,json=resellerMarketing" json:"reseller_marketing,omitempty"`
	// End user marketing information
	EndUserMarketing *MarketingInformation `protobuf:"bytes,14,opt,name=end_user_marketing,json=endUserMarketing" json:"end_user_marketing,omitempty"`
	// Is the addon discoverable within marketplace
	Discoverable bool `protobuf:"varint,17,opt,name=discoverable" json:"discoverable,omitempty"`
	// A list of screenshots for an addon
	Screenshots []string `protobuf:"bytes,18,rep,name=screenshots" json:"screenshots,omitempty"`
	// Can the addon be activated multiple times
	MultipleActivations bool `protobuf:"varint,19,opt,name=multiple_activations,json=multipleActivations" json:"multiple_activations,omitempty"`
	// List of restrictions for the addon
	Restrictions *Restrictions `protobuf:"bytes,22,opt,name=restrictions" json:"restrictions,omitempty"`
}

func (m *UpdateAddonRequest) Reset()                    { *m = UpdateAddonRequest{} }
func (m *UpdateAddonRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAddonRequest) ProtoMessage()               {}
func (*UpdateAddonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *UpdateAddonRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateAddonRequest) GetAddonId() string {
	if m != nil {
		return m.AddonId
	}
	return ""
}

func (m *UpdateAddonRequest) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *UpdateAddonRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateAddonRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateAddonRequest) GetOrderForm() *OrderForm {
	if m != nil {
		return m.OrderForm
	}
	return nil
}

func (m *UpdateAddonRequest) GetUsesOrderForm() bool {
	if m != nil {
		return m.UsesOrderForm
	}
	return false
}

func (m *UpdateAddonRequest) GetBillingFrequency() string {
	if m != nil {
		return m.BillingFrequency
	}
	return ""
}

func (m *UpdateAddonRequest) GetServiceModel() []string {
	if m != nil {
		return m.ServiceModel
	}
	return nil
}

func (m *UpdateAddonRequest) GetTagline() string {
	if m != nil {
		return m.Tagline
	}
	return ""
}

func (m *UpdateAddonRequest) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *UpdateAddonRequest) GetBannerImage() string {
	if m != nil {
		return m.BannerImage
	}
	return ""
}

func (m *UpdateAddonRequest) GetResellerMarketing() *MarketingInformation {
	if m != nil {
		return m.ResellerMarketing
	}
	return nil
}

func (m *UpdateAddonRequest) GetEndUserMarketing() *MarketingInformation {
	if m != nil {
		return m.EndUserMarketing
	}
	return nil
}

func (m *UpdateAddonRequest) GetDiscoverable() bool {
	if m != nil {
		return m.Discoverable
	}
	return false
}

func (m *UpdateAddonRequest) GetScreenshots() []string {
	if m != nil {
		return m.Screenshots
	}
	return nil
}

func (m *UpdateAddonRequest) GetMultipleActivations() bool {
	if m != nil {
		return m.MultipleActivations
	}
	return false
}

func (m *UpdateAddonRequest) GetRestrictions() *Restrictions {
	if m != nil {
		return m.Restrictions
	}
	return nil
}

// ApproveAddonRequest is issued to change the approved boolean of an addon to be true
type ApproveAddonRequest struct {
	// The ID of the app that the addon will be updated for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// The ID of the addon
	AddonId string `protobuf:"bytes,2,opt,name=addon_id,json=addonId" json:"addon_id,omitempty"`
}

func (m *ApproveAddonRequest) Reset()                    { *m = ApproveAddonRequest{} }
func (m *ApproveAddonRequest) String() string            { return proto.CompactTextString(m) }
func (*ApproveAddonRequest) ProtoMessage()               {}
func (*ApproveAddonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ApproveAddonRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ApproveAddonRequest) GetAddonId() string {
	if m != nil {
		return m.AddonId
	}
	return ""
}

// UnapproveAddonRequest is issued to change the approved boolean of an addon to be false
type UnapproveAddonRequest struct {
	// The ID of the app that the addon will be updated for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// The ID of the addon
	AddonId string `protobuf:"bytes,2,opt,name=addon_id,json=addonId" json:"addon_id,omitempty"`
}

func (m *UnapproveAddonRequest) Reset()                    { *m = UnapproveAddonRequest{} }
func (m *UnapproveAddonRequest) String() string            { return proto.CompactTextString(m) }
func (*UnapproveAddonRequest) ProtoMessage()               {}
func (*UnapproveAddonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *UnapproveAddonRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UnapproveAddonRequest) GetAddonId() string {
	if m != nil {
		return m.AddonId
	}
	return ""
}

// ListApprovedAddonsRequest is issued to get multiple addons for a product.
type ListApprovedAddonsRequest struct {
	// The ID of the app to get addons for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// cursor should be supplied from the last response to load the next results
	Cursor string `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
	// the number of results to retrieve, max size and default is 100.
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// list of app_ids to obtain addons for
	AppIds []string `protobuf:"bytes,4,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
}

func (m *ListApprovedAddonsRequest) Reset()                    { *m = ListApprovedAddonsRequest{} }
func (m *ListApprovedAddonsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListApprovedAddonsRequest) ProtoMessage()               {}
func (*ListApprovedAddonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ListApprovedAddonsRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ListApprovedAddonsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListApprovedAddonsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListApprovedAddonsRequest) GetAppIds() []string {
	if m != nil {
		return m.AppIds
	}
	return nil
}

// Response message for requests that return a single addon
type AddonResponse struct {
	Addon *Addon `protobuf:"bytes,1,opt,name=addon" json:"addon,omitempty"`
}

func (m *AddonResponse) Reset()                    { *m = AddonResponse{} }
func (m *AddonResponse) String() string            { return proto.CompactTextString(m) }
func (*AddonResponse) ProtoMessage()               {}
func (*AddonResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *AddonResponse) GetAddon() *Addon {
	if m != nil {
		return m.Addon
	}
	return nil
}

// ListAddonsRequest is issued to get multiple addons for a product.
type ListAddonsRequest struct {
	// The ID of the app to get addons for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// cursor should be supplied from the last response to load the next results
	Cursor string `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
	// the number of results to retrieve, max size and default is 100.
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *ListAddonsRequest) Reset()                    { *m = ListAddonsRequest{} }
func (m *ListAddonsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAddonsRequest) ProtoMessage()               {}
func (*ListAddonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ListAddonsRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ListAddonsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListAddonsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// Response message for a request that returns multiple addons
type AddonsListResponse struct {
	// A list of addons
	Addons []*Addon `protobuf:"bytes,1,rep,name=addons" json:"addons,omitempty"`
	// The cursor to send with the next request if there are more results to be loaded
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Indicates whether or not there are more results to be loaded
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *AddonsListResponse) Reset()                    { *m = AddonsListResponse{} }
func (m *AddonsListResponse) String() string            { return proto.CompactTextString(m) }
func (*AddonsListResponse) ProtoMessage()               {}
func (*AddonsListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *AddonsListResponse) GetAddons() []*Addon {
	if m != nil {
		return m.Addons
	}
	return nil
}

func (m *AddonsListResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *AddonsListResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// GetAddonRequest is issued to get a single specific addon
type GetAddonRequest struct {
	// The ID of the app the addon is for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// The ID of the addon
	AddonId string `protobuf:"bytes,2,opt,name=addon_id,json=addonId" json:"addon_id,omitempty"`
}

func (m *GetAddonRequest) Reset()                    { *m = GetAddonRequest{} }
func (m *GetAddonRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAddonRequest) ProtoMessage()               {}
func (*GetAddonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GetAddonRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GetAddonRequest) GetAddonId() string {
	if m != nil {
		return m.AddonId
	}
	return ""
}

// DeleteAddonRequest is issued to delete a specific addon
// This is a soft delete
type DeleteAddonRequest struct {
	// The ID of the app the addon is for
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// The ID of the addon
	AddonId string `protobuf:"bytes,2,opt,name=addon_id,json=addonId" json:"addon_id,omitempty"`
}

func (m *DeleteAddonRequest) Reset()                    { *m = DeleteAddonRequest{} }
func (m *DeleteAddonRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAddonRequest) ProtoMessage()               {}
func (*DeleteAddonRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *DeleteAddonRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *DeleteAddonRequest) GetAddonId() string {
	if m != nil {
		return m.AddonId
	}
	return ""
}

// GetPublicKeysRequest
type GetPublicKeysRequest struct {
	// The ID of the app the to get the public keys for.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *GetPublicKeysRequest) Reset()                    { *m = GetPublicKeysRequest{} }
func (m *GetPublicKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeysRequest) ProtoMessage()               {}
func (*GetPublicKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *GetPublicKeysRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// GetPublicKeysResponse
type GetPublicKeysResponse struct {
	// The default public key for the app.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	// The identified public keys for the app.
	IdentifiedPublicKeys []*IdentifiedPublicKey `protobuf:"bytes,2,rep,name=identified_public_keys,json=identifiedPublicKeys" json:"identified_public_keys,omitempty"`
}

func (m *GetPublicKeysResponse) Reset()                    { *m = GetPublicKeysResponse{} }
func (m *GetPublicKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeysResponse) ProtoMessage()               {}
func (*GetPublicKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GetPublicKeysResponse) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *GetPublicKeysResponse) GetIdentifiedPublicKeys() []*IdentifiedPublicKey {
	if m != nil {
		return m.IdentifiedPublicKeys
	}
	return nil
}

// GetSSOUrlsRequest
type GetSSOUrlsRequest struct {
	// The ID of the app the to get the SSO urls for.
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *GetSSOUrlsRequest) Reset()                    { *m = GetSSOUrlsRequest{} }
func (m *GetSSOUrlsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSSOUrlsRequest) ProtoMessage()               {}
func (*GetSSOUrlsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *GetSSOUrlsRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// GetSSOUrlsResponse
type GetSSOUrlsResponse struct {
	// The entry URL of the app.
	EntryUrl string `protobuf:"bytes,1,opt,name=entry_url,json=entryUrl" json:"entry_url,omitempty"`
	// The session transfer URL of the app.
	SessionUrl string `protobuf:"bytes,2,opt,name=session_url,json=sessionUrl" json:"session_url,omitempty"`
}

func (m *GetSSOUrlsResponse) Reset()                    { *m = GetSSOUrlsResponse{} }
func (m *GetSSOUrlsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSSOUrlsResponse) ProtoMessage()               {}
func (*GetSSOUrlsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GetSSOUrlsResponse) GetEntryUrl() string {
	if m != nil {
		return m.EntryUrl
	}
	return ""
}

func (m *GetSSOUrlsResponse) GetSessionUrl() string {
	if m != nil {
		return m.SessionUrl
	}
	return ""
}

// GetAppRequest
type GetAppRequest struct {
	// The ID of the app
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *GetAppRequest) Reset()                    { *m = GetAppRequest{} }
func (m *GetAppRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAppRequest) ProtoMessage()               {}
func (*GetAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *GetAppRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// GetAppResponse
type GetAppResponse struct {
	// The requested marketplace app
	App *MarketplaceApp `protobuf:"bytes,1,opt,name=app" json:"app,omitempty"`
}

func (m *GetAppResponse) Reset()                    { *m = GetAppResponse{} }
func (m *GetAppResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAppResponse) ProtoMessage()               {}
func (*GetAppResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *GetAppResponse) GetApp() *MarketplaceApp {
	if m != nil {
		return m.App
	}
	return nil
}

type GetMultiOrderFormsRequest struct {
	// The id of the partner
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// A list of requested order forms for given app_ids
	AppIds []string `protobuf:"bytes,2,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
}

func (m *GetMultiOrderFormsRequest) Reset()                    { *m = GetMultiOrderFormsRequest{} }
func (m *GetMultiOrderFormsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMultiOrderFormsRequest) ProtoMessage()               {}
func (*GetMultiOrderFormsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *GetMultiOrderFormsRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *GetMultiOrderFormsRequest) GetAppIds() []string {
	if m != nil {
		return m.AppIds
	}
	return nil
}

type GetMultiOrderFormsResponse struct {
	// A list of order forms with associated app_ids
	OrderFormContainer []*GetMultiOrderFormsResponse_OrderFormContainer `protobuf:"bytes,1,rep,name=order_form_container,json=orderFormContainer" json:"order_form_container,omitempty"`
}

func (m *GetMultiOrderFormsResponse) Reset()                    { *m = GetMultiOrderFormsResponse{} }
func (m *GetMultiOrderFormsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMultiOrderFormsResponse) ProtoMessage()               {}
func (*GetMultiOrderFormsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GetMultiOrderFormsResponse) GetOrderFormContainer() []*GetMultiOrderFormsResponse_OrderFormContainer {
	if m != nil {
		return m.OrderFormContainer
	}
	return nil
}

// An order form container to associate an order form with a app_id
type GetMultiOrderFormsResponse_OrderFormContainer struct {
	AppId     string     `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	OrderForm *OrderForm `protobuf:"bytes,2,opt,name=order_form,json=orderForm" json:"order_form,omitempty"`
}

func (m *GetMultiOrderFormsResponse_OrderFormContainer) Reset() {
	*m = GetMultiOrderFormsResponse_OrderFormContainer{}
}
func (m *GetMultiOrderFormsResponse_OrderFormContainer) String() string {
	return proto.CompactTextString(m)
}
func (*GetMultiOrderFormsResponse_OrderFormContainer) ProtoMessage() {}
func (*GetMultiOrderFormsResponse_OrderFormContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{17, 0}
}

func (m *GetMultiOrderFormsResponse_OrderFormContainer) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GetMultiOrderFormsResponse_OrderFormContainer) GetOrderForm() *OrderForm {
	if m != nil {
		return m.OrderForm
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateAddonRequest)(nil), "marketplaceapps.v1.CreateAddonRequest")
	proto.RegisterType((*UpdateAddonRequest)(nil), "marketplaceapps.v1.UpdateAddonRequest")
	proto.RegisterType((*ApproveAddonRequest)(nil), "marketplaceapps.v1.ApproveAddonRequest")
	proto.RegisterType((*UnapproveAddonRequest)(nil), "marketplaceapps.v1.UnapproveAddonRequest")
	proto.RegisterType((*ListApprovedAddonsRequest)(nil), "marketplaceapps.v1.ListApprovedAddonsRequest")
	proto.RegisterType((*AddonResponse)(nil), "marketplaceapps.v1.AddonResponse")
	proto.RegisterType((*ListAddonsRequest)(nil), "marketplaceapps.v1.ListAddonsRequest")
	proto.RegisterType((*AddonsListResponse)(nil), "marketplaceapps.v1.AddonsListResponse")
	proto.RegisterType((*GetAddonRequest)(nil), "marketplaceapps.v1.GetAddonRequest")
	proto.RegisterType((*DeleteAddonRequest)(nil), "marketplaceapps.v1.DeleteAddonRequest")
	proto.RegisterType((*GetPublicKeysRequest)(nil), "marketplaceapps.v1.GetPublicKeysRequest")
	proto.RegisterType((*GetPublicKeysResponse)(nil), "marketplaceapps.v1.GetPublicKeysResponse")
	proto.RegisterType((*GetSSOUrlsRequest)(nil), "marketplaceapps.v1.GetSSOUrlsRequest")
	proto.RegisterType((*GetSSOUrlsResponse)(nil), "marketplaceapps.v1.GetSSOUrlsResponse")
	proto.RegisterType((*GetAppRequest)(nil), "marketplaceapps.v1.GetAppRequest")
	proto.RegisterType((*GetAppResponse)(nil), "marketplaceapps.v1.GetAppResponse")
	proto.RegisterType((*GetMultiOrderFormsRequest)(nil), "marketplaceapps.v1.GetMultiOrderFormsRequest")
	proto.RegisterType((*GetMultiOrderFormsResponse)(nil), "marketplaceapps.v1.GetMultiOrderFormsResponse")
	proto.RegisterType((*GetMultiOrderFormsResponse_OrderFormContainer)(nil), "marketplaceapps.v1.GetMultiOrderFormsResponse.OrderFormContainer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MarketplaceApps service

type MarketplaceAppsClient interface {
	// Created a new addon for the the specified app
	CreateAddon(ctx context.Context, in *CreateAddonRequest, opts ...grpc.CallOption) (*AddonResponse, error)
	// Update an existing addon for the the specified app
	UpdateAddon(ctx context.Context, in *UpdateAddonRequest, opts ...grpc.CallOption) (*AddonResponse, error)
	// Returns a list of addons for the specified app
	ListAddons(ctx context.Context, in *ListAddonsRequest, opts ...grpc.CallOption) (*AddonsListResponse, error)
	// Returns a specific addon for the specified app
	GetAddon(ctx context.Context, in *GetAddonRequest, opts ...grpc.CallOption) (*AddonResponse, error)
	// Deletes the specified addon. This is a soft delete
	DeleteAddon(ctx context.Context, in *DeleteAddonRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get the public keys for the specified app
	GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error)
	// Get the URL's needed to complete the SSO process for the specified app
	GetSSOUrls(ctx context.Context, in *GetSSOUrlsRequest, opts ...grpc.CallOption) (*GetSSOUrlsResponse, error)
	// Get a marketplace app
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	// Get the unpublished version of a marketplace app
	GetAppDraft(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	// Make the addon discoverable in marketplace
	ApproveAddon(ctx context.Context, in *ApproveAddonRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Make the addon not discoverable in marketplace
	UnapproveAddon(ctx context.Context, in *UnapproveAddonRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List approved addons for the specified app
	ListApprovedAddons(ctx context.Context, in *ListApprovedAddonsRequest, opts ...grpc.CallOption) (*AddonsListResponse, error)
	// GetMulti order forms for the given app_ids
	GetMultiOrderForms(ctx context.Context, in *GetMultiOrderFormsRequest, opts ...grpc.CallOption) (*GetMultiOrderFormsResponse, error)
}

type marketplaceAppsClient struct {
	cc *grpc.ClientConn
}

func NewMarketplaceAppsClient(cc *grpc.ClientConn) MarketplaceAppsClient {
	return &marketplaceAppsClient{cc}
}

func (c *marketplaceAppsClient) CreateAddon(ctx context.Context, in *CreateAddonRequest, opts ...grpc.CallOption) (*AddonResponse, error) {
	out := new(AddonResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/CreateAddon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) UpdateAddon(ctx context.Context, in *UpdateAddonRequest, opts ...grpc.CallOption) (*AddonResponse, error) {
	out := new(AddonResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/UpdateAddon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) ListAddons(ctx context.Context, in *ListAddonsRequest, opts ...grpc.CallOption) (*AddonsListResponse, error) {
	out := new(AddonsListResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/ListAddons", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) GetAddon(ctx context.Context, in *GetAddonRequest, opts ...grpc.CallOption) (*AddonResponse, error) {
	out := new(AddonResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/GetAddon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) DeleteAddon(ctx context.Context, in *DeleteAddonRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/DeleteAddon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error) {
	out := new(GetPublicKeysResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/GetPublicKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) GetSSOUrls(ctx context.Context, in *GetSSOUrlsRequest, opts ...grpc.CallOption) (*GetSSOUrlsResponse, error) {
	out := new(GetSSOUrlsResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/GetSSOUrls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/GetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) GetAppDraft(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/GetAppDraft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) ApproveAddon(ctx context.Context, in *ApproveAddonRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/ApproveAddon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) UnapproveAddon(ctx context.Context, in *UnapproveAddonRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/UnapproveAddon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) ListApprovedAddons(ctx context.Context, in *ListApprovedAddonsRequest, opts ...grpc.CallOption) (*AddonsListResponse, error) {
	out := new(AddonsListResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/ListApprovedAddons", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceAppsClient) GetMultiOrderForms(ctx context.Context, in *GetMultiOrderFormsRequest, opts ...grpc.CallOption) (*GetMultiOrderFormsResponse, error) {
	out := new(GetMultiOrderFormsResponse)
	err := grpc.Invoke(ctx, "/marketplaceapps.v1.MarketplaceApps/GetMultiOrderForms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MarketplaceApps service

type MarketplaceAppsServer interface {
	// Created a new addon for the the specified app
	CreateAddon(context.Context, *CreateAddonRequest) (*AddonResponse, error)
	// Update an existing addon for the the specified app
	UpdateAddon(context.Context, *UpdateAddonRequest) (*AddonResponse, error)
	// Returns a list of addons for the specified app
	ListAddons(context.Context, *ListAddonsRequest) (*AddonsListResponse, error)
	// Returns a specific addon for the specified app
	GetAddon(context.Context, *GetAddonRequest) (*AddonResponse, error)
	// Deletes the specified addon. This is a soft delete
	DeleteAddon(context.Context, *DeleteAddonRequest) (*google_protobuf1.Empty, error)
	// Get the public keys for the specified app
	GetPublicKeys(context.Context, *GetPublicKeysRequest) (*GetPublicKeysResponse, error)
	// Get the URL's needed to complete the SSO process for the specified app
	GetSSOUrls(context.Context, *GetSSOUrlsRequest) (*GetSSOUrlsResponse, error)
	// Get a marketplace app
	GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error)
	// Get the unpublished version of a marketplace app
	GetAppDraft(context.Context, *GetAppRequest) (*GetAppResponse, error)
	// Make the addon discoverable in marketplace
	ApproveAddon(context.Context, *ApproveAddonRequest) (*google_protobuf1.Empty, error)
	// Make the addon not discoverable in marketplace
	UnapproveAddon(context.Context, *UnapproveAddonRequest) (*google_protobuf1.Empty, error)
	// List approved addons for the specified app
	ListApprovedAddons(context.Context, *ListApprovedAddonsRequest) (*AddonsListResponse, error)
	// GetMulti order forms for the given app_ids
	GetMultiOrderForms(context.Context, *GetMultiOrderFormsRequest) (*GetMultiOrderFormsResponse, error)
}

func RegisterMarketplaceAppsServer(s *grpc.Server, srv MarketplaceAppsServer) {
	s.RegisterService(&_MarketplaceApps_serviceDesc, srv)
}

func _MarketplaceApps_CreateAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).CreateAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/CreateAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).CreateAddon(ctx, req.(*CreateAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_UpdateAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).UpdateAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/UpdateAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).UpdateAddon(ctx, req.(*UpdateAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_ListAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).ListAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/ListAddons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).ListAddons(ctx, req.(*ListAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_GetAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).GetAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/GetAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).GetAddon(ctx, req.(*GetAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_DeleteAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).DeleteAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/DeleteAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).DeleteAddon(ctx, req.(*DeleteAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_GetPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).GetPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/GetPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).GetPublicKeys(ctx, req.(*GetPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_GetSSOUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSOUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).GetSSOUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/GetSSOUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).GetSSOUrls(ctx, req.(*GetSSOUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_GetAppDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).GetAppDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/GetAppDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).GetAppDraft(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_ApproveAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).ApproveAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/ApproveAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).ApproveAddon(ctx, req.(*ApproveAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_UnapproveAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnapproveAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).UnapproveAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/UnapproveAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).UnapproveAddon(ctx, req.(*UnapproveAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_ListApprovedAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovedAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).ListApprovedAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/ListApprovedAddons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).ListApprovedAddons(ctx, req.(*ListApprovedAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceApps_GetMultiOrderForms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiOrderFormsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceAppsServer).GetMultiOrderForms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplaceapps.v1.MarketplaceApps/GetMultiOrderForms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceAppsServer).GetMultiOrderForms(ctx, req.(*GetMultiOrderFormsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketplaceApps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketplaceapps.v1.MarketplaceApps",
	HandlerType: (*MarketplaceAppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAddon",
			Handler:    _MarketplaceApps_CreateAddon_Handler,
		},
		{
			MethodName: "UpdateAddon",
			Handler:    _MarketplaceApps_UpdateAddon_Handler,
		},
		{
			MethodName: "ListAddons",
			Handler:    _MarketplaceApps_ListAddons_Handler,
		},
		{
			MethodName: "GetAddon",
			Handler:    _MarketplaceApps_GetAddon_Handler,
		},
		{
			MethodName: "DeleteAddon",
			Handler:    _MarketplaceApps_DeleteAddon_Handler,
		},
		{
			MethodName: "GetPublicKeys",
			Handler:    _MarketplaceApps_GetPublicKeys_Handler,
		},
		{
			MethodName: "GetSSOUrls",
			Handler:    _MarketplaceApps_GetSSOUrls_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _MarketplaceApps_GetApp_Handler,
		},
		{
			MethodName: "GetAppDraft",
			Handler:    _MarketplaceApps_GetAppDraft_Handler,
		},
		{
			MethodName: "ApproveAddon",
			Handler:    _MarketplaceApps_ApproveAddon_Handler,
		},
		{
			MethodName: "UnapproveAddon",
			Handler:    _MarketplaceApps_UnapproveAddon_Handler,
		},
		{
			MethodName: "ListApprovedAddons",
			Handler:    _MarketplaceApps_ListApprovedAddons_Handler,
		},
		{
			MethodName: "GetMultiOrderForms",
			Handler:    _MarketplaceApps_GetMultiOrderForms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace_apps/v1/api.proto",
}

func init() { proto.RegisterFile("marketplace_apps/v1/api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0xb6, 0xfc, 0x47, 0x96, 0x46, 0x76, 0x1c, 0x6f, 0x64, 0xff, 0x28, 0xe5, 0x17, 0x44, 0x61,
	0x52, 0x57, 0x6d, 0x11, 0x09, 0x4e, 0x7b, 0xec, 0xa1, 0xae, 0x53, 0x1b, 0x42, 0x6b, 0xa4, 0xa1,
	0xab, 0x14, 0x28, 0x10, 0x10, 0x14, 0x39, 0x92, 0x17, 0xa1, 0xc8, 0xed, 0xee, 0x4a, 0xa8, 0x73,
	0x6d, 0x5f, 0xa0, 0x87, 0x3e, 0x58, 0x5f, 0xa6, 0xa7, 0x1e, 0x0a, 0x2e, 0x97, 0x12, 0x15, 0x92,
	0xb6, 0x1c, 0x07, 0xe8, 0xa5, 0x37, 0x72, 0x66, 0xf6, 0xdb, 0xd9, 0x19, 0x7e, 0xdf, 0x0e, 0xe1,
	0xc1, 0xd8, 0xe1, 0x6f, 0x50, 0x32, 0xdf, 0x71, 0xd1, 0x76, 0x18, 0x13, 0xdd, 0xe9, 0x61, 0xd7,
	0x61, 0xb4, 0xc3, 0x78, 0x28, 0x43, 0x42, 0x52, 0xee, 0xc8, 0xdb, 0x99, 0x1e, 0x36, 0xef, 0x8f,
	0xc2, 0x70, 0xe4, 0x63, 0x57, 0x45, 0x0c, 0x26, 0xc3, 0x2e, 0x8e, 0x99, 0xbc, 0x8c, 0x17, 0x34,
	0xff, 0xaf, 0x9d, 0x0e, 0xa3, 0x5d, 0x27, 0x08, 0x42, 0xe9, 0x48, 0x1a, 0x06, 0x42, 0x7b, 0x1f,
	0xe6, 0xee, 0xe6, 0x79, 0x61, 0xa0, 0x03, 0x0a, 0xd2, 0x61, 0xda, 0xfd, 0x24, 0xcf, 0x1d, 0x72,
	0x0f, 0xb9, 0x3d, 0x0c, 0xf9, 0x58, 0x47, 0x1d, 0xe4, 0x45, 0x71, 0x14, 0x92, 0x53, 0x37, 0x95,
	0x8d, 0xf9, 0xd7, 0x06, 0x90, 0x63, 0x8e, 0x8e, 0xc4, 0xa3, 0x28, 0x05, 0x0b, 0x7f, 0x9e, 0xa0,
	0x90, 0x64, 0x0f, 0xca, 0x0e, 0x63, 0x36, 0xf5, 0x8c, 0x52, 0xab, 0xd4, 0xae, 0x5a, 0x1b, 0x0e,
	0x63, 0x3d, 0x8f, 0xd4, 0x61, 0x83, 0x71, 0xea, 0xa2, 0xb1, 0xd6, 0x2a, 0xb5, 0xd7, 0xac, 0xf8,
	0x25, 0xb2, 0x4a, 0x2a, 0x7d, 0x34, 0xd6, 0xe3, 0x58, 0xf5, 0x42, 0x9e, 0x40, 0xcd, 0x43, 0xe1,
	0x72, 0xca, 0xa2, 0xfd, 0x8c, 0x8d, 0xc8, 0xf7, 0xf5, 0xaa, 0x51, 0xb2, 0xd2, 0x66, 0xf2, 0x25,
	0xc0, 0x3c, 0x77, 0xa3, 0xdc, 0x2a, 0xb5, 0x6b, 0xcf, 0x1e, 0x74, 0xb2, 0x15, 0xef, 0xbc, 0x88,
	0xa2, 0x4e, 0x42, 0x3e, 0xb6, 0xaa, 0x61, 0xf2, 0x48, 0x0e, 0x60, 0x67, 0x22, 0x50, 0xd8, 0x29,
	0x88, 0xcd, 0x56, 0xa9, 0x5d, 0xb1, 0xb6, 0x23, 0xf3, 0x6c, 0x09, 0xf9, 0x0c, 0x76, 0x07, 0xd4,
	0xf7, 0x69, 0x30, 0xb2, 0x87, 0x3c, 0x3a, 0x62, 0xe0, 0x5e, 0x1a, 0x15, 0x95, 0xed, 0x5d, 0xed,
	0x38, 0x49, 0xec, 0xe4, 0x31, 0x6c, 0x0b, 0xe4, 0x53, 0xea, 0xa2, 0x3d, 0x0e, 0x3d, 0xf4, 0x8d,
	0x6a, 0x6b, 0xad, 0x5d, 0xb5, 0xb6, 0xb4, 0xf1, 0x2c, 0xb2, 0x11, 0x03, 0x36, 0xa5, 0x33, 0xf2,
	0x69, 0x80, 0x06, 0x28, 0x9c, 0xe4, 0x95, 0x10, 0x58, 0xa7, 0x6e, 0x18, 0x18, 0x35, 0x65, 0x56,
	0xcf, 0xe4, 0x11, 0x6c, 0x0d, 0x9c, 0x20, 0x40, 0x6e, 0xd3, 0xb1, 0x33, 0x42, 0x63, 0x4b, 0xf9,
	0x6a, 0xb1, 0xad, 0x17, 0x99, 0xc8, 0x8f, 0x40, 0x38, 0x0a, 0xf4, 0x7d, 0xe4, 0x76, 0x7c, 0x7c,
	0x1a, 0x8c, 0x8c, 0x6d, 0x55, 0x90, 0x76, 0x5e, 0x41, 0xce, 0x92, 0xa0, 0x5e, 0x10, 0x1d, 0x5c,
	0x7d, 0x63, 0xd6, 0x6e, 0x82, 0x31, 0xf3, 0x92, 0x57, 0x40, 0x30, 0xf0, 0xec, 0x89, 0x58, 0x00,
	0xbe, 0x73, 0x43, 0xe0, 0xbb, 0x18, 0x78, 0x7d, 0x91, 0xc6, 0x35, 0x61, 0xcb, 0xa3, 0xc2, 0x0d,
	0xa7, 0xc8, 0x9d, 0x81, 0x8f, 0xc6, 0x8e, 0x2a, 0xfc, 0x82, 0x8d, 0xb4, 0xa0, 0x26, 0x5c, 0x8e,
	0x18, 0x88, 0x8b, 0x50, 0x0a, 0xe3, 0xae, 0x2a, 0x64, 0xda, 0x44, 0x0e, 0xa1, 0x3e, 0x9e, 0xf8,
	0x92, 0x32, 0x1f, 0x6d, 0xc7, 0x95, 0x74, 0x1a, 0x73, 0xc5, 0xd8, 0x55, 0x68, 0xf7, 0x12, 0xdf,
	0xd1, 0xdc, 0x45, 0x9e, 0xc3, 0x56, 0xfa, 0x43, 0x36, 0x88, 0x3a, 0x4a, 0x2b, 0xef, 0x28, 0x56,
	0x2a, 0xce, 0x5a, 0x58, 0x65, 0xfe, 0x5e, 0x06, 0xd2, 0x67, 0xde, 0x92, 0x1f, 0x7e, 0x03, 0x2a,
	0x8a, 0xa2, 0x91, 0x63, 0x35, 0xee, 0xb7, 0x7a, 0x4f, 0x73, 0xa2, 0x9e, 0xcb, 0x89, 0xbd, 0x2b,
	0x38, 0xb1, 0xb6, 0x0c, 0x27, 0xd6, 0x6f, 0xcf, 0x89, 0x8d, 0xff, 0x38, 0xf1, 0xef, 0x70, 0x62,
	0xf7, 0x7a, 0x4e, 0x90, 0xe5, 0x39, 0x71, 0x6f, 0x79, 0x4e, 0xec, 0xbf, 0x17, 0x27, 0x4e, 0xe1,
	0xde, 0x11, 0x63, 0x3c, 0x9c, 0xde, 0x92, 0x13, 0x66, 0x0f, 0xf6, 0xfa, 0x81, 0xf3, 0x41, 0xa0,
	0x7e, 0x2b, 0x41, 0xe3, 0x3b, 0x2a, 0xa4, 0x4e, 0xcc, 0x53, 0x70, 0x22, 0xc1, 0x6b, 0x2c, 0xe2,
	0x29, 0x2e, 0x69, 0xcc, 0x7d, 0x28, 0xbb, 0x13, 0x2e, 0x42, 0xae, 0x11, 0xf5, 0x1b, 0xb9, 0x0f,
	0x55, 0xe6, 0x8c, 0xd0, 0x16, 0xf4, 0x6d, 0x72, 0x8f, 0x55, 0x22, 0xc3, 0x39, 0x7d, 0x8b, 0xe4,
	0x7f, 0xb0, 0x19, 0xe3, 0x09, 0x63, 0x5d, 0x35, 0xa6, 0xac, 0xc0, 0x84, 0xf9, 0x15, 0x6c, 0xeb,
	0x83, 0x08, 0x16, 0x06, 0x02, 0x49, 0x17, 0x36, 0x54, 0x8a, 0x6a, 0xe3, 0xda, 0xb3, 0x46, 0x5e,
	0xa9, 0xe3, 0x15, 0x71, 0x9c, 0x69, 0xc3, 0xae, 0x3a, 0xc7, 0x42, 0xfe, 0x05, 0xf5, 0x78, 0x9f,
	0xdc, 0xcd, 0x5f, 0x4b, 0x40, 0x62, 0xf4, 0x68, 0x9f, 0x59, 0xa2, 0x87, 0x50, 0x56, 0x09, 0x08,
	0xa3, 0xd4, 0x5a, 0xbb, 0x3a, 0x53, 0x1d, 0x48, 0x1e, 0x42, 0x2d, 0xc0, 0x5f, 0xa4, 0xbd, 0x90,
	0x03, 0x44, 0xa6, 0xe3, 0x38, 0x8f, 0x06, 0x54, 0x2e, 0x1c, 0x61, 0x8f, 0x43, 0x1e, 0xa7, 0x51,
	0xb1, 0x36, 0x2f, 0x1c, 0x71, 0x16, 0x72, 0x34, 0x8f, 0x61, 0xe7, 0x14, 0xe5, 0x2d, 0x9b, 0x7e,
	0x02, 0xe4, 0x39, 0xfa, 0x78, 0x5b, 0x6d, 0x36, 0x9f, 0x42, 0xfd, 0x14, 0xe5, 0xf7, 0x93, 0x81,
	0x4f, 0xdd, 0x6f, 0xf1, 0xf2, 0x9a, 0xb2, 0x9b, 0x7f, 0x94, 0x60, 0xef, 0x9d, 0x78, 0x5d, 0xc4,
	0x07, 0x00, 0x4c, 0x59, 0xed, 0x37, 0x78, 0xa9, 0x17, 0x55, 0x59, 0x12, 0x47, 0x5e, 0xc3, 0x3e,
	0xf5, 0x30, 0x90, 0x74, 0x48, 0xd1, 0xb3, 0xe7, 0x91, 0xc2, 0x58, 0x55, 0x35, 0xff, 0x38, 0xaf,
	0xe6, 0xbd, 0xd9, 0x8a, 0xd9, 0x86, 0x56, 0x9d, 0x66, 0x8d, 0xc2, 0xfc, 0x14, 0x76, 0x4f, 0x51,
	0x9e, 0x9f, 0xbf, 0xe8, 0x73, 0xff, 0xba, 0x33, 0x58, 0x40, 0xd2, 0xb1, 0x3a, 0xff, 0xfb, 0x50,
	0xc5, 0x40, 0xf2, 0x4b, 0x7b, 0xc2, 0x7d, 0x1d, 0x5f, 0x51, 0x86, 0x3e, 0xf7, 0xa3, 0x76, 0x0b,
	0x14, 0x82, 0x86, 0x81, 0x72, 0xeb, 0x76, 0x6b, 0x53, 0x9f, 0xfb, 0xe6, 0x01, 0x6c, 0x47, 0x3d,
	0x65, 0xec, 0x9a, 0xbd, 0x4f, 0xe0, 0x4e, 0x12, 0xa7, 0xf7, 0xfd, 0x02, 0xd6, 0x1c, 0xc6, 0x34,
	0x47, 0xcc, 0x62, 0x65, 0x55, 0xa6, 0x68, 0x61, 0x14, 0x6e, 0x9e, 0x43, 0xe3, 0x14, 0xe5, 0x59,
	0xa4, 0x73, 0xb3, 0xfb, 0x6a, 0x76, 0xee, 0xa8, 0x15, 0x0e, 0x97, 0xea, 0xe2, 0xf0, 0x66, 0xad,
	0x88, 0x2d, 0x3d, 0x2f, 0xcd, 0xe0, 0xd5, 0x05, 0x06, 0xff, 0x5d, 0x82, 0x66, 0x1e, 0xaa, 0xce,
	0x54, 0x40, 0x7d, 0x7e, 0x63, 0xda, 0x6e, 0x18, 0x48, 0x87, 0x06, 0xc8, 0x35, 0x69, 0x8e, 0xf2,
	0x52, 0x2f, 0x46, 0x9b, 0xdf, 0xcc, 0xc7, 0x09, 0x90, 0x45, 0xc2, 0x8c, 0xad, 0x49, 0x81, 0x64,
	0x23, 0x8b, 0xbe, 0xf3, 0xc5, 0xb1, 0x60, 0xf5, 0x66, 0x63, 0xc1, 0xb3, 0x3f, 0xab, 0xb0, 0xb3,
	0x58, 0x6b, 0x41, 0x7e, 0x82, 0x5a, 0x6a, 0xf6, 0x27, 0x07, 0x79, 0x60, 0xd9, 0x9f, 0x83, 0xe6,
	0xa3, 0x62, 0x05, 0xd1, 0xe7, 0x37, 0x57, 0x22, 0xec, 0xd4, 0x78, 0x95, 0x8f, 0x9d, 0x9d, 0xbf,
	0x96, 0xc3, 0x7e, 0x0d, 0x30, 0x97, 0x52, 0xf2, 0x51, 0xde, 0x92, 0x8c, 0xd4, 0x36, 0x0f, 0x0a,
	0x91, 0x17, 0xf4, 0xd2, 0x5c, 0x21, 0x3f, 0x40, 0x25, 0x91, 0x30, 0xf2, 0xb8, 0xa0, 0xf1, 0x37,
	0x4f, 0xfa, 0x05, 0xd4, 0x52, 0x9a, 0x96, 0x5f, 0x90, 0xac, 0xe8, 0x35, 0xf7, 0x3b, 0xf1, 0xdf,
	0x64, 0x27, 0xf9, 0xd5, 0xec, 0x7c, 0x13, 0xfd, 0x6a, 0x9a, 0x2b, 0x64, 0xa8, 0x58, 0x39, 0x97,
	0x09, 0xd2, 0x2e, 0xc8, 0x35, 0xa3, 0x7f, 0xcd, 0x4f, 0x96, 0x88, 0x4c, 0x57, 0x7b, 0xae, 0x28,
	0xf9, 0xd5, 0xce, 0xa8, 0x53, 0x7e, 0xb5, 0xb3, 0xc2, 0x64, 0xae, 0x90, 0x97, 0x50, 0x8e, 0x45,
	0x83, 0x3c, 0x2a, 0xaa, 0xf5, 0x4c, 0x78, 0x9a, 0xe6, 0x55, 0x21, 0x33, 0xc8, 0x57, 0x50, 0x8b,
	0x6d, 0xcf, 0xb9, 0x33, 0x94, 0x1f, 0x0e, 0xf7, 0x25, 0x6c, 0xa5, 0xe7, 0x23, 0x92, 0x2b, 0xeb,
	0x39, 0x13, 0xd4, 0x15, 0x4d, 0xec, 0xc3, 0x9d, 0xc5, 0x49, 0x89, 0xe4, 0xf6, 0x26, 0x77, 0x9a,
	0xba, 0x02, 0x76, 0x0c, 0x24, 0x3b, 0x34, 0x91, 0xa7, 0x85, 0x4c, 0xc9, 0x1b, 0xae, 0x6e, 0xc0,
	0x98, 0x89, 0xba, 0x74, 0xde, 0x11, 0xc3, 0xfc, 0xed, 0x0a, 0x85, 0xbd, 0xd9, 0xb9, 0x99, 0xc6,
	0x9a, 0x2b, 0x83, 0xb2, 0x3a, 0xf7, 0xe7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x71, 0x5f,
	0x14, 0xc1, 0x11, 0x00, 0x00,
}
