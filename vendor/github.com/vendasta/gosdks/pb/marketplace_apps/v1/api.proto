syntax = "proto3";

package marketplaceapps.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "marketplace_apps/v1/addon.proto";
import "marketplace_apps/v1/app.proto";
import "marketplace_apps/v1/order_form.proto";
import "marketplace_apps/v1/restrictions.proto";

// CreateAddonRequest is issued to create a new addon for an app
message CreateAddonRequest {
    // The ID of the app that the addon will be created for
    string app_id = 1;

    // The wholesale price the addon will be created with, in cents
    int64 price = 3;

    // The title the addon will be created with
    string title = 4;

    // A short description of the features the addon will provide
    string description = 5 [deprecated=true];

    // Order form fields
    OrderForm order_form = 6;

    // Indicates if the order form should be used during addon activation
    bool uses_order_form = 7;

    // Addon billing_frequency
    string billing_frequency = 8;

    // Addon service_model
    repeated string service_model = 9;

    // A tagline for an addon
    string tagline = 10;

    // Icon url for the addon
    string icon = 11;

    // The banner image of an addon
    string banner_image = 12;

    // Reseller marketing information
    MarketingInformation reseller_marketing = 13;

    // End user marketing information
    MarketingInformation end_user_marketing = 14;

    // Is the addon discoverable within marketplace
    bool discoverable = 15;

    // A list of screenshots for an addon
    repeated string screenshots = 16;

    // Can the addon be activated multiple times
    bool multiple_activations = 17;

    // List of restrictions for the addon
    Restrictions restrictions = 18;
}

// UpdateAddonRequest is issued to update an existing addon for an app
message UpdateAddonRequest {
    // The ID of the app that the addon will be updated for
    string app_id = 1;

    // The ID of the addon
    string addon_id = 2;

    // The wholesale price the addon will be created with, in cents
    int64 price = 20;

    // The title the addon will be created with
    string title = 21;

    // A short description of the features the addon will provide
    string description = 3 [deprecated=true];

    // Order form fields
    OrderForm order_form = 4;

    // Indicates if the order form should be used during addon activation
    bool uses_order_form = 5;

    // Addon billing_frequency
    string billing_frequency = 8;

    // Addon service_model
    repeated string service_model = 9;

    // A tagline for an addon
    string tagline = 10;

    // Icon url for the addon
    string icon = 11;

    // The banner image of an addon
    string banner_image = 12;

    // Reseller marketing information
    MarketingInformation reseller_marketing = 13;

    // End user marketing information
    MarketingInformation end_user_marketing = 14;

    // Is the addon discoverable within marketplace
    bool discoverable = 17;

    // A list of screenshots for an addon
    repeated string screenshots = 18;

    // Can the addon be activated multiple times
    bool multiple_activations = 19;

    // List of restrictions for the addon
    Restrictions restrictions = 22;
}

// ApproveAddonRequest is issued to change the approved boolean of an addon to be true
message ApproveAddonRequest {
    // The ID of the app that the addon will be updated for
    string app_id = 1;

    // The ID of the addon
    string addon_id = 2;
}

// UnapproveAddonRequest is issued to change the approved boolean of an addon to be false
message UnapproveAddonRequest {
    // The ID of the app that the addon will be updated for
    string app_id = 1;

    // The ID of the addon
    string addon_id = 2;
}

// ListApprovedAddonsRequest is issued to get multiple addons for a product.
message ListApprovedAddonsRequest {
    // The ID of the app to get addons for
    string app_id = 1 [deprecated=true];

    // cursor should be supplied from the last response to load the next results
    string cursor = 2;

    // the number of results to retrieve, max size and default is 100.
    int64 page_size = 3;

    // list of app_ids to obtain addons for
    repeated string app_ids = 4;
}

// Response message for requests that return a single addon
message AddonResponse {
    Addon addon = 1;
}

// ListAddonsRequest is issued to get multiple addons for a product.
message ListAddonsRequest {
    // The ID of the app to get addons for
    string app_id = 1;

    // cursor should be supplied from the last response to load the next results
    string cursor = 2;

    // the number of results to retrieve, max size and default is 100.
    int64 page_size = 3;
}

// Response message for a request that returns multiple addons
message AddonsListResponse {
    // A list of addons
    repeated Addon addons = 1;

    // The cursor to send with the next request if there are more results to be loaded
    string next_cursor = 2;

    // Indicates whether or not there are more results to be loaded
    bool has_more = 3;
}

// GetAddonRequest is issued to get a single specific addon
message GetAddonRequest {
    // The ID of the app the addon is for
    string app_id = 1;

    // The ID of the addon
    string addon_id = 2;
}

// DeleteAddonRequest is issued to delete a specific addon
// This is a soft delete
message DeleteAddonRequest {
    // The ID of the app the addon is for
    string app_id = 1;

    // The ID of the addon
    string addon_id = 2;
}

// GetPublicKeysRequest
message GetPublicKeysRequest {
    // The ID of the app the to get the public keys for.
    string app_id = 1;
}

// GetPublicKeysResponse
message GetPublicKeysResponse {
    // The default public key for the app.
    string public_key = 1;

    // The identified public keys for the app.
    repeated IdentifiedPublicKey identified_public_keys = 2;
}

// GetSSOUrlsRequest
message GetSSOUrlsRequest {
    // The ID of the app the to get the SSO urls for.
    string app_id = 1;
}

// GetSSOUrlsResponse
message GetSSOUrlsResponse {
    // The entry URL of the app.
    string entry_url = 1;
    // The session transfer URL of the app.
    string session_url = 2;
}

// GetAppRequest
message GetAppRequest {
    // The ID of the app
    string app_id = 1;
}

// GetAppResponse
message GetAppResponse {
    // The requested marketplace app
    MarketplaceApp app = 1;
}


message GetMultiOrderFormsRequest {
    // The id of the partner
    string partner_id = 1;

    // A list of requested order forms for given app_ids
    repeated string app_ids = 2;
}

message GetMultiOrderFormsResponse {
    // An order form container to associate an order form with a app_id
    message OrderFormContainer {
        string app_id = 1;
        OrderForm order_form = 2;
    }
    // A list of order forms with associated app_ids
    repeated OrderFormContainer order_form_container = 1;
}

// The service to interact with marketplace apps and their addons
service MarketplaceApps {
    // Created a new addon for the the specified app
    rpc CreateAddon(CreateAddonRequest) returns (AddonResponse) {};

    // Update an existing addon for the the specified app
    rpc UpdateAddon(UpdateAddonRequest) returns (AddonResponse) {};

    // Returns a list of addons for the specified app
    rpc ListAddons(ListAddonsRequest) returns (AddonsListResponse) {}

    // Returns a specific addon for the specified app
    rpc GetAddon(GetAddonRequest) returns (AddonResponse) {}

    // Deletes the specified addon. This is a soft delete
    rpc DeleteAddon(DeleteAddonRequest) returns (google.protobuf.Empty) {}

    // Get the public keys for the specified app
    rpc GetPublicKeys(GetPublicKeysRequest) returns (GetPublicKeysResponse) {}

    // Get the URL's needed to complete the SSO process for the specified app
    rpc GetSSOUrls(GetSSOUrlsRequest) returns (GetSSOUrlsResponse) {}

    // Get a marketplace app
    rpc GetApp(GetAppRequest) returns (GetAppResponse) {}

    // Get the unpublished version of a marketplace app
    rpc GetAppDraft(GetAppRequest) returns (GetAppResponse) {}

    // Make the addon discoverable in marketplace
    rpc ApproveAddon(ApproveAddonRequest) returns (google.protobuf.Empty) {};

    // Make the addon not discoverable in marketplace
    rpc UnapproveAddon(UnapproveAddonRequest) returns (google.protobuf.Empty) {};

    // List approved addons for the specified app
    rpc ListApprovedAddons(ListApprovedAddonsRequest) returns (AddonsListResponse) {};

    // GetMulti order forms for the given app_ids
    rpc GetMultiOrderForms (GetMultiOrderFormsRequest) returns (GetMultiOrderFormsResponse) {};

}
