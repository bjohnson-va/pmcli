// Code generated by protoc-gen-go.
// source: listing_score.proto
// DO NOT EDIT!

/*
Package listingscore_v1 is a generated protocol buffer package.

It is generated from these files:
	listing_score.proto

It has these top-level messages:
	Percentiles
	IndustryStats
	HistoricalScoreDataPoint
	GetScoreRequest
	CreateScoreRequest
	GetIndustryStatsRequest
	GetHistoricalScoreDataRequest
	GetListingPresenceRequest
	GetListingAccuracyRequest
	GetScoreResponse
	CreateScoreResponse
	GetIndustryStatsResponse
	GetHistoricalScoreDataResponse
	GetListingPresenceResponse
	GetListingAccuracyResponse
*/
package listingscore_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Relevant percentiles for computing letter grades and industry stats
type Percentiles struct {
	NinetyFifth float32 `protobuf:"fixed32,1,opt,name=ninety_fifth,json=ninetyFifth" json:"ninety_fifth,omitempty"`
	Eightieth   float32 `protobuf:"fixed32,2,opt,name=eightieth" json:"eightieth,omitempty"`
	Fiftieth    float32 `protobuf:"fixed32,3,opt,name=fiftieth" json:"fiftieth,omitempty"`
	Twentieth   float32 `protobuf:"fixed32,4,opt,name=twentieth" json:"twentieth,omitempty"`
	Tenth       float32 `protobuf:"fixed32,5,opt,name=tenth" json:"tenth,omitempty"`
}

func (m *Percentiles) Reset()                    { *m = Percentiles{} }
func (m *Percentiles) String() string            { return proto.CompactTextString(m) }
func (*Percentiles) ProtoMessage()               {}
func (*Percentiles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Percentiles) GetNinetyFifth() float32 {
	if m != nil {
		return m.NinetyFifth
	}
	return 0
}

func (m *Percentiles) GetEightieth() float32 {
	if m != nil {
		return m.Eightieth
	}
	return 0
}

func (m *Percentiles) GetFiftieth() float32 {
	if m != nil {
		return m.Fiftieth
	}
	return 0
}

func (m *Percentiles) GetTwentieth() float32 {
	if m != nil {
		return m.Twentieth
	}
	return 0
}

func (m *Percentiles) GetTenth() float32 {
	if m != nil {
		return m.Tenth
	}
	return 0
}

// A model definition for industry stats average and relevant percentiles
type IndustryStats struct {
	Average     float32      `protobuf:"fixed32,1,opt,name=average" json:"average,omitempty"`
	Percentiles *Percentiles `protobuf:"bytes,2,opt,name=percentiles" json:"percentiles,omitempty"`
}

func (m *IndustryStats) Reset()                    { *m = IndustryStats{} }
func (m *IndustryStats) String() string            { return proto.CompactTextString(m) }
func (*IndustryStats) ProtoMessage()               {}
func (*IndustryStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IndustryStats) GetAverage() float32 {
	if m != nil {
		return m.Average
	}
	return 0
}

func (m *IndustryStats) GetPercentiles() *Percentiles {
	if m != nil {
		return m.Percentiles
	}
	return nil
}

// A model definition for historical score data and required time format
type HistoricalScoreDataPoint struct {
	// The listing score
	Score int64 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	// The timestamp for listing score
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *HistoricalScoreDataPoint) Reset()                    { *m = HistoricalScoreDataPoint{} }
func (m *HistoricalScoreDataPoint) String() string            { return proto.CompactTextString(m) }
func (*HistoricalScoreDataPoint) ProtoMessage()               {}
func (*HistoricalScoreDataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HistoricalScoreDataPoint) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *HistoricalScoreDataPoint) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// A request for getting the listing score for an account
type GetScoreRequest struct {
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *GetScoreRequest) Reset()                    { *m = GetScoreRequest{} }
func (m *GetScoreRequest) String() string            { return proto.CompactTextString(m) }
func (*GetScoreRequest) ProtoMessage()               {}
func (*GetScoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetScoreRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

// A request for creating the listing score for an account
type CreateScoreRequest struct {
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *CreateScoreRequest) Reset()                    { *m = CreateScoreRequest{} }
func (m *CreateScoreRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateScoreRequest) ProtoMessage()               {}
func (*CreateScoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateScoreRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

// A request for getting the industry stats for a taxonomy
type GetIndustryStatsRequest struct {
	// The unique identifier of the taxonomy.
	TaxonomyId string `protobuf:"bytes,1,opt,name=taxonomy_id,json=taxonomyId" json:"taxonomy_id,omitempty"`
	// The unique identifier of the country.
	Country string `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	// The unique identifier of the state.
	State string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	// The unique identifier of the city.
	City string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
}

func (m *GetIndustryStatsRequest) Reset()                    { *m = GetIndustryStatsRequest{} }
func (m *GetIndustryStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetIndustryStatsRequest) ProtoMessage()               {}
func (*GetIndustryStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetIndustryStatsRequest) GetTaxonomyId() string {
	if m != nil {
		return m.TaxonomyId
	}
	return ""
}

func (m *GetIndustryStatsRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *GetIndustryStatsRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *GetIndustryStatsRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

// A request for getting the historical score for an account
type GetHistoricalScoreDataRequest struct {
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *GetHistoricalScoreDataRequest) Reset()                    { *m = GetHistoricalScoreDataRequest{} }
func (m *GetHistoricalScoreDataRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHistoricalScoreDataRequest) ProtoMessage()               {}
func (*GetHistoricalScoreDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetHistoricalScoreDataRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

// A request for getting the listing presence data for an account
type GetListingPresenceRequest struct {
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *GetListingPresenceRequest) Reset()                    { *m = GetListingPresenceRequest{} }
func (m *GetListingPresenceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetListingPresenceRequest) ProtoMessage()               {}
func (*GetListingPresenceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetListingPresenceRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

// A request for getting the listing accuray data for an account
type GetListingAccuracyRequest struct {
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *GetListingAccuracyRequest) Reset()                    { *m = GetListingAccuracyRequest{} }
func (m *GetListingAccuracyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetListingAccuracyRequest) ProtoMessage()               {}
func (*GetListingAccuracyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetListingAccuracyRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

// A response containing the listing score for an account
type GetScoreResponse struct {
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
	// The listing score of the account group.
	Score int64 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	// The last updated timestamp for the account
	Updated *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=updated" json:"updated,omitempty"`
}

func (m *GetScoreResponse) Reset()                    { *m = GetScoreResponse{} }
func (m *GetScoreResponse) String() string            { return proto.CompactTextString(m) }
func (*GetScoreResponse) ProtoMessage()               {}
func (*GetScoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetScoreResponse) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

func (m *GetScoreResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GetScoreResponse) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

// A response containing the listing score for an account
type CreateScoreResponse struct {
	// The listing score of the account group.
	Score int64 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
}

func (m *CreateScoreResponse) Reset()                    { *m = CreateScoreResponse{} }
func (m *CreateScoreResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateScoreResponse) ProtoMessage()               {}
func (*CreateScoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateScoreResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

// A response containing the industry stats for a taxonomy
type GetIndustryStatsResponse struct {
	// The industry stats based on world
	World *IndustryStats `protobuf:"bytes,1,opt,name=world" json:"world,omitempty"`
	// The industry stats based on country
	Country *IndustryStats `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	// The industry stats based on state
	State *IndustryStats `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	// The industry stats based on city
	City *IndustryStats `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
}

func (m *GetIndustryStatsResponse) Reset()                    { *m = GetIndustryStatsResponse{} }
func (m *GetIndustryStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetIndustryStatsResponse) ProtoMessage()               {}
func (*GetIndustryStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetIndustryStatsResponse) GetWorld() *IndustryStats {
	if m != nil {
		return m.World
	}
	return nil
}

func (m *GetIndustryStatsResponse) GetCountry() *IndustryStats {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *GetIndustryStatsResponse) GetState() *IndustryStats {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *GetIndustryStatsResponse) GetCity() *IndustryStats {
	if m != nil {
		return m.City
	}
	return nil
}

// A response containing the historical listing score for an account
type GetHistoricalScoreDataResponse struct {
	// The historical listing score of the account group.
	HistoricalScoreData []*HistoricalScoreDataPoint `protobuf:"bytes,1,rep,name=historical_score_data,json=historicalScoreData" json:"historical_score_data,omitempty"`
}

func (m *GetHistoricalScoreDataResponse) Reset()                    { *m = GetHistoricalScoreDataResponse{} }
func (m *GetHistoricalScoreDataResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHistoricalScoreDataResponse) ProtoMessage()               {}
func (*GetHistoricalScoreDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetHistoricalScoreDataResponse) GetHistoricalScoreData() []*HistoricalScoreDataPoint {
	if m != nil {
		return m.HistoricalScoreData
	}
	return nil
}

// A response containing the listing presence values for an account
type GetListingPresenceResponse struct {
	// The actual listing count for that account
	ListingCount int64 `protobuf:"varint,1,opt,name=listing_count,json=listingCount" json:"listing_count,omitempty"`
	// The average listing count for all accounts under same taxonomy category
	WorldAverage float32 `protobuf:"fixed32,2,opt,name=world_average,json=worldAverage" json:"world_average,omitempty"`
	// The average listing count for all accounts under same taxonomy category and same country
	CountryAverage float32 `protobuf:"fixed32,3,opt,name=country_average,json=countryAverage" json:"country_average,omitempty"`
	// The average listing count for all accounts under same taxonomy category and same state
	StateAverage float32 `protobuf:"fixed32,4,opt,name=state_average,json=stateAverage" json:"state_average,omitempty"`
	// The average listing count for all accounts under same taxonomy category and same city
	CityAverage float32 `protobuf:"fixed32,5,opt,name=city_average,json=cityAverage" json:"city_average,omitempty"`
}

func (m *GetListingPresenceResponse) Reset()                    { *m = GetListingPresenceResponse{} }
func (m *GetListingPresenceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetListingPresenceResponse) ProtoMessage()               {}
func (*GetListingPresenceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetListingPresenceResponse) GetListingCount() int64 {
	if m != nil {
		return m.ListingCount
	}
	return 0
}

func (m *GetListingPresenceResponse) GetWorldAverage() float32 {
	if m != nil {
		return m.WorldAverage
	}
	return 0
}

func (m *GetListingPresenceResponse) GetCountryAverage() float32 {
	if m != nil {
		return m.CountryAverage
	}
	return 0
}

func (m *GetListingPresenceResponse) GetStateAverage() float32 {
	if m != nil {
		return m.StateAverage
	}
	return 0
}

func (m *GetListingPresenceResponse) GetCityAverage() float32 {
	if m != nil {
		return m.CityAverage
	}
	return 0
}

// A response containing the listing accuracy values for an account
type GetListingAccuracyResponse struct {
	// The actual listing accuracy for that account
	ListingAccuracy float32 `protobuf:"fixed32,1,opt,name=listing_accuracy,json=listingAccuracy" json:"listing_accuracy,omitempty"`
	// The average listing accuracy for all accounts under same taxonomy category
	WorldAverage float32 `protobuf:"fixed32,2,opt,name=world_average,json=worldAverage" json:"world_average,omitempty"`
	// The average listing accuracy for all accounts under same taxonomy category and same country
	CountryAverage float32 `protobuf:"fixed32,3,opt,name=country_average,json=countryAverage" json:"country_average,omitempty"`
	// The average listing accuracy for all accounts under same taxonomy category and same state
	StateAverage float32 `protobuf:"fixed32,4,opt,name=state_average,json=stateAverage" json:"state_average,omitempty"`
	// The average listing accuracy for all accounts under same taxonomy category and same city
	CityAverage float32 `protobuf:"fixed32,5,opt,name=city_average,json=cityAverage" json:"city_average,omitempty"`
}

func (m *GetListingAccuracyResponse) Reset()                    { *m = GetListingAccuracyResponse{} }
func (m *GetListingAccuracyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetListingAccuracyResponse) ProtoMessage()               {}
func (*GetListingAccuracyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetListingAccuracyResponse) GetListingAccuracy() float32 {
	if m != nil {
		return m.ListingAccuracy
	}
	return 0
}

func (m *GetListingAccuracyResponse) GetWorldAverage() float32 {
	if m != nil {
		return m.WorldAverage
	}
	return 0
}

func (m *GetListingAccuracyResponse) GetCountryAverage() float32 {
	if m != nil {
		return m.CountryAverage
	}
	return 0
}

func (m *GetListingAccuracyResponse) GetStateAverage() float32 {
	if m != nil {
		return m.StateAverage
	}
	return 0
}

func (m *GetListingAccuracyResponse) GetCityAverage() float32 {
	if m != nil {
		return m.CityAverage
	}
	return 0
}

func init() {
	proto.RegisterType((*Percentiles)(nil), "listingscore.v1.Percentiles")
	proto.RegisterType((*IndustryStats)(nil), "listingscore.v1.IndustryStats")
	proto.RegisterType((*HistoricalScoreDataPoint)(nil), "listingscore.v1.HistoricalScoreDataPoint")
	proto.RegisterType((*GetScoreRequest)(nil), "listingscore.v1.GetScoreRequest")
	proto.RegisterType((*CreateScoreRequest)(nil), "listingscore.v1.CreateScoreRequest")
	proto.RegisterType((*GetIndustryStatsRequest)(nil), "listingscore.v1.GetIndustryStatsRequest")
	proto.RegisterType((*GetHistoricalScoreDataRequest)(nil), "listingscore.v1.GetHistoricalScoreDataRequest")
	proto.RegisterType((*GetListingPresenceRequest)(nil), "listingscore.v1.GetListingPresenceRequest")
	proto.RegisterType((*GetListingAccuracyRequest)(nil), "listingscore.v1.GetListingAccuracyRequest")
	proto.RegisterType((*GetScoreResponse)(nil), "listingscore.v1.GetScoreResponse")
	proto.RegisterType((*CreateScoreResponse)(nil), "listingscore.v1.CreateScoreResponse")
	proto.RegisterType((*GetIndustryStatsResponse)(nil), "listingscore.v1.GetIndustryStatsResponse")
	proto.RegisterType((*GetHistoricalScoreDataResponse)(nil), "listingscore.v1.GetHistoricalScoreDataResponse")
	proto.RegisterType((*GetListingPresenceResponse)(nil), "listingscore.v1.GetListingPresenceResponse")
	proto.RegisterType((*GetListingAccuracyResponse)(nil), "listingscore.v1.GetListingAccuracyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ListingScore service

type ListingScoreClient interface {
	// Get a listing score for an account
	GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*GetScoreResponse, error)
	// Create a listing score for an account
	CreateScore(ctx context.Context, in *CreateScoreRequest, opts ...grpc.CallOption) (*CreateScoreResponse, error)
	// Get the industry stats based on taxonomy
	GetIndustryStats(ctx context.Context, in *GetIndustryStatsRequest, opts ...grpc.CallOption) (*GetIndustryStatsResponse, error)
	// Get the historical listing score for an account
	GetHistoricalScoreData(ctx context.Context, in *GetHistoricalScoreDataRequest, opts ...grpc.CallOption) (*GetHistoricalScoreDataResponse, error)
	// Get the listing presence data for an account
	GetListingPresence(ctx context.Context, in *GetListingPresenceRequest, opts ...grpc.CallOption) (*GetListingPresenceResponse, error)
	// Get the listing accuracy data for an account
	GetListingAccuracy(ctx context.Context, in *GetListingAccuracyRequest, opts ...grpc.CallOption) (*GetListingAccuracyResponse, error)
}

type listingScoreClient struct {
	cc *grpc.ClientConn
}

func NewListingScoreClient(cc *grpc.ClientConn) ListingScoreClient {
	return &listingScoreClient{cc}
}

func (c *listingScoreClient) GetScore(ctx context.Context, in *GetScoreRequest, opts ...grpc.CallOption) (*GetScoreResponse, error) {
	out := new(GetScoreResponse)
	err := grpc.Invoke(ctx, "/listingscore.v1.ListingScore/GetScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingScoreClient) CreateScore(ctx context.Context, in *CreateScoreRequest, opts ...grpc.CallOption) (*CreateScoreResponse, error) {
	out := new(CreateScoreResponse)
	err := grpc.Invoke(ctx, "/listingscore.v1.ListingScore/CreateScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingScoreClient) GetIndustryStats(ctx context.Context, in *GetIndustryStatsRequest, opts ...grpc.CallOption) (*GetIndustryStatsResponse, error) {
	out := new(GetIndustryStatsResponse)
	err := grpc.Invoke(ctx, "/listingscore.v1.ListingScore/GetIndustryStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingScoreClient) GetHistoricalScoreData(ctx context.Context, in *GetHistoricalScoreDataRequest, opts ...grpc.CallOption) (*GetHistoricalScoreDataResponse, error) {
	out := new(GetHistoricalScoreDataResponse)
	err := grpc.Invoke(ctx, "/listingscore.v1.ListingScore/GetHistoricalScoreData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingScoreClient) GetListingPresence(ctx context.Context, in *GetListingPresenceRequest, opts ...grpc.CallOption) (*GetListingPresenceResponse, error) {
	out := new(GetListingPresenceResponse)
	err := grpc.Invoke(ctx, "/listingscore.v1.ListingScore/GetListingPresence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingScoreClient) GetListingAccuracy(ctx context.Context, in *GetListingAccuracyRequest, opts ...grpc.CallOption) (*GetListingAccuracyResponse, error) {
	out := new(GetListingAccuracyResponse)
	err := grpc.Invoke(ctx, "/listingscore.v1.ListingScore/GetListingAccuracy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ListingScore service

type ListingScoreServer interface {
	// Get a listing score for an account
	GetScore(context.Context, *GetScoreRequest) (*GetScoreResponse, error)
	// Create a listing score for an account
	CreateScore(context.Context, *CreateScoreRequest) (*CreateScoreResponse, error)
	// Get the industry stats based on taxonomy
	GetIndustryStats(context.Context, *GetIndustryStatsRequest) (*GetIndustryStatsResponse, error)
	// Get the historical listing score for an account
	GetHistoricalScoreData(context.Context, *GetHistoricalScoreDataRequest) (*GetHistoricalScoreDataResponse, error)
	// Get the listing presence data for an account
	GetListingPresence(context.Context, *GetListingPresenceRequest) (*GetListingPresenceResponse, error)
	// Get the listing accuracy data for an account
	GetListingAccuracy(context.Context, *GetListingAccuracyRequest) (*GetListingAccuracyResponse, error)
}

func RegisterListingScoreServer(s *grpc.Server, srv ListingScoreServer) {
	s.RegisterService(&_ListingScore_serviceDesc, srv)
}

func _ListingScore_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingScoreServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listingscore.v1.ListingScore/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingScoreServer).GetScore(ctx, req.(*GetScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingScore_CreateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingScoreServer).CreateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listingscore.v1.ListingScore/CreateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingScoreServer).CreateScore(ctx, req.(*CreateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingScore_GetIndustryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndustryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingScoreServer).GetIndustryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listingscore.v1.ListingScore/GetIndustryStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingScoreServer).GetIndustryStats(ctx, req.(*GetIndustryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingScore_GetHistoricalScoreData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalScoreDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingScoreServer).GetHistoricalScoreData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listingscore.v1.ListingScore/GetHistoricalScoreData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingScoreServer).GetHistoricalScoreData(ctx, req.(*GetHistoricalScoreDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingScore_GetListingPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingScoreServer).GetListingPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listingscore.v1.ListingScore/GetListingPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingScoreServer).GetListingPresence(ctx, req.(*GetListingPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingScore_GetListingAccuracy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingAccuracyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingScoreServer).GetListingAccuracy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listingscore.v1.ListingScore/GetListingAccuracy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingScoreServer).GetListingAccuracy(ctx, req.(*GetListingAccuracyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ListingScore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "listingscore.v1.ListingScore",
	HandlerType: (*ListingScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScore",
			Handler:    _ListingScore_GetScore_Handler,
		},
		{
			MethodName: "CreateScore",
			Handler:    _ListingScore_CreateScore_Handler,
		},
		{
			MethodName: "GetIndustryStats",
			Handler:    _ListingScore_GetIndustryStats_Handler,
		},
		{
			MethodName: "GetHistoricalScoreData",
			Handler:    _ListingScore_GetHistoricalScoreData_Handler,
		},
		{
			MethodName: "GetListingPresence",
			Handler:    _ListingScore_GetListingPresence_Handler,
		},
		{
			MethodName: "GetListingAccuracy",
			Handler:    _ListingScore_GetListingAccuracy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listing_score.proto",
}

func init() { proto.RegisterFile("listing_score.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0x26, 0x4d, 0x5b, 0xbf, 0x75, 0x9a, 0x68, 0x42, 0xcb, 0xb2, 0xa4, 0xad, 0x33, 0x01,
	0xe1, 0x34, 0xaa, 0xad, 0x9a, 0x1c, 0x2a, 0x90, 0x2a, 0x55, 0x05, 0x8c, 0x25, 0x0e, 0xd1, 0x96,
	0x2b, 0xb2, 0xa6, 0xeb, 0x89, 0x3d, 0xc8, 0xd9, 0x71, 0x77, 0x9f, 0x53, 0x7c, 0x00, 0x24, 0x4e,
	0x88, 0x2b, 0x17, 0x4e, 0x1c, 0xf9, 0x42, 0x1c, 0x38, 0x71, 0xe3, 0x23, 0xf0, 0x01, 0xd0, 0xfc,
	0xdb, 0xb5, 0xbd, 0x1b, 0xd7, 0x81, 0x0b, 0xb7, 0xdd, 0xf7, 0x7e, 0x6f, 0x7e, 0xef, 0xff, 0x83,
	0xbd, 0xb1, 0xc8, 0x50, 0x24, 0xc3, 0x7e, 0x16, 0xcb, 0x94, 0xb7, 0x26, 0xa9, 0x44, 0x49, 0x76,
	0xac, 0xd0, 0xc8, 0x2e, 0x1e, 0x87, 0x0f, 0x86, 0x52, 0x0e, 0xc7, 0xbc, 0xad, 0xd5, 0x2f, 0xa7,
	0x67, 0x6d, 0x14, 0xe7, 0x3c, 0x43, 0x76, 0x3e, 0x31, 0x16, 0xe1, 0xbe, 0x05, 0xb0, 0x89, 0x68,
	0xb3, 0x24, 0x91, 0xc8, 0x50, 0xc8, 0x24, 0x33, 0x5a, 0xfa, 0xab, 0x07, 0xfe, 0x29, 0x4f, 0x63,
	0x9e, 0xa0, 0x18, 0xf3, 0x8c, 0x1c, 0x40, 0x3d, 0x11, 0x09, 0xc7, 0x59, 0xff, 0x4c, 0x9c, 0xe1,
	0x28, 0xf0, 0x1a, 0x5e, 0x73, 0x23, 0xf2, 0x8d, 0xec, 0x33, 0x25, 0x22, 0xfb, 0x50, 0xe3, 0x62,
	0x38, 0x42, 0xc1, 0x71, 0x14, 0x6c, 0x68, 0x7d, 0x21, 0x20, 0x21, 0xdc, 0x52, 0x96, 0x5a, 0xb9,
	0xa9, 0x95, 0xf9, 0xbf, 0xb2, 0xc4, 0xd7, 0x8a, 0x49, 0x29, 0xaf, 0x1b, 0xcb, 0x5c, 0x40, 0xde,
	0x82, 0x2d, 0xe4, 0x09, 0x8e, 0x82, 0x2d, 0xad, 0x31, 0x3f, 0x54, 0xc0, 0x76, 0x2f, 0x19, 0x4c,
	0x33, 0x4c, 0x67, 0x2f, 0x90, 0x61, 0x46, 0x02, 0xb8, 0xc9, 0x2e, 0x78, 0xca, 0x86, 0xdc, 0x3a,
	0xe7, 0x7e, 0xc9, 0x53, 0xf0, 0x27, 0x45, 0x28, 0xda, 0x35, 0xbf, 0xb3, 0xdf, 0x5a, 0xca, 0x58,
	0x6b, 0x2e, 0xdc, 0x68, 0xde, 0x80, 0x7e, 0x0d, 0xc1, 0xe7, 0x22, 0x43, 0x99, 0x8a, 0x98, 0x8d,
	0x5f, 0x28, 0xf8, 0x27, 0x0c, 0xd9, 0xa9, 0x14, 0x09, 0x2a, 0xe7, 0xf4, 0x03, 0x9a, 0x73, 0x33,
	0x32, 0x3f, 0xe4, 0x09, 0xd4, 0xf2, 0x74, 0x5b, 0xbe, 0xb0, 0x65, 0xf2, 0xdd, 0x72, 0x05, 0x69,
	0x7d, 0xe9, 0x10, 0x51, 0x01, 0xa6, 0x1f, 0xc3, 0x4e, 0x97, 0xa3, 0x26, 0x89, 0xf8, 0xab, 0x29,
	0xcf, 0x90, 0x34, 0x61, 0x97, 0xc5, 0xb1, 0x9c, 0x26, 0xd8, 0x1f, 0xa6, 0x72, 0x3a, 0xe9, 0x8b,
	0x81, 0x66, 0xab, 0x45, 0xb7, 0xad, 0xbc, 0xab, 0xc4, 0xbd, 0x01, 0x7d, 0x0a, 0xe4, 0x79, 0xca,
	0x19, 0xf2, 0x7f, 0x69, 0xff, 0x1d, 0xbc, 0xdd, 0xe5, 0xb8, 0x90, 0x56, 0xf7, 0xc8, 0x03, 0xf0,
	0x91, 0x7d, 0x23, 0x13, 0x79, 0x3e, 0x2b, 0xec, 0xc1, 0x89, 0x7a, 0x03, 0x95, 0x7e, 0xfd, 0x56,
	0x3a, 0xd3, 0x01, 0xd7, 0x22, 0xf7, 0xab, 0x53, 0x84, 0x0c, 0xb9, 0x2e, 0x7b, 0x2d, 0x32, 0x3f,
	0x84, 0xc0, 0xf5, 0x58, 0xe0, 0x4c, 0x97, 0xbb, 0x16, 0xe9, 0x6f, 0xda, 0x83, 0x7b, 0x5d, 0x8e,
	0x15, 0xb9, 0xbe, 0x7a, 0x28, 0x9f, 0xc2, 0x3b, 0x5d, 0x8e, 0x5f, 0x98, 0x12, 0x9f, 0xa6, 0x3c,
	0xe3, 0x49, 0xcc, 0xff, 0xe3, 0x33, 0xcf, 0xe2, 0x78, 0x9a, 0xb2, 0x78, 0x76, 0xf5, 0x67, 0x7e,
	0xf4, 0x60, 0xb7, 0x28, 0x6b, 0x36, 0x91, 0x49, 0xc6, 0xd7, 0x37, 0x2f, 0x9a, 0x6c, 0x63, 0xbe,
	0xc9, 0x4e, 0xe0, 0xe6, 0x74, 0x32, 0x60, 0xc8, 0x07, 0x3a, 0xb3, 0xab, 0x5b, 0xcc, 0x41, 0xe9,
	0x31, 0xec, 0x2d, 0xf4, 0x88, 0x75, 0xa6, 0xb2, 0x8f, 0xe9, 0xdf, 0x1e, 0x04, 0xe5, 0x8e, 0xb0,
	0x26, 0x27, 0xb0, 0xf5, 0x5a, 0xa6, 0x63, 0xe3, 0xb4, 0xdf, 0xb9, 0x5f, 0x1a, 0xa8, 0x45, 0x33,
	0x03, 0x26, 0x4f, 0x16, 0xfb, 0xe4, 0xcd, 0x76, 0x79, 0x1f, 0x9d, 0xcc, 0xf7, 0xd1, 0x1a, 0x7c,
	0xa6, 0xcf, 0x3a, 0x73, 0x7d, 0xf6, 0x66, 0x23, 0xd3, 0x87, 0xdf, 0xc3, 0xfd, 0xcb, 0xfa, 0xd0,
	0xc6, 0xfe, 0x15, 0xdc, 0x19, 0xe5, 0x6a, 0xb3, 0x88, 0xfb, 0x03, 0x86, 0x2c, 0xf0, 0x1a, 0x9b,
	0x4d, 0xbf, 0x73, 0x54, 0xa2, 0xb9, 0x6c, 0x81, 0x44, 0x7b, 0xa3, 0xb2, 0x86, 0xfe, 0xe1, 0x41,
	0x58, 0xd5, 0xbe, 0x96, 0xfd, 0x10, 0xb6, 0xdd, 0x0d, 0xd0, 0xc9, 0xb1, 0x45, 0xab, 0x5b, 0xe1,
	0x73, 0x25, 0x53, 0x20, 0x9d, 0xf1, 0xbe, 0xdb, 0x8a, 0x66, 0x25, 0xd7, 0xb5, 0xf0, 0x99, 0x5d,
	0x8d, 0x1f, 0xc0, 0x8e, 0x4d, 0x6f, 0x0e, 0x33, 0xcb, 0xf9, 0xb6, 0x15, 0x3b, 0xe0, 0x21, 0x6c,
	0xeb, 0x7c, 0xe6, 0x30, 0xb3, 0xa6, 0xeb, 0x5a, 0xe8, 0x40, 0x07, 0x50, 0x57, 0xf9, 0xcb, 0x31,
	0x66, 0x61, 0xfb, 0x4a, 0x66, 0x21, 0xf4, 0xcf, 0x85, 0xc8, 0x8a, 0x89, 0xb2, 0x91, 0x1d, 0xc1,
	0xae, 0x8b, 0x8c, 0x59, 0x9d, 0xdd, 0xe6, 0xee, 0xc0, 0x39, 0x93, 0xff, 0x67, 0x7c, 0x9d, 0x5f,
	0x6e, 0x40, 0xdd, 0x06, 0xa7, 0xcb, 0x49, 0x5e, 0xc1, 0x2d, 0x37, 0xf9, 0xa4, 0x51, 0x6a, 0x8b,
	0xa5, 0x5d, 0x1f, 0x1e, 0xac, 0x40, 0x98, 0x14, 0xd1, 0xc6, 0x0f, 0xbf, 0xff, 0xf5, 0xf3, 0x46,
	0x48, 0xef, 0xb4, 0x2f, 0x1e, 0xb7, 0x2d, 0xfa, 0x91, 0x86, 0xb7, 0x87, 0x1c, 0x3f, 0xf2, 0x1e,
	0x92, 0x6f, 0xc1, 0x9f, 0x1b, 0x71, 0x72, 0x58, 0x7a, 0xb3, 0x7c, 0x24, 0xc2, 0xf7, 0x56, 0x83,
	0x2c, 0xf7, 0xa1, 0xe6, 0xbe, 0x47, 0x83, 0x32, 0x77, 0xac, 0xe1, 0x8a, 0xfe, 0x27, 0xb3, 0xec,
	0x16, 0xaf, 0x73, 0xb3, 0x2a, 0xb0, 0xaa, 0x4b, 0x13, 0x1e, 0xad, 0x81, 0xb4, 0xee, 0x1c, 0x68,
	0x77, 0xde, 0xa5, 0x77, 0x95, 0x3b, 0xc2, 0x42, 0x1e, 0xa9, 0x92, 0x65, 0x2e, 0x17, 0xbf, 0x79,
	0x70, 0xb7, 0x7a, 0x96, 0x49, 0xab, 0x8a, 0xe8, 0xf2, 0xe3, 0x13, 0xb6, 0xd7, 0xc6, 0x5b, 0xf7,
	0x8e, 0xb5, 0x7b, 0xef, 0xd3, 0x46, 0x39, 0x5b, 0xc5, 0xd0, 0x3b, 0x47, 0x25, 0x90, 0xf2, 0xc4,
	0x93, 0x87, 0x55, 0x9c, 0xd5, 0x57, 0x2d, 0x3c, 0x5e, 0x0b, 0x6b, 0x7d, 0xbb, 0xb6, 0x48, 0x98,
	0x4f, 0xd5, 0x2a, 0xc2, 0xa5, 0xfb, 0xb7, 0x92, 0x70, 0x79, 0xb2, 0xe9, 0xb5, 0x97, 0x37, 0xf4,
	0x59, 0xfa, 0xf0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0xc0, 0x44, 0x24, 0xc0, 0x0a, 0x00,
	0x00,
}
