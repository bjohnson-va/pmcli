// Code generated by protoc-gen-go. DO NOT EDIT.
// source: billing/v1/prepaid_sale.proto

package billing_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Lifespan struct {
	// The start of the lifespan
	Start *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	// The end of the lifespan
	End *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *Lifespan) Reset()                    { *m = Lifespan{} }
func (m *Lifespan) String() string            { return proto.CompactTextString(m) }
func (*Lifespan) ProtoMessage()               {}
func (*Lifespan) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Lifespan) GetStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Lifespan) GetEnd() *google_protobuf1.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

type PrepaidSale struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The unique stock keeping unit of the product
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// The unique identifier of the prepaid sale
	Id int64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	// The time the prepaid sale is created
	Created *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	// The quantity of products included
	Quantity int64 `protobuf:"varint,5,opt,name=quantity" json:"quantity,omitempty"`
	// The total price in cents
	TotalPrice int64 `protobuf:"varint,6,opt,name=total_price,json=totalPrice" json:"total_price,omitempty"`
	// The lifespan of the prepaid sale
	Lifespan *Lifespan `protobuf:"bytes,7,opt,name=lifespan" json:"lifespan,omitempty"`
}

func (m *PrepaidSale) Reset()                    { *m = PrepaidSale{} }
func (m *PrepaidSale) String() string            { return proto.CompactTextString(m) }
func (*PrepaidSale) ProtoMessage()               {}
func (*PrepaidSale) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PrepaidSale) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *PrepaidSale) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *PrepaidSale) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PrepaidSale) GetCreated() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *PrepaidSale) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *PrepaidSale) GetTotalPrice() int64 {
	if m != nil {
		return m.TotalPrice
	}
	return 0
}

func (m *PrepaidSale) GetLifespan() *Lifespan {
	if m != nil {
		return m.Lifespan
	}
	return nil
}

type ListPrepaidSalesRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The unique stock keeping unit of the product
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
}

func (m *ListPrepaidSalesRequest) Reset()                    { *m = ListPrepaidSalesRequest{} }
func (m *ListPrepaidSalesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPrepaidSalesRequest) ProtoMessage()               {}
func (*ListPrepaidSalesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ListPrepaidSalesRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *ListPrepaidSalesRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

type ListPrepaidSalesResponse struct {
	// The prepaid sales
	PrepaidSales []*PrepaidSale `protobuf:"bytes,1,rep,name=prepaid_sales,json=prepaidSales" json:"prepaid_sales,omitempty"`
}

func (m *ListPrepaidSalesResponse) Reset()                    { *m = ListPrepaidSalesResponse{} }
func (m *ListPrepaidSalesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPrepaidSalesResponse) ProtoMessage()               {}
func (*ListPrepaidSalesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *ListPrepaidSalesResponse) GetPrepaidSales() []*PrepaidSale {
	if m != nil {
		return m.PrepaidSales
	}
	return nil
}

type CreatePrepaidSaleRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The unique stock keeping unit of the product
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// The quantity of products included
	Quantity int64 `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
	// The total price in cents
	TotalPrice int64 `protobuf:"varint,4,opt,name=total_price,json=totalPrice" json:"total_price,omitempty"`
	// The lifespan of the prepaid sale
	Lifespan *Lifespan `protobuf:"bytes,5,opt,name=lifespan" json:"lifespan,omitempty"`
}

func (m *CreatePrepaidSaleRequest) Reset()                    { *m = CreatePrepaidSaleRequest{} }
func (m *CreatePrepaidSaleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePrepaidSaleRequest) ProtoMessage()               {}
func (*CreatePrepaidSaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *CreatePrepaidSaleRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *CreatePrepaidSaleRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *CreatePrepaidSaleRequest) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *CreatePrepaidSaleRequest) GetTotalPrice() int64 {
	if m != nil {
		return m.TotalPrice
	}
	return 0
}

func (m *CreatePrepaidSaleRequest) GetLifespan() *Lifespan {
	if m != nil {
		return m.Lifespan
	}
	return nil
}

type UpdatePrepaidSaleRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The unique stock keeping unit of the product
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// The unique identifier of the prepaid sale
	Id int64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	// The quantity of products included
	Quantity int64 `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
	// The total price in cents
	TotalPrice int64 `protobuf:"varint,5,opt,name=total_price,json=totalPrice" json:"total_price,omitempty"`
	// The lifespan of the prepaid sale
	Lifespan *Lifespan `protobuf:"bytes,6,opt,name=lifespan" json:"lifespan,omitempty"`
	// Mask for what fields should be updated
	FieldMask *FieldMask `protobuf:"bytes,7,opt,name=field_mask,json=fieldMask" json:"field_mask,omitempty"`
}

func (m *UpdatePrepaidSaleRequest) Reset()                    { *m = UpdatePrepaidSaleRequest{} }
func (m *UpdatePrepaidSaleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePrepaidSaleRequest) ProtoMessage()               {}
func (*UpdatePrepaidSaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *UpdatePrepaidSaleRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *UpdatePrepaidSaleRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *UpdatePrepaidSaleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePrepaidSaleRequest) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *UpdatePrepaidSaleRequest) GetTotalPrice() int64 {
	if m != nil {
		return m.TotalPrice
	}
	return 0
}

func (m *UpdatePrepaidSaleRequest) GetLifespan() *Lifespan {
	if m != nil {
		return m.Lifespan
	}
	return nil
}

func (m *UpdatePrepaidSaleRequest) GetFieldMask() *FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type DeletePrepaidSaleRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The unique stock keeping unit of the product
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// The unique identifier of the prepaid sale
	Id int64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *DeletePrepaidSaleRequest) Reset()                    { *m = DeletePrepaidSaleRequest{} }
func (m *DeletePrepaidSaleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePrepaidSaleRequest) ProtoMessage()               {}
func (*DeletePrepaidSaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *DeletePrepaidSaleRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *DeletePrepaidSaleRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *DeletePrepaidSaleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Lifespan)(nil), "billing.v1.Lifespan")
	proto.RegisterType((*PrepaidSale)(nil), "billing.v1.PrepaidSale")
	proto.RegisterType((*ListPrepaidSalesRequest)(nil), "billing.v1.ListPrepaidSalesRequest")
	proto.RegisterType((*ListPrepaidSalesResponse)(nil), "billing.v1.ListPrepaidSalesResponse")
	proto.RegisterType((*CreatePrepaidSaleRequest)(nil), "billing.v1.CreatePrepaidSaleRequest")
	proto.RegisterType((*UpdatePrepaidSaleRequest)(nil), "billing.v1.UpdatePrepaidSaleRequest")
	proto.RegisterType((*DeletePrepaidSaleRequest)(nil), "billing.v1.DeletePrepaidSaleRequest")
}

func init() { proto.RegisterFile("billing/v1/prepaid_sale.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x55, 0x9a, 0xb6, 0x6b, 0xbf, 0x02, 0x42, 0x16, 0x68, 0x56, 0x11, 0x5a, 0x95, 0x53, 0x0f,
	0x28, 0xd9, 0xc6, 0x8e, 0xdc, 0x40, 0x48, 0x48, 0x45, 0x9a, 0x0c, 0x48, 0x5c, 0x50, 0xe4, 0xd6,
	0x5f, 0x8a, 0xa9, 0x93, 0x78, 0xb1, 0x33, 0x89, 0x2b, 0xbf, 0x8b, 0xbf, 0xc5, 0x1d, 0xc5, 0x69,
	0x36, 0x03, 0x52, 0x36, 0x4d, 0xec, 0xe6, 0xf8, 0x3d, 0x3f, 0xbf, 0xf7, 0xf2, 0x19, 0x9e, 0xaf,
	0xa5, 0x52, 0xb2, 0xd8, 0x26, 0x97, 0x27, 0x89, 0xae, 0x50, 0x73, 0x29, 0x52, 0xc3, 0x15, 0xc6,
	0xba, 0x2a, 0x6d, 0x49, 0x60, 0x0f, 0xc7, 0x97, 0x27, 0xf3, 0xa3, 0x6d, 0x59, 0x6e, 0x15, 0x26,
	0x0e, 0x59, 0xd7, 0x59, 0x62, 0x65, 0x8e, 0xc6, 0xf2, 0x5c, 0xb7, 0xe4, 0xf9, 0x33, 0x4f, 0x2b,
	0x93, 0xa8, 0x44, 0x9a, 0x73, 0xb3, 0x6b, 0xc1, 0xe8, 0x1b, 0x4c, 0x56, 0x32, 0x43, 0xa3, 0x79,
	0x41, 0x8e, 0x61, 0x64, 0x2c, 0xaf, 0x2c, 0x0d, 0x16, 0xc1, 0x72, 0x76, 0x3a, 0x8f, 0x5b, 0xe5,
	0xb8, 0x53, 0x8e, 0x3f, 0x76, 0xca, 0xac, 0x25, 0x92, 0x17, 0x10, 0x62, 0x21, 0xe8, 0xe0, 0x46,
	0x7e, 0x43, 0x8b, 0x7e, 0x05, 0x30, 0x3b, 0x6f, 0xc3, 0x7c, 0xe0, 0x0a, 0xc9, 0x11, 0xcc, 0x72,
	0xac, 0x36, 0x5f, 0x79, 0x61, 0x53, 0x29, 0xdc, 0xad, 0x53, 0x06, 0xdd, 0xd6, 0x3b, 0x41, 0x1e,
	0x43, 0x68, 0x76, 0xb5, 0x93, 0x9f, 0xb2, 0x66, 0x49, 0x1e, 0xc1, 0x40, 0x0a, 0x1a, 0x2e, 0x82,
	0x65, 0xc8, 0x06, 0x52, 0x90, 0x33, 0x38, 0xd8, 0x54, 0xc8, 0x2d, 0x0a, 0x3a, 0xbc, 0xd1, 0x44,
	0x47, 0x25, 0x73, 0x98, 0x5c, 0xd4, 0xbc, 0xb0, 0xd2, 0x7e, 0xa7, 0x23, 0xa7, 0x75, 0xf5, 0xdd,
	0x98, 0xb2, 0xa5, 0xe5, 0x2a, 0xd5, 0x95, 0xdc, 0x20, 0x1d, 0x3b, 0x18, 0xdc, 0xd6, 0x79, 0xb3,
	0x43, 0x8e, 0x61, 0xa2, 0xf6, 0x8d, 0xd1, 0x03, 0x77, 0xe7, 0x93, 0xf8, 0xfa, 0x77, 0xc4, 0x5d,
	0x9b, 0xec, 0x8a, 0x15, 0xad, 0xe0, 0x70, 0x25, 0x8d, 0xf5, 0xa2, 0x1b, 0x86, 0x17, 0x35, 0x1a,
	0x7b, 0x87, 0x0a, 0xa2, 0xcf, 0x40, 0xff, 0x55, 0x33, 0xba, 0x2c, 0x0c, 0x92, 0x57, 0xf0, 0xd0,
	0x9f, 0x16, 0x43, 0x83, 0x45, 0xb8, 0x9c, 0x9d, 0x1e, 0xfa, 0x06, 0xbd, 0x83, 0xec, 0x81, 0xf6,
	0x54, 0xa2, 0x9f, 0x01, 0xd0, 0xd7, 0xae, 0x22, 0x9f, 0x73, 0x67, 0xa7, 0x7f, 0xd4, 0x1c, 0xf6,
	0xd7, 0x3c, 0xec, 0xad, 0x79, 0x74, 0xab, 0x9a, 0x7f, 0x0c, 0x80, 0x7e, 0xd2, 0xe2, 0xbf, 0xd9,
	0xff, 0x7b, 0xd6, 0xfc, 0x38, 0xc3, 0xfe, 0x38, 0xa3, 0xde, 0x38, 0xe3, 0xdb, 0xc4, 0x21, 0x67,
	0x00, 0xd7, 0xaf, 0x75, 0x3f, 0x69, 0x4f, 0xfd, 0x33, 0x6f, 0x1b, 0xf4, 0x3d, 0x37, 0x3b, 0x36,
	0xcd, 0xba, 0x65, 0xf4, 0x05, 0xe8, 0x1b, 0x54, 0x78, 0x4f, 0x1d, 0xac, 0xc7, 0xee, 0x59, 0xbd,
	0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x34, 0xd5, 0x7e, 0xa0, 0x04, 0x00, 0x00,
}
