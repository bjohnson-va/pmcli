// Code generated by protoc-gen-go. DO NOT EDIT.
// source: billing/v1/api.proto

package billing_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Create a billable item
type CreateBillableItemRequest struct {
	// The id of the merchant selling the product.
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// Unique id representing a product (Stock Keeping Unit).
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// The reference to the owner in the external system.
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	// Unique id for this instance of the sku.
	OrderId string `protobuf:"bytes,4,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// (Optional) The date when the billable item is expired.
	Expiry *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=expiry" json:"expiry,omitempty"`
	// (Optional) The date at which a billable item starts billing. This date can be in the past.
	BillingStart *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=billing_start,json=billingStart" json:"billing_start,omitempty"`
}

func (m *CreateBillableItemRequest) Reset()                    { *m = CreateBillableItemRequest{} }
func (m *CreateBillableItemRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBillableItemRequest) ProtoMessage()               {}
func (*CreateBillableItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateBillableItemRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *CreateBillableItemRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *CreateBillableItemRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *CreateBillableItemRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *CreateBillableItemRequest) GetExpiry() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *CreateBillableItemRequest) GetBillingStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.BillingStart
	}
	return nil
}

// Update a billable item's expiry date
type ExpireBillableItemRequest struct {
	// The id of the merchant selling the product.
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// Unique id representing a product (Stock Keeping Unit).
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// The reference to the owner in the external system
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	// Unique id for this instance of the sku.
	OrderId string `protobuf:"bytes,4,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// The date when the billable item is expired.
	Expiry *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *ExpireBillableItemRequest) Reset()                    { *m = ExpireBillableItemRequest{} }
func (m *ExpireBillableItemRequest) String() string            { return proto.CompactTextString(m) }
func (*ExpireBillableItemRequest) ProtoMessage()               {}
func (*ExpireBillableItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ExpireBillableItemRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *ExpireBillableItemRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *ExpireBillableItemRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *ExpireBillableItemRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ExpireBillableItemRequest) GetExpiry() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

// Create a merchant
type CreateMerchantRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The address of the merchant
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// The city of the merchant
	City string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	// The state of the merchant
	State string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	// The country of the merchant
	Country string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	// The zip code of the merchant
	ZipCode string `protobuf:"bytes,6,opt,name=zip_code,json=zipCode" json:"zip_code,omitempty"`
	// The email address of the merchant
	EmailAddress string `protobuf:"bytes,7,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	// The phone number of the merchant
	PhoneNumber string `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	// The contact name for the merchant
	ContactName string `protobuf:"bytes,9,opt,name=contact_name,json=contactName" json:"contact_name,omitempty"`
	// The company name of the merchant
	CompanyName string `protobuf:"bytes,10,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
}

func (m *CreateMerchantRequest) Reset()                    { *m = CreateMerchantRequest{} }
func (m *CreateMerchantRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMerchantRequest) ProtoMessage()               {}
func (*CreateMerchantRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CreateMerchantRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *CreateMerchantRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateMerchantRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CreateMerchantRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CreateMerchantRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *CreateMerchantRequest) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func (m *CreateMerchantRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *CreateMerchantRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreateMerchantRequest) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *CreateMerchantRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

// Get a merchant
type GetMerchantRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
}

func (m *GetMerchantRequest) Reset()                    { *m = GetMerchantRequest{} }
func (m *GetMerchantRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMerchantRequest) ProtoMessage()               {}
func (*GetMerchantRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetMerchantRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

// GetMerchantResponse returns a merchant
type GetMerchantResponse struct {
	// a get of the merchant data
	Merchant *Merchant `protobuf:"bytes,1,opt,name=merchant" json:"merchant,omitempty"`
}

func (m *GetMerchantResponse) Reset()                    { *m = GetMerchantResponse{} }
func (m *GetMerchantResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMerchantResponse) ProtoMessage()               {}
func (*GetMerchantResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetMerchantResponse) GetMerchant() *Merchant {
	if m != nil {
		return m.Merchant
	}
	return nil
}

// Update a merchant
type UpdateMerchantRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The address of the merchant
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// The city of the merchant
	City string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	// The state of the merchant
	State string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	// The country of the merchant
	Country string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	// The zip code of the merchant
	ZipCode string `protobuf:"bytes,6,opt,name=zip_code,json=zipCode" json:"zip_code,omitempty"`
	// The email address of the merchant
	EmailAddress string `protobuf:"bytes,7,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	// The phone number of the merchant
	PhoneNumber string `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	// The contact name for the merchant
	ContactName string `protobuf:"bytes,9,opt,name=contact_name,json=contactName" json:"contact_name,omitempty"`
	// The company name of the merchant
	CompanyName string `protobuf:"bytes,10,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
}

func (m *UpdateMerchantRequest) Reset()                    { *m = UpdateMerchantRequest{} }
func (m *UpdateMerchantRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMerchantRequest) ProtoMessage()               {}
func (*UpdateMerchantRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *UpdateMerchantRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *UpdateMerchantRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateMerchantRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpdateMerchantRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *UpdateMerchantRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UpdateMerchantRequest) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func (m *UpdateMerchantRequest) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *UpdateMerchantRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UpdateMerchantRequest) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *UpdateMerchantRequest) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

// Adds a Payment card to a customer
type CreatePaymentCardRequest struct {
	// The unique id of the stripe customer
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The token to access stripes API
	StripeToken string `protobuf:"bytes,2,opt,name=stripe_token,json=stripeToken" json:"stripe_token,omitempty"`
}

func (m *CreatePaymentCardRequest) Reset()                    { *m = CreatePaymentCardRequest{} }
func (m *CreatePaymentCardRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePaymentCardRequest) ProtoMessage()               {}
func (*CreatePaymentCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CreatePaymentCardRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *CreatePaymentCardRequest) GetStripeToken() string {
	if m != nil {
		return m.StripeToken
	}
	return ""
}

// Get the payment cards for a merchant
type ListPaymentCardsRequest struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
}

func (m *ListPaymentCardsRequest) Reset()                    { *m = ListPaymentCardsRequest{} }
func (m *ListPaymentCardsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPaymentCardsRequest) ProtoMessage()               {}
func (*ListPaymentCardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ListPaymentCardsRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

// GetPaymentMethodResponse returns the payment method configured for a merchant
type ListPaymentCardsResponse struct {
	// A get of the configured payment cards for this merchant
	PaymentCard []*PaymentCard `protobuf:"bytes,1,rep,name=payment_card,json=paymentCard" json:"payment_card,omitempty"`
}

func (m *ListPaymentCardsResponse) Reset()                    { *m = ListPaymentCardsResponse{} }
func (m *ListPaymentCardsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPaymentCardsResponse) ProtoMessage()               {}
func (*ListPaymentCardsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ListPaymentCardsResponse) GetPaymentCard() []*PaymentCard {
	if m != nil {
		return m.PaymentCard
	}
	return nil
}

// Update a payment card
type UpdatePaymentCardRequest struct {
	// The unique id of the stripe customer
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The token to access stripes API
	StripeToken string `protobuf:"bytes,2,opt,name=stripe_token,json=stripeToken" json:"stripe_token,omitempty"`
}

func (m *UpdatePaymentCardRequest) Reset()                    { *m = UpdatePaymentCardRequest{} }
func (m *UpdatePaymentCardRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePaymentCardRequest) ProtoMessage()               {}
func (*UpdatePaymentCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *UpdatePaymentCardRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *UpdatePaymentCardRequest) GetStripeToken() string {
	if m != nil {
		return m.StripeToken
	}
	return ""
}

// Delete a billable item
type DeleteBillableItemRequest struct {
	// The id of the merchant selling the product.
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// Unique id representing a product (Stock Keeping Unit).
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// The reference to the owner in the external system
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	// Unique id for this instance of the sku.
	OrderId string `protobuf:"bytes,4,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
}

func (m *DeleteBillableItemRequest) Reset()                    { *m = DeleteBillableItemRequest{} }
func (m *DeleteBillableItemRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBillableItemRequest) ProtoMessage()               {}
func (*DeleteBillableItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *DeleteBillableItemRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *DeleteBillableItemRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *DeleteBillableItemRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *DeleteBillableItemRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

// Generate an invoice for a given period
type GenerateInvoiceRequest struct {
	// The id of the merchant to generate an invoice for
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The start date of the invoice period
	PeriodStart *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=period_start,json=periodStart" json:"period_start,omitempty"`
	// The end date of the invoice period
	PeriodEnd *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=period_end,json=periodEnd" json:"period_end,omitempty"`
}

func (m *GenerateInvoiceRequest) Reset()                    { *m = GenerateInvoiceRequest{} }
func (m *GenerateInvoiceRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateInvoiceRequest) ProtoMessage()               {}
func (*GenerateInvoiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GenerateInvoiceRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *GenerateInvoiceRequest) GetPeriodStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.PeriodStart
	}
	return nil
}

func (m *GenerateInvoiceRequest) GetPeriodEnd() *google_protobuf1.Timestamp {
	if m != nil {
		return m.PeriodEnd
	}
	return nil
}

// GenerateInvoiceResponse returns the invoice_id of the invoice being generated
type GenerateInvoiceResponse struct {
	// An invoice identifier
	InvoiceId int64 `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
}

func (m *GenerateInvoiceResponse) Reset()                    { *m = GenerateInvoiceResponse{} }
func (m *GenerateInvoiceResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateInvoiceResponse) ProtoMessage()               {}
func (*GenerateInvoiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *GenerateInvoiceResponse) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

// Create a blank invoice
type CreateBlankRequest struct {
	// The id of the merchant to create the blank invoice for
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
}

func (m *CreateBlankRequest) Reset()                    { *m = CreateBlankRequest{} }
func (m *CreateBlankRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBlankRequest) ProtoMessage()               {}
func (*CreateBlankRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *CreateBlankRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

// CreateBlankResponse returns the invoice_id of the blank invoice being created
type CreateBlankResponse struct {
	// An invoice identifier
	InvoiceId int64 `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
}

func (m *CreateBlankResponse) Reset()                    { *m = CreateBlankResponse{} }
func (m *CreateBlankResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateBlankResponse) ProtoMessage()               {}
func (*CreateBlankResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *CreateBlankResponse) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

// GetInvoiceRequest requests an invoice matching the provided invoice_id
type GetInvoiceRequest struct {
	InvoiceId int64 `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
}

func (m *GetInvoiceRequest) Reset()                    { *m = GetInvoiceRequest{} }
func (m *GetInvoiceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInvoiceRequest) ProtoMessage()               {}
func (*GetInvoiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *GetInvoiceRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

// GetInvoiceResponse returns an invoice
type GetInvoiceResponse struct {
	// An invoice
	Invoice *Invoice `protobuf:"bytes,1,opt,name=invoice" json:"invoice,omitempty"`
}

func (m *GetInvoiceResponse) Reset()                    { *m = GetInvoiceResponse{} }
func (m *GetInvoiceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInvoiceResponse) ProtoMessage()               {}
func (*GetInvoiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *GetInvoiceResponse) GetInvoice() *Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

// ListInvoiceRequest requests multiple invoices for a merchant
type ListInvoiceRequest struct {
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// Options for how to page the response for this request
	PagingOptions *PagedRequestOptions `protobuf:"bytes,2,opt,name=paging_options,json=pagingOptions" json:"paging_options,omitempty"`
}

func (m *ListInvoiceRequest) Reset()                    { *m = ListInvoiceRequest{} }
func (m *ListInvoiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListInvoiceRequest) ProtoMessage()               {}
func (*ListInvoiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *ListInvoiceRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *ListInvoiceRequest) GetPagingOptions() *PagedRequestOptions {
	if m != nil {
		return m.PagingOptions
	}
	return nil
}

// ListInvoiceResponse returns an invoice
type ListInvoiceResponse struct {
	// The invoices
	Invoice []*Invoice `protobuf:"bytes,1,rep,name=invoice" json:"invoice,omitempty"`
	// Metadata about the paging
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,2,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
}

func (m *ListInvoiceResponse) Reset()                    { *m = ListInvoiceResponse{} }
func (m *ListInvoiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ListInvoiceResponse) ProtoMessage()               {}
func (*ListInvoiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *ListInvoiceResponse) GetInvoice() []*Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

func (m *ListInvoiceResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

// ChargeRequest requests a charge to a merchant
type ChargeRequest struct {
	// A merchant identifier
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// A list of amount to invoice allocations
	Allocations []*Allocation `protobuf:"bytes,3,rep,name=allocations" json:"allocations,omitempty"`
}

func (m *ChargeRequest) Reset()                    { *m = ChargeRequest{} }
func (m *ChargeRequest) String() string            { return proto.CompactTextString(m) }
func (*ChargeRequest) ProtoMessage()               {}
func (*ChargeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *ChargeRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *ChargeRequest) GetAllocations() []*Allocation {
	if m != nil {
		return m.Allocations
	}
	return nil
}

// AddLineItemRequest adds a lineitem to the invoice
type AddLineItemRequest struct {
	// The invoice to add the line item to
	InvoiceId int64 `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
	// The identifier of what products/subscription this lineitem refers to. Does not conform to the SKU standard
	Sku string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
	// How much each item cost (in cents)
	UnitPrice int64 `protobuf:"varint,3,opt,name=unit_price,json=unitPrice" json:"unit_price,omitempty"`
	// The number of items purchased
	Quantity int64 `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
	// The name or human readable description of what is being purchased
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
}

func (m *AddLineItemRequest) Reset()                    { *m = AddLineItemRequest{} }
func (m *AddLineItemRequest) String() string            { return proto.CompactTextString(m) }
func (*AddLineItemRequest) ProtoMessage()               {}
func (*AddLineItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *AddLineItemRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

func (m *AddLineItemRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *AddLineItemRequest) GetUnitPrice() int64 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *AddLineItemRequest) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *AddLineItemRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// PostInvoiceRequest posts the invoice
type PostInvoiceRequest struct {
	// The invoice to add the line item to
	InvoiceId int64 `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
}

func (m *PostInvoiceRequest) Reset()                    { *m = PostInvoiceRequest{} }
func (m *PostInvoiceRequest) String() string            { return proto.CompactTextString(m) }
func (*PostInvoiceRequest) ProtoMessage()               {}
func (*PostInvoiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *PostInvoiceRequest) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

type PagedResponseMetadata struct {
	// A cursor that can be provided to retrieve the next page of results
	NextCursor string `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *PagedResponseMetadata) Reset()                    { *m = PagedResponseMetadata{} }
func (m *PagedResponseMetadata) String() string            { return proto.CompactTextString(m) }
func (*PagedResponseMetadata) ProtoMessage()               {}
func (*PagedResponseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *PagedResponseMetadata) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *PagedResponseMetadata) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type PagedRequestOptions struct {
	// cursor can be passed to retrieve the next page of results keyed by the cursor
	Cursor string `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	// page_size specifies the number of items to return in the next page
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *PagedRequestOptions) Reset()                    { *m = PagedRequestOptions{} }
func (m *PagedRequestOptions) String() string            { return proto.CompactTextString(m) }
func (*PagedRequestOptions) ProtoMessage()               {}
func (*PagedRequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *PagedRequestOptions) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *PagedRequestOptions) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateBillableItemRequest)(nil), "billing.v1.CreateBillableItemRequest")
	proto.RegisterType((*ExpireBillableItemRequest)(nil), "billing.v1.ExpireBillableItemRequest")
	proto.RegisterType((*CreateMerchantRequest)(nil), "billing.v1.CreateMerchantRequest")
	proto.RegisterType((*GetMerchantRequest)(nil), "billing.v1.GetMerchantRequest")
	proto.RegisterType((*GetMerchantResponse)(nil), "billing.v1.GetMerchantResponse")
	proto.RegisterType((*UpdateMerchantRequest)(nil), "billing.v1.UpdateMerchantRequest")
	proto.RegisterType((*CreatePaymentCardRequest)(nil), "billing.v1.CreatePaymentCardRequest")
	proto.RegisterType((*ListPaymentCardsRequest)(nil), "billing.v1.ListPaymentCardsRequest")
	proto.RegisterType((*ListPaymentCardsResponse)(nil), "billing.v1.ListPaymentCardsResponse")
	proto.RegisterType((*UpdatePaymentCardRequest)(nil), "billing.v1.UpdatePaymentCardRequest")
	proto.RegisterType((*DeleteBillableItemRequest)(nil), "billing.v1.DeleteBillableItemRequest")
	proto.RegisterType((*GenerateInvoiceRequest)(nil), "billing.v1.GenerateInvoiceRequest")
	proto.RegisterType((*GenerateInvoiceResponse)(nil), "billing.v1.GenerateInvoiceResponse")
	proto.RegisterType((*CreateBlankRequest)(nil), "billing.v1.CreateBlankRequest")
	proto.RegisterType((*CreateBlankResponse)(nil), "billing.v1.CreateBlankResponse")
	proto.RegisterType((*GetInvoiceRequest)(nil), "billing.v1.GetInvoiceRequest")
	proto.RegisterType((*GetInvoiceResponse)(nil), "billing.v1.GetInvoiceResponse")
	proto.RegisterType((*ListInvoiceRequest)(nil), "billing.v1.ListInvoiceRequest")
	proto.RegisterType((*ListInvoiceResponse)(nil), "billing.v1.ListInvoiceResponse")
	proto.RegisterType((*ChargeRequest)(nil), "billing.v1.ChargeRequest")
	proto.RegisterType((*AddLineItemRequest)(nil), "billing.v1.AddLineItemRequest")
	proto.RegisterType((*PostInvoiceRequest)(nil), "billing.v1.PostInvoiceRequest")
	proto.RegisterType((*PagedResponseMetadata)(nil), "billing.v1.PagedResponseMetadata")
	proto.RegisterType((*PagedRequestOptions)(nil), "billing.v1.PagedRequestOptions")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Billing service

type BillingClient interface {
	// Creates a Billable Item
	CreateBillableItem(ctx context.Context, in *CreateBillableItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Updates a Billable Item
	ExpireBillableItem(ctx context.Context, in *ExpireBillableItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Delete a Billable Item
	DeleteBillableItem(ctx context.Context, in *DeleteBillableItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Get Usage Information
	ListProductSummaries(ctx context.Context, in *ListProductSummariesRequest, opts ...grpc.CallOption) (*ListProductSummariesResponse, error)
}

type billingClient struct {
	cc *grpc.ClientConn
}

func NewBillingClient(cc *grpc.ClientConn) BillingClient {
	return &billingClient{cc}
}

func (c *billingClient) CreateBillableItem(ctx context.Context, in *CreateBillableItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.Billing/CreateBillableItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExpireBillableItem(ctx context.Context, in *ExpireBillableItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.Billing/ExpireBillableItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteBillableItem(ctx context.Context, in *DeleteBillableItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.Billing/DeleteBillableItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListProductSummaries(ctx context.Context, in *ListProductSummariesRequest, opts ...grpc.CallOption) (*ListProductSummariesResponse, error) {
	out := new(ListProductSummariesResponse)
	err := grpc.Invoke(ctx, "/billing.v1.Billing/ListProductSummaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Billing service

type BillingServer interface {
	// Creates a Billable Item
	CreateBillableItem(context.Context, *CreateBillableItemRequest) (*google_protobuf.Empty, error)
	// Updates a Billable Item
	ExpireBillableItem(context.Context, *ExpireBillableItemRequest) (*google_protobuf.Empty, error)
	// Delete a Billable Item
	DeleteBillableItem(context.Context, *DeleteBillableItemRequest) (*google_protobuf.Empty, error)
	// Get Usage Information
	ListProductSummaries(context.Context, *ListProductSummariesRequest) (*ListProductSummariesResponse, error)
}

func RegisterBillingServer(s *grpc.Server, srv BillingServer) {
	s.RegisterService(&_Billing_serviceDesc, srv)
}

func _Billing_CreateBillableItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillableItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateBillableItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.Billing/CreateBillableItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateBillableItem(ctx, req.(*CreateBillableItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExpireBillableItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireBillableItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExpireBillableItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.Billing/ExpireBillableItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExpireBillableItem(ctx, req.(*ExpireBillableItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteBillableItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillableItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteBillableItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.Billing/DeleteBillableItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteBillableItem(ctx, req.(*DeleteBillableItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListProductSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ListProductSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.Billing/ListProductSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ListProductSummaries(ctx, req.(*ListProductSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Billing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.v1.Billing",
	HandlerType: (*BillingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBillableItem",
			Handler:    _Billing_CreateBillableItem_Handler,
		},
		{
			MethodName: "ExpireBillableItem",
			Handler:    _Billing_ExpireBillableItem_Handler,
		},
		{
			MethodName: "DeleteBillableItem",
			Handler:    _Billing_DeleteBillableItem_Handler,
		},
		{
			MethodName: "ListProductSummaries",
			Handler:    _Billing_ListProductSummaries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/v1/api.proto",
}

// Client API for MerchantService service

type MerchantServiceClient interface {
	// Creates a Merchant
	Create(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Gets a Merchant
	Get(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*GetMerchantResponse, error)
	// Update a Merchant
	Update(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Adds a payment card to the system
	CreatePaymentCard(ctx context.Context, in *CreatePaymentCardRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// List payment cards
	ListPaymentCards(ctx context.Context, in *ListPaymentCardsRequest, opts ...grpc.CallOption) (*ListPaymentCardsResponse, error)
	// Update a payment card in the system
	UpdatePaymentCard(ctx context.Context, in *UpdatePaymentCardRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Charge a merchant for an amount
	Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type merchantServiceClient struct {
	cc *grpc.ClientConn
}

func NewMerchantServiceClient(cc *grpc.ClientConn) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) Create(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.MerchantService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Get(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*GetMerchantResponse, error) {
	out := new(GetMerchantResponse)
	err := grpc.Invoke(ctx, "/billing.v1.MerchantService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Update(ctx context.Context, in *UpdateMerchantRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.MerchantService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreatePaymentCard(ctx context.Context, in *CreatePaymentCardRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.MerchantService/CreatePaymentCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListPaymentCards(ctx context.Context, in *ListPaymentCardsRequest, opts ...grpc.CallOption) (*ListPaymentCardsResponse, error) {
	out := new(ListPaymentCardsResponse)
	err := grpc.Invoke(ctx, "/billing.v1.MerchantService/ListPaymentCards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdatePaymentCard(ctx context.Context, in *UpdatePaymentCardRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.MerchantService/UpdatePaymentCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.MerchantService/Charge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MerchantService service

type MerchantServiceServer interface {
	// Creates a Merchant
	Create(context.Context, *CreateMerchantRequest) (*google_protobuf.Empty, error)
	// Gets a Merchant
	Get(context.Context, *GetMerchantRequest) (*GetMerchantResponse, error)
	// Update a Merchant
	Update(context.Context, *UpdateMerchantRequest) (*google_protobuf.Empty, error)
	// Adds a payment card to the system
	CreatePaymentCard(context.Context, *CreatePaymentCardRequest) (*google_protobuf.Empty, error)
	// List payment cards
	ListPaymentCards(context.Context, *ListPaymentCardsRequest) (*ListPaymentCardsResponse, error)
	// Update a payment card in the system
	UpdatePaymentCard(context.Context, *UpdatePaymentCardRequest) (*google_protobuf.Empty, error)
	// Charge a merchant for an amount
	Charge(context.Context, *ChargeRequest) (*google_protobuf.Empty, error)
}

func RegisterMerchantServiceServer(s *grpc.Server, srv MerchantServiceServer) {
	s.RegisterService(&_MerchantService_serviceDesc, srv)
}

func _MerchantService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.MerchantService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Create(ctx, req.(*CreateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.MerchantService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Get(ctx, req.(*GetMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.MerchantService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Update(ctx, req.(*UpdateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreatePaymentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreatePaymentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.MerchantService/CreatePaymentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreatePaymentCard(ctx, req.(*CreatePaymentCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListPaymentCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListPaymentCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.MerchantService/ListPaymentCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListPaymentCards(ctx, req.(*ListPaymentCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdatePaymentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdatePaymentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.MerchantService/UpdatePaymentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdatePaymentCard(ctx, req.(*UpdatePaymentCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.MerchantService/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Charge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.v1.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MerchantService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MerchantService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MerchantService_Update_Handler,
		},
		{
			MethodName: "CreatePaymentCard",
			Handler:    _MerchantService_CreatePaymentCard_Handler,
		},
		{
			MethodName: "ListPaymentCards",
			Handler:    _MerchantService_ListPaymentCards_Handler,
		},
		{
			MethodName: "UpdatePaymentCard",
			Handler:    _MerchantService_UpdatePaymentCard_Handler,
		},
		{
			MethodName: "Charge",
			Handler:    _MerchantService_Charge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/v1/api.proto",
}

// Client API for PrepaidSaleService service

type PrepaidSaleServiceClient interface {
	// List prepaid sales
	List(ctx context.Context, in *ListPrepaidSalesRequest, opts ...grpc.CallOption) (*ListPrepaidSalesResponse, error)
	// Create a prepaid sale
	Create(ctx context.Context, in *CreatePrepaidSaleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Update a prepaid sale
	Update(ctx context.Context, in *UpdatePrepaidSaleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Delete a prepaid sale
	Delete(ctx context.Context, in *DeletePrepaidSaleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type prepaidSaleServiceClient struct {
	cc *grpc.ClientConn
}

func NewPrepaidSaleServiceClient(cc *grpc.ClientConn) PrepaidSaleServiceClient {
	return &prepaidSaleServiceClient{cc}
}

func (c *prepaidSaleServiceClient) List(ctx context.Context, in *ListPrepaidSalesRequest, opts ...grpc.CallOption) (*ListPrepaidSalesResponse, error) {
	out := new(ListPrepaidSalesResponse)
	err := grpc.Invoke(ctx, "/billing.v1.PrepaidSaleService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prepaidSaleServiceClient) Create(ctx context.Context, in *CreatePrepaidSaleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.PrepaidSaleService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prepaidSaleServiceClient) Update(ctx context.Context, in *UpdatePrepaidSaleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.PrepaidSaleService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prepaidSaleServiceClient) Delete(ctx context.Context, in *DeletePrepaidSaleRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.PrepaidSaleService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PrepaidSaleService service

type PrepaidSaleServiceServer interface {
	// List prepaid sales
	List(context.Context, *ListPrepaidSalesRequest) (*ListPrepaidSalesResponse, error)
	// Create a prepaid sale
	Create(context.Context, *CreatePrepaidSaleRequest) (*google_protobuf.Empty, error)
	// Update a prepaid sale
	Update(context.Context, *UpdatePrepaidSaleRequest) (*google_protobuf.Empty, error)
	// Delete a prepaid sale
	Delete(context.Context, *DeletePrepaidSaleRequest) (*google_protobuf.Empty, error)
}

func RegisterPrepaidSaleServiceServer(s *grpc.Server, srv PrepaidSaleServiceServer) {
	s.RegisterService(&_PrepaidSaleService_serviceDesc, srv)
}

func _PrepaidSaleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrepaidSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrepaidSaleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.PrepaidSaleService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrepaidSaleServiceServer).List(ctx, req.(*ListPrepaidSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrepaidSaleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrepaidSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrepaidSaleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.PrepaidSaleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrepaidSaleServiceServer).Create(ctx, req.(*CreatePrepaidSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrepaidSaleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrepaidSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrepaidSaleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.PrepaidSaleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrepaidSaleServiceServer).Update(ctx, req.(*UpdatePrepaidSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrepaidSaleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrepaidSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrepaidSaleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.PrepaidSaleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrepaidSaleServiceServer).Delete(ctx, req.(*DeletePrepaidSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrepaidSaleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.v1.PrepaidSaleService",
	HandlerType: (*PrepaidSaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PrepaidSaleService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PrepaidSaleService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PrepaidSaleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PrepaidSaleService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/v1/api.proto",
}

// Client API for InvoiceService service

type InvoiceServiceClient interface {
	// Generate an invoice for a period
	Generate(ctx context.Context, in *GenerateInvoiceRequest, opts ...grpc.CallOption) (*GenerateInvoiceResponse, error)
	// Create a blank invoice for a period
	CreateBlank(ctx context.Context, in *CreateBlankRequest, opts ...grpc.CallOption) (*CreateBlankResponse, error)
	// Get an invoice
	Get(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
	// List invoices
	List(ctx context.Context, in *ListInvoiceRequest, opts ...grpc.CallOption) (*ListInvoiceResponse, error)
	// Add Line Item to an Invoice
	AddLineItem(ctx context.Context, in *AddLineItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Posts an invoice
	Post(ctx context.Context, in *PostInvoiceRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type invoiceServiceClient struct {
	cc *grpc.ClientConn
}

func NewInvoiceServiceClient(cc *grpc.ClientConn) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) Generate(ctx context.Context, in *GenerateInvoiceRequest, opts ...grpc.CallOption) (*GenerateInvoiceResponse, error) {
	out := new(GenerateInvoiceResponse)
	err := grpc.Invoke(ctx, "/billing.v1.InvoiceService/Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) CreateBlank(ctx context.Context, in *CreateBlankRequest, opts ...grpc.CallOption) (*CreateBlankResponse, error) {
	out := new(CreateBlankResponse)
	err := grpc.Invoke(ctx, "/billing.v1.InvoiceService/CreateBlank", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) Get(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	out := new(GetInvoiceResponse)
	err := grpc.Invoke(ctx, "/billing.v1.InvoiceService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) List(ctx context.Context, in *ListInvoiceRequest, opts ...grpc.CallOption) (*ListInvoiceResponse, error) {
	out := new(ListInvoiceResponse)
	err := grpc.Invoke(ctx, "/billing.v1.InvoiceService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) AddLineItem(ctx context.Context, in *AddLineItemRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.InvoiceService/AddLineItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) Post(ctx context.Context, in *PostInvoiceRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/billing.v1.InvoiceService/Post", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InvoiceService service

type InvoiceServiceServer interface {
	// Generate an invoice for a period
	Generate(context.Context, *GenerateInvoiceRequest) (*GenerateInvoiceResponse, error)
	// Create a blank invoice for a period
	CreateBlank(context.Context, *CreateBlankRequest) (*CreateBlankResponse, error)
	// Get an invoice
	Get(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	// List invoices
	List(context.Context, *ListInvoiceRequest) (*ListInvoiceResponse, error)
	// Add Line Item to an Invoice
	AddLineItem(context.Context, *AddLineItemRequest) (*google_protobuf.Empty, error)
	// Posts an invoice
	Post(context.Context, *PostInvoiceRequest) (*google_protobuf.Empty, error)
}

func RegisterInvoiceServiceServer(s *grpc.Server, srv InvoiceServiceServer) {
	s.RegisterService(&_InvoiceService_serviceDesc, srv)
}

func _InvoiceService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.InvoiceService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).Generate(ctx, req.(*GenerateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_CreateBlank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateBlank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.InvoiceService/CreateBlank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateBlank(ctx, req.(*CreateBlankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.InvoiceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).Get(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.InvoiceService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).List(ctx, req.(*ListInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_AddLineItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLineItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).AddLineItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.InvoiceService/AddLineItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).AddLineItem(ctx, req.(*AddLineItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v1.InvoiceService/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).Post(ctx, req.(*PostInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InvoiceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.v1.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _InvoiceService_Generate_Handler,
		},
		{
			MethodName: "CreateBlank",
			Handler:    _InvoiceService_CreateBlank_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InvoiceService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _InvoiceService_List_Handler,
		},
		{
			MethodName: "AddLineItem",
			Handler:    _InvoiceService_AddLineItem_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _InvoiceService_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/v1/api.proto",
}

func init() { proto.RegisterFile("billing/v1/api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x57, 0x4b, 0x6f, 0x1b, 0x55,
	0x14, 0xae, 0xe3, 0xd4, 0x8f, 0xe3, 0xa4, 0x8f, 0x9b, 0x34, 0x75, 0x5c, 0xd2, 0x24, 0xd3, 0x22,
	0xb2, 0xc1, 0xa1, 0x2e, 0x48, 0xa5, 0x52, 0x41, 0x6d, 0x9a, 0xa6, 0xa9, 0xda, 0x10, 0xd9, 0x2d,
	0x3b, 0x18, 0xdd, 0xcc, 0x1c, 0x9c, 0x4b, 0xe6, 0xd5, 0x3b, 0xd7, 0x51, 0x13, 0x89, 0x3f, 0xc0,
	0x8a, 0xdf, 0xc0, 0x1f, 0x60, 0xc1, 0x1e, 0x96, 0x2c, 0xf8, 0x49, 0x2c, 0x40, 0xf7, 0x31, 0xce,
	0x8c, 0x67, 0xec, 0x38, 0x48, 0x48, 0x20, 0xb1, 0xf3, 0x3d, 0xe7, 0x3b, 0x67, 0xce, 0xfb, 0x1c,
	0xc3, 0xe2, 0x01, 0xf3, 0x3c, 0x16, 0xf4, 0x37, 0x8f, 0xef, 0x6d, 0xd2, 0x88, 0xb5, 0x23, 0x1e,
	0x8a, 0x90, 0x80, 0xa1, 0xb6, 0x8f, 0xef, 0xb5, 0x6e, 0xf5, 0xc3, 0xb0, 0xef, 0xe1, 0xa6, 0xe2,
	0x1c, 0x0c, 0xbe, 0xd9, 0x44, 0x3f, 0x12, 0x27, 0x1a, 0xd8, 0x5a, 0x1d, 0x65, 0x0a, 0xe6, 0x63,
	0x2c, 0xa8, 0x1f, 0x19, 0xc0, 0x7b, 0x06, 0x40, 0x23, 0xb6, 0x49, 0x83, 0x20, 0x14, 0x54, 0xb0,
	0x30, 0x88, 0x0d, 0x77, 0x25, 0xf5, 0xf5, 0x88, 0x9e, 0xf8, 0x18, 0x08, 0xdb, 0xa1, 0xdc, 0x35,
	0xec, 0xe5, 0x14, 0xdb, 0x47, 0xee, 0x1c, 0xd2, 0x40, 0x14, 0x49, 0x72, 0x8c, 0x28, 0x73, 0xed,
	0x98, 0x7a, 0x68, 0xd8, 0xcd, 0x14, 0x9b, 0x05, 0xc7, 0x21, 0x73, 0x12, 0xce, 0x5a, 0x46, 0x30,
	0x74, 0x07, 0x8e, 0xb0, 0xe3, 0x81, 0xef, 0x53, 0x6e, 0x7c, 0xb2, 0xfe, 0x2c, 0xc1, 0xf2, 0x16,
	0x47, 0x2a, 0xf0, 0x09, 0xf3, 0x3c, 0x7a, 0xe0, 0xe1, 0xae, 0x40, 0xbf, 0x8b, 0x6f, 0x07, 0x18,
	0x0b, 0xb2, 0x0a, 0x8d, 0xc4, 0x14, 0x9b, 0xb9, 0xcd, 0xd2, 0x5a, 0x69, 0xa3, 0xde, 0x85, 0x84,
	0xb4, 0xeb, 0x92, 0x6b, 0x50, 0x8e, 0x8f, 0x06, 0xcd, 0x19, 0xc5, 0x90, 0x3f, 0xa5, 0x88, 0x33,
	0x88, 0x45, 0xe8, 0x23, 0x97, 0x22, 0x65, 0x2d, 0x92, 0x90, 0x76, 0x5d, 0xb2, 0x0c, 0xb5, 0x90,
	0xbb, 0x9a, 0x3b, 0xab, 0xb8, 0x55, 0xf5, 0xde, 0x75, 0x49, 0x07, 0x2a, 0xf8, 0x2e, 0x62, 0xfc,
	0xa4, 0x79, 0x79, 0xad, 0xb4, 0xd1, 0xe8, 0xb4, 0xda, 0x3a, 0xa0, 0xed, 0x24, 0xe2, 0xed, 0xd7,
	0x49, 0xc4, 0xbb, 0x06, 0x49, 0x3e, 0x87, 0x79, 0xe3, 0xa4, 0x1d, 0x0b, 0xca, 0x45, 0xb3, 0x72,
	0xae, 0xe8, 0x9c, 0x11, 0xe8, 0x49, 0xbc, 0xf5, 0x4b, 0x09, 0x96, 0xb7, 0xa5, 0xae, 0xff, 0x68,
	0x04, 0xac, 0x5f, 0x67, 0xe0, 0x86, 0x4e, 0xe1, 0x2b, 0x63, 0xd6, 0xd4, 0xc6, 0x37, 0xa1, 0x4a,
	0x5d, 0x97, 0x63, 0x1c, 0x1b, 0x07, 0x92, 0x27, 0x21, 0x30, 0xeb, 0x30, 0x71, 0x62, 0xac, 0x57,
	0xbf, 0xc9, 0x22, 0x5c, 0x8e, 0x05, 0x15, 0x68, 0x8c, 0xd6, 0x0f, 0xa9, 0xc3, 0x09, 0x07, 0x81,
	0x30, 0x36, 0xd7, 0xbb, 0xc9, 0x53, 0xfa, 0x79, 0xca, 0x22, 0xdb, 0x09, 0x5d, 0x54, 0x59, 0xa9,
	0x77, 0xab, 0xa7, 0x2c, 0xda, 0x0a, 0x5d, 0x24, 0x77, 0x60, 0x1e, 0x7d, 0xca, 0x3c, 0x3b, 0xf9,
	0x7c, 0x55, 0xf1, 0xe7, 0x14, 0xf1, 0xb1, 0xb1, 0x61, 0x1d, 0xe6, 0xa2, 0xc3, 0x30, 0x40, 0x3b,
	0x18, 0xf8, 0x07, 0xc8, 0x9b, 0x35, 0x85, 0x69, 0x28, 0xda, 0x9e, 0x22, 0x49, 0x88, 0x13, 0x06,
	0x82, 0x3a, 0xc2, 0x0e, 0xa8, 0x8f, 0xcd, 0xba, 0x86, 0x18, 0xda, 0x1e, 0xf5, 0x51, 0x43, 0xfc,
	0x88, 0x06, 0x27, 0x1a, 0x02, 0x09, 0x44, 0xd1, 0x24, 0xc4, 0xfa, 0x04, 0xc8, 0x0e, 0x8a, 0x8b,
	0x46, 0xcf, 0xda, 0x81, 0x85, 0x8c, 0x58, 0x1c, 0x85, 0x41, 0x8c, 0xe4, 0x23, 0xa8, 0x25, 0x20,
	0x25, 0xd4, 0xe8, 0x2c, 0xb6, 0xcf, 0x46, 0x4c, 0x7b, 0x88, 0x1f, 0xa2, 0x54, 0x06, 0xdf, 0x44,
	0xee, 0xff, 0x19, 0xfc, 0xdb, 0x19, 0xfc, 0x1a, 0x9a, 0xba, 0x05, 0xf6, 0xf5, 0x60, 0xdd, 0xa2,
	0xdc, 0x9d, 0x3a, 0x86, 0xeb, 0x30, 0x17, 0x0b, 0xce, 0x22, 0xb4, 0x45, 0x78, 0x84, 0x81, 0x09,
	0x64, 0x43, 0xd3, 0x5e, 0x4b, 0x92, 0xf5, 0x10, 0x6e, 0xbe, 0x64, 0xb1, 0x48, 0x69, 0x8f, 0xa7,
	0x2e, 0x93, 0x2f, 0xa1, 0x99, 0x97, 0x35, 0xb5, 0xf2, 0x10, 0xe6, 0xd2, 0xab, 0xa0, 0x59, 0x5a,
	0x2b, 0x6f, 0x34, 0x3a, 0x37, 0xd3, 0xf5, 0x92, 0xf6, 0xa8, 0x11, 0x9d, 0x3d, 0xa4, 0xcf, 0xba,
	0x68, 0xfe, 0x21, 0x9f, 0xbf, 0x2f, 0xc1, 0xf2, 0x53, 0xf4, 0xf0, 0xdf, 0xb0, 0x1a, 0xac, 0x9f,
	0x4b, 0xb0, 0xb4, 0x83, 0x01, 0x72, 0x2a, 0x70, 0x57, 0xef, 0xb8, 0xa9, 0x2d, 0x79, 0x04, 0x73,
	0x11, 0x72, 0x16, 0xba, 0x66, 0x43, 0xcc, 0x9c, 0x3b, 0x5a, 0x1b, 0x1a, 0xaf, 0x16, 0x04, 0xf9,
	0x14, 0xc0, 0x88, 0x63, 0xa0, 0xad, 0x9e, 0x2c, 0x5c, 0xd7, 0xe8, 0xed, 0xc0, 0xb5, 0x1e, 0xc0,
	0xcd, 0x9c, 0xd1, 0x26, 0xf3, 0x2b, 0x00, 0x66, 0x57, 0x27, 0x46, 0x97, 0xbb, 0x75, 0x43, 0xd9,
	0x75, 0xe5, 0x48, 0x32, 0x6b, 0xd9, 0xa3, 0xc1, 0xd1, 0xd4, 0xb5, 0xf6, 0x31, 0x2c, 0x64, 0xc4,
	0xa6, 0xfb, 0x58, 0x07, 0xae, 0xef, 0xa0, 0x18, 0x09, 0xeb, 0x39, 0x32, 0x5b, 0x6a, 0x66, 0x8e,
	0x7a, 0xf5, 0x21, 0x54, 0x0d, 0xc4, 0x8c, 0xbe, 0x85, 0x74, 0x29, 0x27, 0xe8, 0x04, 0x63, 0x7d,
	0x07, 0x44, 0xb6, 0xc6, 0x45, 0x13, 0xfa, 0x0c, 0xae, 0x44, 0xb4, 0x2f, 0x57, 0x7e, 0x18, 0xa9,
	0x0b, 0xcb, 0xa4, 0x74, 0x35, 0xdb, 0x37, 0x7d, 0x4c, 0xfa, 0xe1, 0x0b, 0x0d, 0xeb, 0xce, 0x6b,
	0x31, 0xf3, 0xb4, 0x7e, 0x28, 0xc1, 0x42, 0xe6, 0xfb, 0x45, 0x5e, 0x94, 0xcf, 0xf3, 0x82, 0xbc,
	0x80, 0xab, 0xc6, 0x1c, 0x1f, 0x05, 0x75, 0xa9, 0xa0, 0xc6, 0x9e, 0xf5, 0x02, 0x7b, 0xf4, 0x27,
	0x5e, 0x19, 0x60, 0xd7, 0x38, 0x92, 0xbc, 0xad, 0x6f, 0x61, 0x7e, 0xeb, 0x90, 0xf2, 0xfe, 0xf4,
	0xc1, 0x78, 0x00, 0x0d, 0xea, 0x79, 0xa1, 0xa3, 0x6f, 0xcd, 0x66, 0x59, 0x19, 0xbc, 0x94, 0xfe,
	0xf2, 0xe3, 0x21, 0xbb, 0x9b, 0x86, 0x5a, 0x3f, 0x96, 0x80, 0x3c, 0x76, 0xdd, 0x97, 0x2c, 0xc8,
	0x74, 0xf6, 0xe4, 0xc4, 0x17, 0xf4, 0xf5, 0x0a, 0xc0, 0x20, 0x60, 0xc2, 0x8e, 0xb8, 0x8c, 0x58,
	0x59, 0x0b, 0x48, 0xca, 0xbe, 0x24, 0x90, 0x16, 0xd4, 0xde, 0x0e, 0x68, 0x20, 0xe4, 0x32, 0x9a,
	0x55, 0xcc, 0xe1, 0x9b, 0xac, 0x41, 0xc3, 0xc5, 0xd8, 0xe1, 0x4c, 0x65, 0xc4, 0xac, 0x9f, 0x34,
	0xc9, 0xba, 0x0f, 0x64, 0x3f, 0x8c, 0x2f, 0x58, 0x9c, 0x3d, 0xb8, 0x51, 0x18, 0x6e, 0x19, 0xcd,
	0x00, 0xdf, 0x09, 0xdb, 0x19, 0xf0, 0x38, 0xe4, 0x49, 0x34, 0x25, 0x69, 0x4b, 0x51, 0xe4, 0x08,
	0x3a, 0xa4, 0xb1, 0xed, 0x87, 0x1c, 0x95, 0x8b, 0xb5, 0x6e, 0xf5, 0x90, 0xc6, 0xaf, 0x42, 0x8e,
	0xd6, 0x0b, 0x58, 0x28, 0xa8, 0x29, 0xb2, 0x04, 0x95, 0x8c, 0x36, 0xf3, 0x22, 0xb7, 0xa0, 0x1e,
	0xd1, 0x3e, 0xda, 0x31, 0x3b, 0xd5, 0xaa, 0xca, 0xdd, 0x9a, 0x24, 0xf4, 0xd8, 0x29, 0x76, 0xfe,
	0x98, 0x81, 0xea, 0x13, 0x9d, 0x21, 0xf2, 0x66, 0xd8, 0xea, 0xa9, 0x31, 0x4b, 0xde, 0x4f, 0x67,
	0x70, 0xec, 0x85, 0xde, 0x5a, 0xca, 0x0d, 0xa2, 0x6d, 0xf9, 0x8f, 0xc5, 0xba, 0x24, 0xd5, 0xe6,
	0xcf, 0xda, 0xac, 0xda, 0xb1, 0x67, 0xef, 0x64, 0xb5, 0xf9, 0xa5, 0x90, 0x55, 0x3b, 0x76, 0x69,
	0x4c, 0x50, 0x7b, 0x04, 0x8b, 0x6a, 0x49, 0xea, 0x3f, 0x29, 0x3d, 0xf5, 0x1f, 0x85, 0x61, 0x4c,
	0x3e, 0x48, 0x2b, 0x2e, 0x42, 0x24, 0xaa, 0x37, 0xce, 0x07, 0xea, 0x5a, 0xb0, 0x2e, 0x75, 0x7e,
	0x9a, 0x85, 0xab, 0xc9, 0xa5, 0xd5, 0x43, 0x7e, 0x2c, 0xab, 0x74, 0x1b, 0x2a, 0x3a, 0xca, 0x64,
	0x3d, 0x1f, 0xf9, 0x91, 0xb3, 0x6c, 0x82, 0x1f, 0xcf, 0xa0, 0xbc, 0x83, 0x82, 0xdc, 0x4e, 0xeb,
	0xc8, 0xdf, 0x96, 0xad, 0xd5, 0xb1, 0x7c, 0x33, 0x82, 0xb6, 0xa1, 0xa2, 0x97, 0x7b, 0xd6, 0x9c,
	0xc2, 0x2b, 0x71, 0x82, 0x39, 0x3d, 0xb8, 0x9e, 0xbb, 0x8b, 0xc8, 0xdd, 0xbc, 0x83, 0xf9, 0x13,
	0x62, 0x82, 0xd2, 0xaf, 0xe0, 0xda, 0xe8, 0x41, 0x43, 0xee, 0xe4, 0xc2, 0x9f, 0x3f, 0x95, 0x5a,
	0x77, 0x27, 0x83, 0x8c, 0xeb, 0x3d, 0xb8, 0x9e, 0xbb, 0x6b, 0xb2, 0x36, 0x8f, 0x3b, 0x7b, 0x26,
	0xd8, 0xfc, 0x08, 0x2a, 0x7a, 0xae, 0x92, 0xe5, 0x8c, 0xf7, 0xe9, 0x59, 0x3b, 0x5e, 0xbc, 0xf3,
	0xdb, 0x0c, 0x90, 0x7d, 0xfd, 0xcf, 0xbb, 0x47, 0x3d, 0x4c, 0x8a, 0xa6, 0x07, 0xb3, 0xd2, 0x8d,
	0x02, 0xef, 0xcf, 0xb0, 0x13, 0xbc, 0xcf, 0x80, 0x92, 0xea, 0x24, 0xcf, 0x87, 0x95, 0x58, 0x94,
	0xa8, 0x33, 0x99, 0xf3, 0x9d, 0x7e, 0x3e, 0x2c, 0xa2, 0xa2, 0xf0, 0x5d, 0x50, 0x93, 0xee, 0xea,
	0xac, 0x26, 0x4d, 0xbb, 0x88, 0xa6, 0xce, 0xef, 0x65, 0xb8, 0x62, 0x86, 0xf9, 0x59, 0x14, 0x6b,
	0xc9, 0x95, 0x44, 0xac, 0x6c, 0x63, 0x14, 0x1d, 0x7c, 0xad, 0x3b, 0x13, 0x31, 0xa6, 0x8a, 0xf6,
	0xa0, 0x91, 0xba, 0x84, 0xb2, 0x0d, 0x99, 0xbf, 0xac, 0xb2, 0x0d, 0x59, 0x74, 0x42, 0x3d, 0xd5,
	0x8d, 0xbd, 0x32, 0xd2, 0xb8, 0x23, 0xa6, 0xdd, 0x1e, 0xc7, 0x36, 0x5a, 0x76, 0x4c, 0xc1, 0xdc,
	0x1e, 0xad, 0x85, 0x11, 0x3d, 0xab, 0x63, 0xf9, 0xc3, 0xf9, 0xd0, 0x48, 0xad, 0xee, 0xac, 0xbe,
	0xfc, 0x4e, 0x1f, 0x97, 0x0f, 0xf2, 0x19, 0xcc, 0xca, 0xed, 0x9a, 0x95, 0xcf, 0xef, 0xdb, 0x71,
	0xf2, 0x07, 0x15, 0xf5, 0xbe, 0xff, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x01, 0xbc, 0x8c,
	0x5a, 0x13, 0x00, 0x00,
}
