// Code generated by protoc-gen-go. DO NOT EDIT.
// source: billing/v1/merchant.proto

package billing_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Merchant struct {
	// The unique id of the merchant
	MerchantId string `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId" json:"merchant_id,omitempty"`
	// The address of the merchant
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// The city of the merchant
	City string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	// The state of the merchant
	State string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	// The country of the merchant
	Country string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	// The zip code of the merchant
	ZipCode string `protobuf:"bytes,6,opt,name=zip_code,json=zipCode" json:"zip_code,omitempty"`
	// The email address of the merchant
	EmailAddress string `protobuf:"bytes,7,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	// The phone number of the merchant
	PhoneNumber string `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	// The contact name for the merchant
	ContactName string `protobuf:"bytes,9,opt,name=contact_name,json=contactName" json:"contact_name,omitempty"`
	// The company name of the merchant
	CompanyName string `protobuf:"bytes,10,opt,name=company_name,json=companyName" json:"company_name,omitempty"`
}

func (m *Merchant) Reset()                    { *m = Merchant{} }
func (m *Merchant) String() string            { return proto.CompactTextString(m) }
func (*Merchant) ProtoMessage()               {}
func (*Merchant) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Merchant) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *Merchant) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Merchant) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Merchant) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Merchant) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Merchant) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

func (m *Merchant) GetEmailAddress() string {
	if m != nil {
		return m.EmailAddress
	}
	return ""
}

func (m *Merchant) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Merchant) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *Merchant) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

// Allocation defines how a payment amount is allocated
type Allocation struct {
	// An invoice identifier
	InvoiceId int64 `protobuf:"varint,1,opt,name=invoice_id,json=invoiceId" json:"invoice_id,omitempty"`
	// An amount, in cents
	Amount int64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *Allocation) Reset()                    { *m = Allocation{} }
func (m *Allocation) String() string            { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()               {}
func (*Allocation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Allocation) GetInvoiceId() int64 {
	if m != nil {
		return m.InvoiceId
	}
	return 0
}

func (m *Allocation) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Merchant)(nil), "billing.v1.Merchant")
	proto.RegisterType((*Allocation)(nil), "billing.v1.Allocation")
}

func init() { proto.RegisterFile("billing/v1/merchant.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x34, 0x91, 0x4d, 0x6e, 0xc2, 0x30,
	0x10, 0x85, 0xc5, 0x3f, 0x0c, 0x74, 0x63, 0x55, 0x95, 0xa9, 0x54, 0xd1, 0xd2, 0x4d, 0x57, 0x44,
	0xa8, 0x27, 0x40, 0xac, 0x58, 0x94, 0x05, 0x17, 0x88, 0x1c, 0x7b, 0x0a, 0x96, 0x62, 0x4f, 0x94,
	0x18, 0x24, 0x38, 0x56, 0x4f, 0x58, 0x65, 0xec, 0xec, 0xf2, 0xbe, 0xf7, 0x65, 0x12, 0x8f, 0x61,
	0x59, 0xd8, 0xb2, 0xb4, 0xfe, 0x9c, 0xdd, 0xb6, 0x99, 0xc3, 0x5a, 0x5f, 0x94, 0x0f, 0x9b, 0xaa,
	0xa6, 0x40, 0x02, 0x52, 0xb5, 0xb9, 0x6d, 0x5f, 0x57, 0x67, 0xa2, 0x73, 0x89, 0x19, 0x37, 0xc5,
	0xf5, 0x37, 0x0b, 0xd6, 0x61, 0x13, 0x94, 0xab, 0xa2, 0xbc, 0xfe, 0xeb, 0xc3, 0xf4, 0x27, 0xbd,
	0x2f, 0x56, 0x30, 0xef, 0x66, 0xe5, 0xd6, 0xc8, 0xde, 0x7b, 0xef, 0x6b, 0x76, 0x82, 0x0e, 0x1d,
	0x8c, 0x90, 0x30, 0x51, 0xc6, 0xd4, 0xd8, 0x34, 0xb2, 0xcf, 0x65, 0x17, 0x85, 0x80, 0xa1, 0xb6,
	0xe1, 0x2e, 0x07, 0x8c, 0xf9, 0x59, 0x3c, 0xc3, 0xa8, 0x09, 0x2a, 0xa0, 0x1c, 0x32, 0x8c, 0xa1,
	0x9d, 0xa1, 0xe9, 0xea, 0x43, 0x7d, 0x97, 0xa3, 0x38, 0x23, 0x45, 0xb1, 0x84, 0xe9, 0xc3, 0x56,
	0xb9, 0x26, 0x83, 0x72, 0x1c, 0xab, 0x87, 0xad, 0xf6, 0x64, 0x50, 0x7c, 0xc2, 0x13, 0x3a, 0x65,
	0xcb, 0xbc, 0xfb, 0xfc, 0x84, 0xfb, 0x05, 0xc3, 0x5d, 0xfa, 0x87, 0x0f, 0x58, 0x54, 0x17, 0xf2,
	0x98, 0xfb, 0xab, 0x2b, 0xb0, 0x96, 0x53, 0x76, 0xe6, 0xcc, 0x8e, 0x8c, 0x5a, 0x45, 0x93, 0x0f,
	0x4a, 0x87, 0xdc, 0x2b, 0x87, 0x72, 0x16, 0x95, 0xc4, 0x8e, 0xca, 0x61, 0x54, 0x5c, 0xa5, 0xfc,
	0x3d, 0x2a, 0xd0, 0x29, 0xcc, 0x5a, 0x65, 0xbd, 0x07, 0xd8, 0x95, 0x25, 0x69, 0x15, 0x2c, 0x79,
	0xf1, 0x06, 0x60, 0xfd, 0x8d, 0xac, 0xc6, 0x6e, 0x69, 0x83, 0xd3, 0x2c, 0x91, 0x83, 0x11, 0x2f,
	0x30, 0x56, 0xae, 0x3d, 0x21, 0xaf, 0x6c, 0x70, 0x4a, 0xa9, 0x18, 0xf3, 0x05, 0x7c, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xe4, 0x3f, 0xa2, 0xae, 0xca, 0x01, 0x00, 0x00,
}
