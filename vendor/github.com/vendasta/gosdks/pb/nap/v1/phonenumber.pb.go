// Code generated by protoc-gen-go.
// source: phonenumber.proto
// DO NOT EDIT!

package nap_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PhoneNumberType int32

const (
	PhoneNumberType_FIXED_LINE           PhoneNumberType = 0
	PhoneNumberType_FIXED_LINE_OR_MOBILE PhoneNumberType = 1
	PhoneNumberType_MOBILE               PhoneNumberType = 2
	PhoneNumberType_PAGER                PhoneNumberType = 3
	PhoneNumberType_PERSONAL_NUMBER      PhoneNumberType = 4
	PhoneNumberType_PREMIUM_RATE         PhoneNumberType = 5
	PhoneNumberType_SHARED_COST          PhoneNumberType = 6
	PhoneNumberType_TOLL_FREE            PhoneNumberType = 7
	PhoneNumberType_UAN                  PhoneNumberType = 8
	PhoneNumberType_UNKNOWN              PhoneNumberType = 9
	PhoneNumberType_VOICEMAIL            PhoneNumberType = 10
	PhoneNumberType_VOIP                 PhoneNumberType = 11
)

var PhoneNumberType_name = map[int32]string{
	0:  "FIXED_LINE",
	1:  "FIXED_LINE_OR_MOBILE",
	2:  "MOBILE",
	3:  "PAGER",
	4:  "PERSONAL_NUMBER",
	5:  "PREMIUM_RATE",
	6:  "SHARED_COST",
	7:  "TOLL_FREE",
	8:  "UAN",
	9:  "UNKNOWN",
	10: "VOICEMAIL",
	11: "VOIP",
}
var PhoneNumberType_value = map[string]int32{
	"FIXED_LINE":           0,
	"FIXED_LINE_OR_MOBILE": 1,
	"MOBILE":               2,
	"PAGER":                3,
	"PERSONAL_NUMBER":      4,
	"PREMIUM_RATE":         5,
	"SHARED_COST":          6,
	"TOLL_FREE":            7,
	"UAN":                  8,
	"UNKNOWN":              9,
	"VOICEMAIL":            10,
	"VOIP":                 11,
}

func (x PhoneNumberType) String() string {
	return proto.EnumName(PhoneNumberType_name, int32(x))
}
func (PhoneNumberType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type PhoneNumberFormat int32

const (
	PhoneNumberFormat_NATIONAL      PhoneNumberFormat = 0
	PhoneNumberFormat_INTERNATIONAL PhoneNumberFormat = 1
	PhoneNumberFormat_E164          PhoneNumberFormat = 2
	PhoneNumberFormat_RFC3966       PhoneNumberFormat = 3
)

var PhoneNumberFormat_name = map[int32]string{
	0: "NATIONAL",
	1: "INTERNATIONAL",
	2: "E164",
	3: "RFC3966",
}
var PhoneNumberFormat_value = map[string]int32{
	"NATIONAL":      0,
	"INTERNATIONAL": 1,
	"E164":          2,
	"RFC3966":       3,
}

func (x PhoneNumberFormat) String() string {
	return proto.EnumName(PhoneNumberFormat_name, int32(x))
}
func (PhoneNumberFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type PhoneNumberValidators int32

const (
	PhoneNumberValidators_IsValid          PhoneNumberValidators = 0
	PhoneNumberValidators_IsValidForRegion PhoneNumberValidators = 1
)

var PhoneNumberValidators_name = map[int32]string{
	0: "IsValid",
	1: "IsValidForRegion",
}
var PhoneNumberValidators_value = map[string]int32{
	"IsValid":          0,
	"IsValidForRegion": 1,
}

func (x PhoneNumberValidators) String() string {
	return proto.EnumName(PhoneNumberValidators_name, int32(x))
}
func (PhoneNumberValidators) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type CountryCodeSource int32

const (
	CountryCodeSource_FROM_DEFAULT_COUNTRY          CountryCodeSource = 0
	CountryCodeSource_FROM_NUMBER_WITH_IDD          CountryCodeSource = 1
	CountryCodeSource_FROM_NUMBER_WITH_PLUS_SIGN    CountryCodeSource = 2
	CountryCodeSource_FROM_NUMBER_WITHOUT_PLUS_SIGN CountryCodeSource = 3
)

var CountryCodeSource_name = map[int32]string{
	0: "FROM_DEFAULT_COUNTRY",
	1: "FROM_NUMBER_WITH_IDD",
	2: "FROM_NUMBER_WITH_PLUS_SIGN",
	3: "FROM_NUMBER_WITHOUT_PLUS_SIGN",
}
var CountryCodeSource_value = map[string]int32{
	"FROM_DEFAULT_COUNTRY":          0,
	"FROM_NUMBER_WITH_IDD":          1,
	"FROM_NUMBER_WITH_PLUS_SIGN":    2,
	"FROM_NUMBER_WITHOUT_PLUS_SIGN": 3,
}

func (x CountryCodeSource) String() string {
	return proto.EnumName(CountryCodeSource_name, int32(x))
}
func (CountryCodeSource) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type ParseResult struct {
	// The unformatted national representation of the number
	NationalNumber string `protobuf:"bytes,1,opt,name=national_number,json=nationalNumber" json:"national_number,omitempty"`
	// The extension of the number
	Extension string `protobuf:"bytes,2,opt,name=extension" json:"extension,omitempty"`
	// The country code of the number
	CountryCode string `protobuf:"bytes,3,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// The source of the country code, which explains how it was determined
	CountryCodeSource CountryCodeSource `protobuf:"varint,4,opt,name=country_code_source,json=countryCodeSource,enum=nap.v1.CountryCodeSource" json:"country_code_source,omitempty"`
}

func (m *ParseResult) Reset()                    { *m = ParseResult{} }
func (m *ParseResult) String() string            { return proto.CompactTextString(m) }
func (*ParseResult) ProtoMessage()               {}
func (*ParseResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ParseResult) GetNationalNumber() string {
	if m != nil {
		return m.NationalNumber
	}
	return ""
}

func (m *ParseResult) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *ParseResult) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *ParseResult) GetCountryCodeSource() CountryCodeSource {
	if m != nil {
		return m.CountryCodeSource
	}
	return CountryCodeSource_FROM_DEFAULT_COUNTRY
}

type ValidationResult struct {
	// If the number is possible. This is the most lenient and fast validation, always performed
	IsPossible bool `protobuf:"varint,1,opt,name=is_possible,json=isPossible" json:"is_possible,omitempty"`
	// If the number is valid, if requested
	IsValid *google_protobuf.BoolValue `protobuf:"bytes,2,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	// If the number is valid for the specified region, if requested
	IsValidForRegion *google_protobuf.BoolValue `protobuf:"bytes,3,opt,name=is_valid_for_region,json=isValidForRegion" json:"is_valid_for_region,omitempty"`
}

func (m *ValidationResult) Reset()                    { *m = ValidationResult{} }
func (m *ValidationResult) String() string            { return proto.CompactTextString(m) }
func (*ValidationResult) ProtoMessage()               {}
func (*ValidationResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ValidationResult) GetIsPossible() bool {
	if m != nil {
		return m.IsPossible
	}
	return false
}

func (m *ValidationResult) GetIsValid() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsValid
	}
	return nil
}

func (m *ValidationResult) GetIsValidForRegion() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsValidForRegion
	}
	return nil
}

type FormatResult struct {
	National      string `protobuf:"bytes,1,opt,name=national" json:"national,omitempty"`
	International string `protobuf:"bytes,2,opt,name=international" json:"international,omitempty"`
	E164          string `protobuf:"bytes,3,opt,name=E164" json:"E164,omitempty"`
	RFC3966       string `protobuf:"bytes,4,opt,name=RFC3966" json:"RFC3966,omitempty"`
}

func (m *FormatResult) Reset()                    { *m = FormatResult{} }
func (m *FormatResult) String() string            { return proto.CompactTextString(m) }
func (*FormatResult) ProtoMessage()               {}
func (*FormatResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *FormatResult) GetNational() string {
	if m != nil {
		return m.National
	}
	return ""
}

func (m *FormatResult) GetInternational() string {
	if m != nil {
		return m.International
	}
	return ""
}

func (m *FormatResult) GetE164() string {
	if m != nil {
		return m.E164
	}
	return ""
}

func (m *FormatResult) GetRFC3966() string {
	if m != nil {
		return m.RFC3966
	}
	return ""
}

type MetaDataResult struct {
	// The approximate timezones relevant to this number
	Timezones []string `protobuf:"bytes,1,rep,name=timezones" json:"timezones,omitempty"`
	// A description of where the number is located -- may contain varying levels of specificity from country to city
	LocationDescription string `protobuf:"bytes,2,opt,name=location_description,json=locationDescription" json:"location_description,omitempty"`
	// The type of number -- mobile, landline, etc
	Type PhoneNumberType `protobuf:"varint,3,opt,name=type,enum=nap.v1.PhoneNumberType" json:"type,omitempty"`
}

func (m *MetaDataResult) Reset()                    { *m = MetaDataResult{} }
func (m *MetaDataResult) String() string            { return proto.CompactTextString(m) }
func (*MetaDataResult) ProtoMessage()               {}
func (*MetaDataResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *MetaDataResult) GetTimezones() []string {
	if m != nil {
		return m.Timezones
	}
	return nil
}

func (m *MetaDataResult) GetLocationDescription() string {
	if m != nil {
		return m.LocationDescription
	}
	return ""
}

func (m *MetaDataResult) GetType() PhoneNumberType {
	if m != nil {
		return m.Type
	}
	return PhoneNumberType_FIXED_LINE
}

type ParsePhoneNumberRequest struct {
	// The number to parse
	Number string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	// The is the region we are expecting this number to be from, but is only used if the number is is not written in international format.
	// The country calling code for the number in this case would be that of the default region supplied.
	// In most cases, this should be a ISO 3166-1 two letters country code, like `US`.
	DefaultRegion string                  `protobuf:"bytes,2,opt,name=default_region,json=defaultRegion" json:"default_region,omitempty"`
	Formats       []PhoneNumberFormat     `protobuf:"varint,3,rep,packed,name=formats,enum=nap.v1.PhoneNumberFormat" json:"formats,omitempty"`
	Validators    []PhoneNumberValidators `protobuf:"varint,4,rep,packed,name=validators,enum=nap.v1.PhoneNumberValidators" json:"validators,omitempty"`
}

func (m *ParsePhoneNumberRequest) Reset()                    { *m = ParsePhoneNumberRequest{} }
func (m *ParsePhoneNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*ParsePhoneNumberRequest) ProtoMessage()               {}
func (*ParsePhoneNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *ParsePhoneNumberRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *ParsePhoneNumberRequest) GetDefaultRegion() string {
	if m != nil {
		return m.DefaultRegion
	}
	return ""
}

func (m *ParsePhoneNumberRequest) GetFormats() []PhoneNumberFormat {
	if m != nil {
		return m.Formats
	}
	return nil
}

func (m *ParsePhoneNumberRequest) GetValidators() []PhoneNumberValidators {
	if m != nil {
		return m.Validators
	}
	return nil
}

type ParsePhoneNumberResponse struct {
	ParseResult      *ParseResult      `protobuf:"bytes,1,opt,name=parse_result,json=parseResult" json:"parse_result,omitempty"`
	ValidationResult *ValidationResult `protobuf:"bytes,2,opt,name=validation_result,json=validationResult" json:"validation_result,omitempty"`
	FormatResult     *FormatResult     `protobuf:"bytes,3,opt,name=format_result,json=formatResult" json:"format_result,omitempty"`
	MetadataResult   *MetaDataResult   `protobuf:"bytes,4,opt,name=metadata_result,json=metadataResult" json:"metadata_result,omitempty"`
}

func (m *ParsePhoneNumberResponse) Reset()                    { *m = ParsePhoneNumberResponse{} }
func (m *ParsePhoneNumberResponse) String() string            { return proto.CompactTextString(m) }
func (*ParsePhoneNumberResponse) ProtoMessage()               {}
func (*ParsePhoneNumberResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ParsePhoneNumberResponse) GetParseResult() *ParseResult {
	if m != nil {
		return m.ParseResult
	}
	return nil
}

func (m *ParsePhoneNumberResponse) GetValidationResult() *ValidationResult {
	if m != nil {
		return m.ValidationResult
	}
	return nil
}

func (m *ParsePhoneNumberResponse) GetFormatResult() *FormatResult {
	if m != nil {
		return m.FormatResult
	}
	return nil
}

func (m *ParsePhoneNumberResponse) GetMetadataResult() *MetaDataResult {
	if m != nil {
		return m.MetadataResult
	}
	return nil
}

func init() {
	proto.RegisterType((*ParseResult)(nil), "nap.v1.ParseResult")
	proto.RegisterType((*ValidationResult)(nil), "nap.v1.ValidationResult")
	proto.RegisterType((*FormatResult)(nil), "nap.v1.FormatResult")
	proto.RegisterType((*MetaDataResult)(nil), "nap.v1.MetaDataResult")
	proto.RegisterType((*ParsePhoneNumberRequest)(nil), "nap.v1.ParsePhoneNumberRequest")
	proto.RegisterType((*ParsePhoneNumberResponse)(nil), "nap.v1.ParsePhoneNumberResponse")
	proto.RegisterEnum("nap.v1.PhoneNumberType", PhoneNumberType_name, PhoneNumberType_value)
	proto.RegisterEnum("nap.v1.PhoneNumberFormat", PhoneNumberFormat_name, PhoneNumberFormat_value)
	proto.RegisterEnum("nap.v1.PhoneNumberValidators", PhoneNumberValidators_name, PhoneNumberValidators_value)
	proto.RegisterEnum("nap.v1.CountryCodeSource", CountryCodeSource_name, CountryCodeSource_value)
}

func init() { proto.RegisterFile("phonenumber.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x4d, 0x45, 0x3f, 0x43, 0x59, 0x5a, 0xad, 0xdd, 0x84, 0x35, 0x92, 0xd4, 0x11, 0x5a,
	0x34, 0x70, 0x01, 0x05, 0xb6, 0x5b, 0x03, 0x29, 0x50, 0x14, 0xb2, 0x44, 0x25, 0x44, 0x24, 0x52,
	0x58, 0x51, 0x4a, 0x7b, 0x5a, 0xd0, 0xd2, 0xca, 0x25, 0x40, 0x73, 0x59, 0x2e, 0xa5, 0xd6, 0x3d,
	0xf4, 0x01, 0x7a, 0xe8, 0xad, 0x8f, 0xd2, 0x17, 0xe8, 0xa9, 0x87, 0x3e, 0x54, 0xc1, 0x25, 0x29,
	0xd1, 0x72, 0x80, 0xdc, 0xb8, 0x33, 0xdf, 0x37, 0x9c, 0xf9, 0xf6, 0x9b, 0x85, 0x56, 0xf8, 0x13,
	0x0f, 0x58, 0xb0, 0xba, 0xbd, 0x66, 0x51, 0x27, 0x8c, 0x78, 0xcc, 0x71, 0x39, 0x70, 0xc3, 0xce,
	0xfa, 0xec, 0xf8, 0xf9, 0x0d, 0xe7, 0x37, 0x3e, 0x7b, 0x25, 0xa3, 0xd7, 0xab, 0xe5, 0xab, 0x5f,
	0x22, 0x37, 0x0c, 0x59, 0x24, 0x52, 0x5c, 0xfb, 0x1f, 0x05, 0xb4, 0xb1, 0x1b, 0x09, 0x46, 0x98,
	0x58, 0xf9, 0x31, 0xfe, 0x12, 0x9a, 0x81, 0x1b, 0x7b, 0x3c, 0x70, 0x7d, 0x9a, 0x16, 0xd4, 0x95,
	0x13, 0xe5, 0x65, 0x8d, 0x34, 0xf2, 0xb0, 0x25, 0xa3, 0xf8, 0x29, 0xd4, 0xd8, 0xaf, 0x31, 0x0b,
	0x84, 0xc7, 0x03, 0x7d, 0x5f, 0x42, 0xb6, 0x01, 0xfc, 0x02, 0xea, 0x73, 0xbe, 0x0a, 0xe2, 0xe8,
	0x8e, 0xce, 0xf9, 0x82, 0xe9, 0xaa, 0x04, 0x68, 0x59, 0xac, 0xc7, 0x17, 0x0c, 0x9b, 0x70, 0x58,
	0x84, 0x50, 0xc1, 0x57, 0xd1, 0x9c, 0xe9, 0xa5, 0x13, 0xe5, 0x65, 0xe3, 0xfc, 0xd3, 0x4e, 0xda,
	0x7f, 0xa7, 0xb7, 0x65, 0x4c, 0x24, 0x80, 0xb4, 0xe6, 0xbb, 0xa1, 0xf6, 0xdf, 0x0a, 0xa0, 0x99,
	0xeb, 0x7b, 0x0b, 0xd9, 0x62, 0x36, 0xc9, 0x67, 0xa0, 0x79, 0x82, 0x86, 0x5c, 0x08, 0xef, 0xda,
	0x67, 0x72, 0x8a, 0x2a, 0x01, 0x4f, 0x8c, 0xb3, 0x08, 0xfe, 0x06, 0xaa, 0x9e, 0xa0, 0xeb, 0x84,
	0x27, 0x07, 0xd0, 0xce, 0x8f, 0x3b, 0xa9, 0x5a, 0x9d, 0x5c, 0xad, 0xce, 0x15, 0xe7, 0xfe, 0xcc,
	0xf5, 0x57, 0x8c, 0x54, 0x3c, 0x21, 0x7f, 0x91, 0xf4, 0x9d, 0xd3, 0xe8, 0x92, 0x47, 0x34, 0x62,
	0x37, 0x89, 0x04, 0xea, 0x47, 0x2b, 0xa0, 0xac, 0xc2, 0x80, 0x47, 0x44, 0x72, 0xda, 0xbf, 0x43,
	0x7d, 0xc0, 0xa3, 0x5b, 0x37, 0xce, 0x5a, 0x3e, 0x86, 0x6a, 0xae, 0x72, 0xa6, 0xfa, 0xe6, 0x8c,
	0x3f, 0x87, 0x03, 0x2f, 0x88, 0x59, 0xb4, 0x01, 0xa4, 0x9a, 0xdf, 0x0f, 0x62, 0x0c, 0x25, 0xe3,
	0xec, 0xf2, 0xeb, 0x4c, 0x6f, 0xf9, 0x8d, 0x75, 0xa8, 0x90, 0x41, 0xef, 0xe2, 0xf5, 0xe5, 0xa5,
	0x14, 0xb7, 0x46, 0xf2, 0x63, 0xfb, 0x4f, 0x05, 0x1a, 0x23, 0x16, 0xbb, 0x7d, 0x37, 0x76, 0xb3,
	0x16, 0x9e, 0x42, 0x2d, 0xf6, 0x6e, 0xd9, 0x6f, 0x3c, 0x60, 0x42, 0x57, 0x4e, 0xd4, 0xe4, 0x5a,
	0x37, 0x01, 0x7c, 0x06, 0x47, 0x3e, 0x9f, 0xcb, 0x9f, 0xd1, 0x05, 0x13, 0xf3, 0xc8, 0x0b, 0xe3,
	0xed, 0xfd, 0x1f, 0xe6, 0xb9, 0xfe, 0x36, 0x85, 0xbf, 0x82, 0x52, 0x7c, 0x17, 0xa6, 0x0e, 0x68,
	0x9c, 0x3f, 0xc9, 0xef, 0x75, 0x9c, 0x38, 0x36, 0xb5, 0x92, 0x73, 0x17, 0x32, 0x22, 0x41, 0xed,
	0xff, 0x14, 0x78, 0x22, 0xdd, 0x58, 0x48, 0x13, 0xf6, 0xf3, 0x8a, 0x89, 0x18, 0x3f, 0x86, 0xf2,
	0x3d, 0x43, 0x66, 0x27, 0xfc, 0x05, 0x34, 0x16, 0x6c, 0xe9, 0xae, 0xfc, 0x38, 0xbf, 0x8a, 0x4c,
	0x99, 0x2c, 0x9a, 0x6a, 0x8d, 0x2f, 0xa0, 0xb2, 0x94, 0x5a, 0x0b, 0x5d, 0x3d, 0x51, 0x8b, 0x16,
	0x2b, 0xfc, 0x2b, 0xbb, 0x8d, 0x1c, 0x89, 0xbf, 0x03, 0x58, 0xa7, 0xbe, 0xe2, 0x91, 0xd0, 0x4b,
	0x92, 0xf7, 0xec, 0x03, 0xbc, 0xd9, 0x06, 0x44, 0x0a, 0x84, 0xf6, 0x5f, 0xfb, 0xa0, 0x3f, 0x1c,
	0x47, 0x84, 0x3c, 0x10, 0x0c, 0x5f, 0x42, 0x3d, 0x4c, 0x72, 0x34, 0x92, 0xca, 0xcb, 0xa9, 0xb4,
	0xf3, 0xc3, 0x4d, 0xf5, 0xed, 0x52, 0x12, 0x2d, 0x2c, 0x6c, 0xa8, 0x01, 0xad, 0xf5, 0xc6, 0xeb,
	0x39, 0x39, 0xf5, 0xaf, 0x9e, 0x93, 0x77, 0x97, 0x81, 0xa0, 0xf5, 0xee, 0x7a, 0xbc, 0x86, 0x83,
	0x74, 0xca, 0xbc, 0x44, 0x6a, 0xe0, 0xa3, 0xbc, 0x44, 0xd1, 0x98, 0xa4, 0xbe, 0x2c, 0xda, 0xf4,
	0x7b, 0x68, 0xde, 0xb2, 0xd8, 0x5d, 0xb8, 0xb1, 0x9b, 0x93, 0x4b, 0x92, 0xfc, 0x38, 0x27, 0xdf,
	0x37, 0x15, 0x69, 0xe4, 0xf0, 0xf4, 0x7c, 0xfa, 0xaf, 0x02, 0xcd, 0x1d, 0x03, 0xe0, 0x06, 0xc0,
	0xc0, 0xfc, 0xc1, 0xe8, 0xd3, 0xa1, 0x69, 0x19, 0x68, 0x0f, 0xeb, 0x70, 0xb4, 0x3d, 0x53, 0x9b,
	0xd0, 0x91, 0x7d, 0x65, 0x0e, 0x0d, 0xa4, 0x60, 0x80, 0x72, 0xf6, 0xbd, 0x8f, 0x6b, 0xf0, 0x68,
	0xdc, 0x7d, 0x63, 0x10, 0xa4, 0xe2, 0x43, 0x68, 0x8e, 0x0d, 0x32, 0xb1, 0xad, 0xee, 0x90, 0x5a,
	0xd3, 0xd1, 0x95, 0x41, 0x50, 0x09, 0x23, 0xa8, 0x8f, 0x89, 0x31, 0x32, 0xa7, 0x23, 0x4a, 0xba,
	0x8e, 0x81, 0x1e, 0xe1, 0x26, 0x68, 0x93, 0xb7, 0x5d, 0x62, 0xf4, 0x69, 0xcf, 0x9e, 0x38, 0xa8,
	0x8c, 0x0f, 0xa0, 0xe6, 0xd8, 0xc3, 0x21, 0x1d, 0x10, 0xc3, 0x40, 0x15, 0x5c, 0x01, 0x75, 0xda,
	0xb5, 0x50, 0x15, 0x6b, 0x50, 0x99, 0x5a, 0xef, 0x2c, 0xfb, 0xbd, 0x85, 0x6a, 0x09, 0x68, 0x66,
	0x9b, 0x3d, 0x63, 0xd4, 0x35, 0x87, 0x08, 0x70, 0x15, 0x4a, 0x33, 0xdb, 0x1c, 0x23, 0xed, 0xf4,
	0x1d, 0xb4, 0x1e, 0xf8, 0x07, 0xd7, 0xa1, 0x6a, 0x75, 0x1d, 0x33, 0x69, 0x05, 0xed, 0xe1, 0x16,
	0x1c, 0x98, 0x96, 0x63, 0x90, 0x4d, 0x48, 0x49, 0xf8, 0xc9, 0x6a, 0xa2, 0xfd, 0xe4, 0x2f, 0xd9,
	0x36, 0x22, 0xf5, 0xf4, 0x5b, 0xf8, 0xe4, 0x83, 0xa6, 0x4a, 0x50, 0x66, 0xfa, 0x78, 0xa0, 0x3d,
	0x7c, 0x04, 0xc8, 0xdc, 0x79, 0x49, 0x90, 0x72, 0xfa, 0x87, 0x02, 0xad, 0x07, 0x8f, 0xa5, 0x54,
	0x91, 0xd8, 0x23, 0xda, 0x37, 0x06, 0xdd, 0xe9, 0xd0, 0xa1, 0x3d, 0x7b, 0x6a, 0x39, 0xe4, 0xc7,
	0x4c, 0xdf, 0x24, 0x93, 0x4a, 0x45, 0xdf, 0x9b, 0xce, 0x5b, 0x6a, 0xf6, 0xfb, 0x48, 0xc1, 0xcf,
	0xe1, 0xf8, 0x41, 0x66, 0x3c, 0x9c, 0x4e, 0xe8, 0xc4, 0x7c, 0x63, 0xa1, 0x7d, 0xfc, 0x02, 0x9e,
	0xed, 0xe6, 0xed, 0xa9, 0x53, 0x80, 0xa8, 0xd7, 0x65, 0xf9, 0xfc, 0x5d, 0xfc, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0xc2, 0x8c, 0xa7, 0xde, 0x99, 0x06, 0x00, 0x00,
}
