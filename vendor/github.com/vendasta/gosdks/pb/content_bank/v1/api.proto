syntax = "proto3";

package content_bank.v1;

import "google/protobuf/empty.proto";
import "content_bank/v1/rss_feed.proto";
import "content_bank/v1/config.proto";

// Options for how to page the response for a List request
message PagedRequestOptions {
    // cursor can be passed to retrieve the next page of results keyed by the cursor
    string cursor = 1;
    // page_size specifies the number of items to return in the next page
    int64 page_size = 2;
}

// Metadata related to the paged response from a List request
message PagedResponseMetadata {
    // A cursor that can be provided to retrieve the next page of results
    string next_cursor = 1;
    // Whether or not more results exist
    bool has_more = 2;
}

// Stores data of an RSS feed
message RssFeedMetadata {
    // Total number of items attempted to add
    int64 feed_items = 1;
    // Number of items successfully added
    int64 successfully_added = 2;
    // Number of items failed to add
    int64 failed = 3;
}

// Create an rss feed from url. Parse RssFeedItems.
message CreateRssFeedRequest {
    // A unique id
    string partner_id = 1;
    // A unique id within the partner
    string market_id = 2;
    // URL of the RSS feed
    string feed_url = 3;
    // (Optional) name attached to the feed
    string feed_name = 4;
}

// Response returning length of items, successes, failures, error
message CreateRssFeedResponse {
    // Metadata for parsed feed items
    RssFeedMetadata data = 1;
    // Created rss feed
    string feed_name = 2;
}

// Refresh rss feed attributes and refresh rss feed items for a feed
message RefreshRssFeedRequest {
    // A unique id
    string partner_id = 1;
    // A unique id within the partner
    string market_id = 2;
    // URL of the RSS feed
    string feed_url = 3;
}

// Response returning length of items, successes, failures, error
message RefreshRssFeedResponse {
    // Feed info
    RssFeedMetadata data = 1;
}

// Request for a list of RssFeedItems
message ListRssFeedItemsRequest {
    // A unique partner id
    string partner_id = 1;
    // A unique market id within the partner
    string market_id = 2;
    // Options for how to page the response for this request
    PagedRequestOptions options = 3;
}

// A page of RssFeedItems and paging metadata
message ListRssFeedItemsResponse {
    // A list of unused rss feed items
    repeated RssFeedItem rss_feed_items = 1;
    // Metadata about the paged response
    PagedResponseMetadata paging_metadata = 2;
}

// Request for a partner configuration
message GetPartnerConfigRequest {
    // A unique partner id
    string partner_id = 1;
    // A unique market id within the partner
    string market_id = 2;
}

// Response with configuration for the requested partner
message GetPartnerConfigResponse {
    // The configuration for the requested partner
    Configuration configuration = 1;
}

// Request to update a partner's configuration
message UpdatePartnerConfigRequest {
    // a unique id
    string partner_id = 1;
    // a unique id within the partner
    string market_id = 2;
    // a list of business IDs to be disabled
    repeated string disabled_business_ids = 3;
}

// Request to get a list of RSS feeds for a partner/market
message ListRssFeedsRequest {
    // a unique id
    string partner_id = 1;
    // a unique id within the partner
    string market_id = 2;
    // Options for how to page the response for this request
    PagedRequestOptions options = 3;
}

// List of RSS feeds and paging metadata.
message ListRssFeedsResponse {
    // RSS Feeds that the partner has available to them
    repeated RssFeed rss_feeds = 1;
    // Metadata about the paged response
    PagedResponseMetadata paging_metadata = 2;
}

// ContentBank is a service for interacting with RSS feed content
service ContentBank {
    // Creates an RSS Feed from URL. Initiates a scrape for RssFeedItems.
    rpc CreateRssFeed(CreateRssFeedRequest) returns (CreateRssFeedResponse);
    // Refreshes an RSS Feed. Initiates a scrape for RssFeedItems.
    rpc RefreshRssFeed(RefreshRssFeedRequest) returns (RefreshRssFeedResponse);
    // Kicks off scheduling of posts.
    rpc SchedulePosts(google.protobuf.Empty) returns (google.protobuf.Empty);
    // List queue for partner.
    rpc ListRssFeedItems(ListRssFeedItemsRequest) returns (ListRssFeedItemsResponse);
    // GetPartnerConfig tries to get a config for a partner and creates one if it fails to find
    rpc GetPartnerConfig(GetPartnerConfigRequest) returns (GetPartnerConfigResponse);
    // UpdatePartnerConfig modified a configuration for a partner
    rpc UpdatePartnerConfig(UpdatePartnerConfigRequest) returns (google.protobuf.Empty);
    // ListRssFeeds returns the list of RSS feeds a partner has added to the content bank
    rpc ListRssFeeds(ListRssFeedsRequest) returns (ListRssFeedsResponse);
}
