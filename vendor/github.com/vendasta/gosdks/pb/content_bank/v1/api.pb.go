// Code generated by protoc-gen-go. DO NOT EDIT.
// source: content_bank/v1/api.proto

/*
Package content_bank_v1 is a generated protocol buffer package.

It is generated from these files:
	content_bank/v1/api.proto
	content_bank/v1/config.proto
	content_bank/v1/rss_feed.proto

It has these top-level messages:
	PagedRequestOptions
	PagedResponseMetadata
	RssFeedMetadata
	CreateRssFeedRequest
	CreateRssFeedResponse
	RefreshRssFeedRequest
	RefreshRssFeedResponse
	ListRssFeedItemsRequest
	ListRssFeedItemsResponse
	GetPartnerConfigRequest
	GetPartnerConfigResponse
	UpdatePartnerConfigRequest
	ListRssFeedsRequest
	ListRssFeedsResponse
	Configuration
	RssFeed
	RssFeedItem
*/
package content_bank_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Options for how to page the response for a List request
type PagedRequestOptions struct {
	// cursor can be passed to retrieve the next page of results keyed by the cursor
	Cursor string `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	// page_size specifies the number of items to return in the next page
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *PagedRequestOptions) Reset()                    { *m = PagedRequestOptions{} }
func (m *PagedRequestOptions) String() string            { return proto.CompactTextString(m) }
func (*PagedRequestOptions) ProtoMessage()               {}
func (*PagedRequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PagedRequestOptions) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *PagedRequestOptions) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// Metadata related to the paged response from a List request
type PagedResponseMetadata struct {
	// A cursor that can be provided to retrieve the next page of results
	NextCursor string `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *PagedResponseMetadata) Reset()                    { *m = PagedResponseMetadata{} }
func (m *PagedResponseMetadata) String() string            { return proto.CompactTextString(m) }
func (*PagedResponseMetadata) ProtoMessage()               {}
func (*PagedResponseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PagedResponseMetadata) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *PagedResponseMetadata) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// Stores data of an RSS feed
type RssFeedMetadata struct {
	// Total number of items attempted to add
	FeedItems int64 `protobuf:"varint,1,opt,name=feed_items,json=feedItems" json:"feed_items,omitempty"`
	// Number of items successfully added
	SuccessfullyAdded int64 `protobuf:"varint,2,opt,name=successfully_added,json=successfullyAdded" json:"successfully_added,omitempty"`
	// Number of items failed to add
	Failed int64 `protobuf:"varint,3,opt,name=failed" json:"failed,omitempty"`
}

func (m *RssFeedMetadata) Reset()                    { *m = RssFeedMetadata{} }
func (m *RssFeedMetadata) String() string            { return proto.CompactTextString(m) }
func (*RssFeedMetadata) ProtoMessage()               {}
func (*RssFeedMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RssFeedMetadata) GetFeedItems() int64 {
	if m != nil {
		return m.FeedItems
	}
	return 0
}

func (m *RssFeedMetadata) GetSuccessfullyAdded() int64 {
	if m != nil {
		return m.SuccessfullyAdded
	}
	return 0
}

func (m *RssFeedMetadata) GetFailed() int64 {
	if m != nil {
		return m.Failed
	}
	return 0
}

// Create an rss feed from url. Parse RssFeedItems.
type CreateRssFeedRequest struct {
	// A unique id
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// A unique id within the partner
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// URL of the RSS feed
	FeedUrl string `protobuf:"bytes,3,opt,name=feed_url,json=feedUrl" json:"feed_url,omitempty"`
	// (Optional) name attached to the feed
	FeedName string `protobuf:"bytes,4,opt,name=feed_name,json=feedName" json:"feed_name,omitempty"`
}

func (m *CreateRssFeedRequest) Reset()                    { *m = CreateRssFeedRequest{} }
func (m *CreateRssFeedRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRssFeedRequest) ProtoMessage()               {}
func (*CreateRssFeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateRssFeedRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *CreateRssFeedRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *CreateRssFeedRequest) GetFeedUrl() string {
	if m != nil {
		return m.FeedUrl
	}
	return ""
}

func (m *CreateRssFeedRequest) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

// Response returning length of items, successes, failures, error
type CreateRssFeedResponse struct {
	// Metadata for parsed feed items
	Data *RssFeedMetadata `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// Created rss feed
	FeedName string `protobuf:"bytes,2,opt,name=feed_name,json=feedName" json:"feed_name,omitempty"`
}

func (m *CreateRssFeedResponse) Reset()                    { *m = CreateRssFeedResponse{} }
func (m *CreateRssFeedResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRssFeedResponse) ProtoMessage()               {}
func (*CreateRssFeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateRssFeedResponse) GetData() *RssFeedMetadata {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateRssFeedResponse) GetFeedName() string {
	if m != nil {
		return m.FeedName
	}
	return ""
}

// Refresh rss feed attributes and refresh rss feed items for a feed
type RefreshRssFeedRequest struct {
	// A unique id
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// A unique id within the partner
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// URL of the RSS feed
	FeedUrl string `protobuf:"bytes,3,opt,name=feed_url,json=feedUrl" json:"feed_url,omitempty"`
}

func (m *RefreshRssFeedRequest) Reset()                    { *m = RefreshRssFeedRequest{} }
func (m *RefreshRssFeedRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshRssFeedRequest) ProtoMessage()               {}
func (*RefreshRssFeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RefreshRssFeedRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *RefreshRssFeedRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *RefreshRssFeedRequest) GetFeedUrl() string {
	if m != nil {
		return m.FeedUrl
	}
	return ""
}

// Response returning length of items, successes, failures, error
type RefreshRssFeedResponse struct {
	// Feed info
	Data *RssFeedMetadata `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *RefreshRssFeedResponse) Reset()                    { *m = RefreshRssFeedResponse{} }
func (m *RefreshRssFeedResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshRssFeedResponse) ProtoMessage()               {}
func (*RefreshRssFeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RefreshRssFeedResponse) GetData() *RssFeedMetadata {
	if m != nil {
		return m.Data
	}
	return nil
}

// Request for a list of RssFeedItems
type ListRssFeedItemsRequest struct {
	// A unique partner id
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// A unique market id within the partner
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// Options for how to page the response for this request
	Options *PagedRequestOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *ListRssFeedItemsRequest) Reset()                    { *m = ListRssFeedItemsRequest{} }
func (m *ListRssFeedItemsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRssFeedItemsRequest) ProtoMessage()               {}
func (*ListRssFeedItemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListRssFeedItemsRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *ListRssFeedItemsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ListRssFeedItemsRequest) GetOptions() *PagedRequestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// A page of RssFeedItems and paging metadata
type ListRssFeedItemsResponse struct {
	// A list of unused rss feed items
	RssFeedItems []*RssFeedItem `protobuf:"bytes,1,rep,name=rss_feed_items,json=rssFeedItems" json:"rss_feed_items,omitempty"`
	// Metadata about the paged response
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,2,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
}

func (m *ListRssFeedItemsResponse) Reset()                    { *m = ListRssFeedItemsResponse{} }
func (m *ListRssFeedItemsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRssFeedItemsResponse) ProtoMessage()               {}
func (*ListRssFeedItemsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListRssFeedItemsResponse) GetRssFeedItems() []*RssFeedItem {
	if m != nil {
		return m.RssFeedItems
	}
	return nil
}

func (m *ListRssFeedItemsResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

// Request for a partner configuration
type GetPartnerConfigRequest struct {
	// A unique partner id
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// A unique market id within the partner
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *GetPartnerConfigRequest) Reset()                    { *m = GetPartnerConfigRequest{} }
func (m *GetPartnerConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPartnerConfigRequest) ProtoMessage()               {}
func (*GetPartnerConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetPartnerConfigRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *GetPartnerConfigRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// Response with configuration for the requested partner
type GetPartnerConfigResponse struct {
	// The configuration for the requested partner
	Configuration *Configuration `protobuf:"bytes,1,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *GetPartnerConfigResponse) Reset()                    { *m = GetPartnerConfigResponse{} }
func (m *GetPartnerConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPartnerConfigResponse) ProtoMessage()               {}
func (*GetPartnerConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetPartnerConfigResponse) GetConfiguration() *Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// Request to update a partner's configuration
type UpdatePartnerConfigRequest struct {
	// a unique id
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// a unique id within the partner
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// a list of business IDs to be disabled
	DisabledBusinessIds []string `protobuf:"bytes,3,rep,name=disabled_business_ids,json=disabledBusinessIds" json:"disabled_business_ids,omitempty"`
}

func (m *UpdatePartnerConfigRequest) Reset()                    { *m = UpdatePartnerConfigRequest{} }
func (m *UpdatePartnerConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePartnerConfigRequest) ProtoMessage()               {}
func (*UpdatePartnerConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdatePartnerConfigRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *UpdatePartnerConfigRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *UpdatePartnerConfigRequest) GetDisabledBusinessIds() []string {
	if m != nil {
		return m.DisabledBusinessIds
	}
	return nil
}

// Request to get a list of RSS feeds for a partner/market
type ListRssFeedsRequest struct {
	// a unique id
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// a unique id within the partner
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// Options for how to page the response for this request
	Options *PagedRequestOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (m *ListRssFeedsRequest) Reset()                    { *m = ListRssFeedsRequest{} }
func (m *ListRssFeedsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRssFeedsRequest) ProtoMessage()               {}
func (*ListRssFeedsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListRssFeedsRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *ListRssFeedsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ListRssFeedsRequest) GetOptions() *PagedRequestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// List of RSS feeds and paging metadata.
type ListRssFeedsResponse struct {
	// RSS Feeds that the partner has available to them
	RssFeeds []*RssFeed `protobuf:"bytes,1,rep,name=rss_feeds,json=rssFeeds" json:"rss_feeds,omitempty"`
	// Metadata about the paged response
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,2,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
}

func (m *ListRssFeedsResponse) Reset()                    { *m = ListRssFeedsResponse{} }
func (m *ListRssFeedsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRssFeedsResponse) ProtoMessage()               {}
func (*ListRssFeedsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListRssFeedsResponse) GetRssFeeds() []*RssFeed {
	if m != nil {
		return m.RssFeeds
	}
	return nil
}

func (m *ListRssFeedsResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

func init() {
	proto.RegisterType((*PagedRequestOptions)(nil), "content_bank.v1.PagedRequestOptions")
	proto.RegisterType((*PagedResponseMetadata)(nil), "content_bank.v1.PagedResponseMetadata")
	proto.RegisterType((*RssFeedMetadata)(nil), "content_bank.v1.RssFeedMetadata")
	proto.RegisterType((*CreateRssFeedRequest)(nil), "content_bank.v1.CreateRssFeedRequest")
	proto.RegisterType((*CreateRssFeedResponse)(nil), "content_bank.v1.CreateRssFeedResponse")
	proto.RegisterType((*RefreshRssFeedRequest)(nil), "content_bank.v1.RefreshRssFeedRequest")
	proto.RegisterType((*RefreshRssFeedResponse)(nil), "content_bank.v1.RefreshRssFeedResponse")
	proto.RegisterType((*ListRssFeedItemsRequest)(nil), "content_bank.v1.ListRssFeedItemsRequest")
	proto.RegisterType((*ListRssFeedItemsResponse)(nil), "content_bank.v1.ListRssFeedItemsResponse")
	proto.RegisterType((*GetPartnerConfigRequest)(nil), "content_bank.v1.GetPartnerConfigRequest")
	proto.RegisterType((*GetPartnerConfigResponse)(nil), "content_bank.v1.GetPartnerConfigResponse")
	proto.RegisterType((*UpdatePartnerConfigRequest)(nil), "content_bank.v1.UpdatePartnerConfigRequest")
	proto.RegisterType((*ListRssFeedsRequest)(nil), "content_bank.v1.ListRssFeedsRequest")
	proto.RegisterType((*ListRssFeedsResponse)(nil), "content_bank.v1.ListRssFeedsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContentBank service

type ContentBankClient interface {
	// Creates an RSS Feed from URL. Initiates a scrape for RssFeedItems.
	CreateRssFeed(ctx context.Context, in *CreateRssFeedRequest, opts ...grpc.CallOption) (*CreateRssFeedResponse, error)
	// Refreshes an RSS Feed. Initiates a scrape for RssFeedItems.
	RefreshRssFeed(ctx context.Context, in *RefreshRssFeedRequest, opts ...grpc.CallOption) (*RefreshRssFeedResponse, error)
	// Kicks off scheduling of posts.
	SchedulePosts(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// List queue for partner.
	ListRssFeedItems(ctx context.Context, in *ListRssFeedItemsRequest, opts ...grpc.CallOption) (*ListRssFeedItemsResponse, error)
	// GetPartnerConfig tries to get a config for a partner and creates one if it fails to find
	GetPartnerConfig(ctx context.Context, in *GetPartnerConfigRequest, opts ...grpc.CallOption) (*GetPartnerConfigResponse, error)
	// UpdatePartnerConfig modified a configuration for a partner
	UpdatePartnerConfig(ctx context.Context, in *UpdatePartnerConfigRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// ListRssFeeds returns the list of RSS feeds a partner has added to the content bank
	ListRssFeeds(ctx context.Context, in *ListRssFeedsRequest, opts ...grpc.CallOption) (*ListRssFeedsResponse, error)
}

type contentBankClient struct {
	cc *grpc.ClientConn
}

func NewContentBankClient(cc *grpc.ClientConn) ContentBankClient {
	return &contentBankClient{cc}
}

func (c *contentBankClient) CreateRssFeed(ctx context.Context, in *CreateRssFeedRequest, opts ...grpc.CallOption) (*CreateRssFeedResponse, error) {
	out := new(CreateRssFeedResponse)
	err := grpc.Invoke(ctx, "/content_bank.v1.ContentBank/CreateRssFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentBankClient) RefreshRssFeed(ctx context.Context, in *RefreshRssFeedRequest, opts ...grpc.CallOption) (*RefreshRssFeedResponse, error) {
	out := new(RefreshRssFeedResponse)
	err := grpc.Invoke(ctx, "/content_bank.v1.ContentBank/RefreshRssFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentBankClient) SchedulePosts(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/content_bank.v1.ContentBank/SchedulePosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentBankClient) ListRssFeedItems(ctx context.Context, in *ListRssFeedItemsRequest, opts ...grpc.CallOption) (*ListRssFeedItemsResponse, error) {
	out := new(ListRssFeedItemsResponse)
	err := grpc.Invoke(ctx, "/content_bank.v1.ContentBank/ListRssFeedItems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentBankClient) GetPartnerConfig(ctx context.Context, in *GetPartnerConfigRequest, opts ...grpc.CallOption) (*GetPartnerConfigResponse, error) {
	out := new(GetPartnerConfigResponse)
	err := grpc.Invoke(ctx, "/content_bank.v1.ContentBank/GetPartnerConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentBankClient) UpdatePartnerConfig(ctx context.Context, in *UpdatePartnerConfigRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/content_bank.v1.ContentBank/UpdatePartnerConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentBankClient) ListRssFeeds(ctx context.Context, in *ListRssFeedsRequest, opts ...grpc.CallOption) (*ListRssFeedsResponse, error) {
	out := new(ListRssFeedsResponse)
	err := grpc.Invoke(ctx, "/content_bank.v1.ContentBank/ListRssFeeds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContentBank service

type ContentBankServer interface {
	// Creates an RSS Feed from URL. Initiates a scrape for RssFeedItems.
	CreateRssFeed(context.Context, *CreateRssFeedRequest) (*CreateRssFeedResponse, error)
	// Refreshes an RSS Feed. Initiates a scrape for RssFeedItems.
	RefreshRssFeed(context.Context, *RefreshRssFeedRequest) (*RefreshRssFeedResponse, error)
	// Kicks off scheduling of posts.
	SchedulePosts(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	// List queue for partner.
	ListRssFeedItems(context.Context, *ListRssFeedItemsRequest) (*ListRssFeedItemsResponse, error)
	// GetPartnerConfig tries to get a config for a partner and creates one if it fails to find
	GetPartnerConfig(context.Context, *GetPartnerConfigRequest) (*GetPartnerConfigResponse, error)
	// UpdatePartnerConfig modified a configuration for a partner
	UpdatePartnerConfig(context.Context, *UpdatePartnerConfigRequest) (*google_protobuf.Empty, error)
	// ListRssFeeds returns the list of RSS feeds a partner has added to the content bank
	ListRssFeeds(context.Context, *ListRssFeedsRequest) (*ListRssFeedsResponse, error)
}

func RegisterContentBankServer(s *grpc.Server, srv ContentBankServer) {
	s.RegisterService(&_ContentBank_serviceDesc, srv)
}

func _ContentBank_CreateRssFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRssFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentBankServer).CreateRssFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_bank.v1.ContentBank/CreateRssFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentBankServer).CreateRssFeed(ctx, req.(*CreateRssFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentBank_RefreshRssFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRssFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentBankServer).RefreshRssFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_bank.v1.ContentBank/RefreshRssFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentBankServer).RefreshRssFeed(ctx, req.(*RefreshRssFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentBank_SchedulePosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentBankServer).SchedulePosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_bank.v1.ContentBank/SchedulePosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentBankServer).SchedulePosts(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentBank_ListRssFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRssFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentBankServer).ListRssFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_bank.v1.ContentBank/ListRssFeedItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentBankServer).ListRssFeedItems(ctx, req.(*ListRssFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentBank_GetPartnerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentBankServer).GetPartnerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_bank.v1.ContentBank/GetPartnerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentBankServer).GetPartnerConfig(ctx, req.(*GetPartnerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentBank_UpdatePartnerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentBankServer).UpdatePartnerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_bank.v1.ContentBank/UpdatePartnerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentBankServer).UpdatePartnerConfig(ctx, req.(*UpdatePartnerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentBank_ListRssFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRssFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentBankServer).ListRssFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_bank.v1.ContentBank/ListRssFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentBankServer).ListRssFeeds(ctx, req.(*ListRssFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentBank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content_bank.v1.ContentBank",
	HandlerType: (*ContentBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRssFeed",
			Handler:    _ContentBank_CreateRssFeed_Handler,
		},
		{
			MethodName: "RefreshRssFeed",
			Handler:    _ContentBank_RefreshRssFeed_Handler,
		},
		{
			MethodName: "SchedulePosts",
			Handler:    _ContentBank_SchedulePosts_Handler,
		},
		{
			MethodName: "ListRssFeedItems",
			Handler:    _ContentBank_ListRssFeedItems_Handler,
		},
		{
			MethodName: "GetPartnerConfig",
			Handler:    _ContentBank_GetPartnerConfig_Handler,
		},
		{
			MethodName: "UpdatePartnerConfig",
			Handler:    _ContentBank_UpdatePartnerConfig_Handler,
		},
		{
			MethodName: "ListRssFeeds",
			Handler:    _ContentBank_ListRssFeeds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content_bank/v1/api.proto",
}

func init() { proto.RegisterFile("content_bank/v1/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x55, 0x5b, 0x6f, 0xd3, 0x48,
	0x14, 0x96, 0x9b, 0x6e, 0x9b, 0x9c, 0xf4, 0xb6, 0x93, 0xa6, 0x4d, 0xd3, 0x6e, 0xb7, 0xb2, 0xda,
	0x6e, 0x56, 0xab, 0x4d, 0xd4, 0xec, 0xf2, 0x0a, 0xa2, 0xe1, 0xa2, 0x20, 0x7a, 0x91, 0xab, 0xbe,
	0x80, 0x84, 0x99, 0x64, 0x4e, 0x1c, 0x53, 0xc7, 0x36, 0x9e, 0x71, 0xa1, 0xfd, 0x09, 0x88, 0x17,
	0x1e, 0x78, 0x43, 0xfc, 0x05, 0xfe, 0x22, 0x1a, 0x7b, 0x52, 0x25, 0x76, 0x4c, 0x91, 0x88, 0x10,
	0x8f, 0x73, 0xbe, 0x73, 0xfb, 0x8e, 0xbf, 0x73, 0x0c, 0x1b, 0x5d, 0xcf, 0x15, 0xe8, 0x0a, 0xb3,
	0x43, 0xdd, 0x8b, 0xc6, 0xe5, 0x41, 0x83, 0xfa, 0x76, 0xdd, 0x0f, 0x3c, 0xe1, 0x91, 0xe5, 0x51,
	0xa8, 0x7e, 0x79, 0x50, 0xdd, 0xb4, 0x3c, 0xcf, 0x72, 0xb0, 0x11, 0xc1, 0x9d, 0xb0, 0xd7, 0xc0,
	0x81, 0x2f, 0xae, 0x62, 0xef, 0xea, 0x76, 0x32, 0x51, 0xc0, 0xb9, 0xd9, 0x43, 0x64, 0x0a, 0xdf,
	0x4a, 0xe2, 0x5d, 0xcf, 0xed, 0xd9, 0x56, 0x8c, 0xea, 0x4f, 0xa0, 0x74, 0x4a, 0x2d, 0x64, 0x06,
	0xbe, 0x0e, 0x91, 0x8b, 0x13, 0x5f, 0xd8, 0x9e, 0xcb, 0xc9, 0x1a, 0xcc, 0x75, 0xc3, 0x80, 0x7b,
	0x41, 0x45, 0xdb, 0xd1, 0x6a, 0x05, 0x43, 0xbd, 0xc8, 0x26, 0x14, 0x7c, 0x6a, 0xa1, 0xc9, 0xed,
	0x6b, 0xac, 0xcc, 0xec, 0x68, 0xb5, 0x9c, 0x91, 0x97, 0x86, 0x33, 0xfb, 0x1a, 0xf5, 0x33, 0x28,
	0xab, 0x5c, 0xdc, 0xf7, 0x5c, 0x8e, 0x47, 0x28, 0x28, 0xa3, 0x82, 0x92, 0x3f, 0xa1, 0xe8, 0xe2,
	0x5b, 0x61, 0x8e, 0xa5, 0x04, 0x69, 0x6a, 0xc5, 0x69, 0x37, 0x20, 0xdf, 0xa7, 0xdc, 0x1c, 0x78,
	0x41, 0x9c, 0x35, 0x6f, 0xcc, 0xf7, 0x29, 0x3f, 0xf2, 0x02, 0xd4, 0xdf, 0xc0, 0xb2, 0xc1, 0xf9,
	0x23, 0x44, 0x76, 0x93, 0xee, 0x0f, 0x00, 0xc9, 0xcf, 0xb4, 0x05, 0x0e, 0x78, 0x94, 0x2d, 0x67,
	0x14, 0xa4, 0xa5, 0x2d, 0x0d, 0xe4, 0x5f, 0x20, 0x3c, 0xec, 0x76, 0x91, 0xf3, 0x5e, 0xe8, 0x38,
	0x57, 0x26, 0x65, 0x0c, 0x99, 0x6a, 0xf6, 0xf7, 0x51, 0xe4, 0xbe, 0x04, 0x24, 0xd5, 0x1e, 0xb5,
	0x1d, 0x64, 0x95, 0x5c, 0xe4, 0xa2, 0x5e, 0xfa, 0x3b, 0x0d, 0x56, 0x5b, 0x01, 0x52, 0x81, 0xaa,
	0xbe, 0x1a, 0x91, 0x2c, 0xef, 0xd3, 0x40, 0xb8, 0x18, 0x98, 0x36, 0x53, 0x64, 0x0a, 0xca, 0xd2,
	0x66, 0x72, 0x44, 0x03, 0x1a, 0x5c, 0xa0, 0x90, 0xe8, 0x4c, 0x84, 0xe6, 0x63, 0x43, 0x9b, 0x49,
	0xa2, 0x51, 0xeb, 0x61, 0xe0, 0x44, 0xe5, 0x0a, 0xc6, 0xbc, 0x7c, 0x9f, 0x07, 0x8e, 0x8c, 0x8b,
	0x20, 0x97, 0x0e, 0xb0, 0x32, 0x1b, 0xc7, 0x49, 0xc3, 0x31, 0x1d, 0xa0, 0xfe, 0x0a, 0xca, 0x89,
	0x5e, 0xe2, 0x11, 0x93, 0xff, 0x61, 0x56, 0xce, 0x24, 0x6a, 0xa3, 0xd8, 0xdc, 0xa9, 0x27, 0xa4,
	0x53, 0x4f, 0xcc, 0xce, 0x88, 0xbc, 0xc7, 0x6b, 0xcd, 0x24, 0x6a, 0xb9, 0x50, 0x36, 0xb0, 0x17,
	0x20, 0xef, 0xff, 0x14, 0xe2, 0xfa, 0x31, 0xac, 0x25, 0xeb, 0xfd, 0x08, 0x39, 0xfd, 0xa3, 0x06,
	0xeb, 0x4f, 0x6d, 0x2e, 0x14, 0x1a, 0x89, 0x62, 0x1a, 0x14, 0xee, 0xc2, 0xbc, 0x17, 0xaf, 0x47,
	0xc4, 0xa0, 0xd8, 0xdc, 0x4d, 0x35, 0x34, 0x61, 0x95, 0x8c, 0x61, 0x90, 0xfe, 0x45, 0x83, 0x4a,
	0xba, 0x2f, 0x45, 0xf5, 0x10, 0x96, 0x86, 0x7b, 0x7b, 0xa3, 0xeb, 0x5c, 0xad, 0xd8, 0xdc, 0xca,
	0x22, 0x2d, 0xc3, 0x8d, 0x85, 0x60, 0x24, 0x17, 0x39, 0x81, 0x65, 0x9f, 0x5a, 0xb6, 0x6b, 0x99,
	0x03, 0x35, 0x91, 0x88, 0x43, 0xb1, 0xb9, 0x9f, 0xd5, 0xe8, 0xf8, 0x9e, 0x1a, 0x4b, 0x71, 0xf8,
	0xf0, 0xad, 0x9f, 0xc3, 0xfa, 0x63, 0x14, 0xa7, 0xf1, 0x78, 0x5a, 0xd1, 0xd9, 0x98, 0xc2, 0x20,
	0xf5, 0x97, 0x50, 0x49, 0xa7, 0x55, 0x73, 0x78, 0x00, 0x8b, 0xf1, 0x7d, 0x0a, 0x03, 0x2a, 0xc7,
	0xa6, 0xbe, 0xfd, 0x76, 0x8a, 0x41, 0x6b, 0xd4, 0xcb, 0x18, 0x0f, 0xd2, 0xdf, 0x6b, 0x50, 0x3d,
	0xf7, 0x19, 0x15, 0x38, 0xed, 0xe6, 0x49, 0x13, 0xca, 0xcc, 0xe6, 0xb4, 0xe3, 0x20, 0x33, 0x3b,
	0x21, 0xb7, 0x5d, 0xe4, 0xdc, 0xb4, 0x99, 0xd4, 0x44, 0xae, 0x56, 0x30, 0x4a, 0x43, 0xf0, 0x50,
	0x61, 0x6d, 0xc6, 0xf5, 0x0f, 0x1a, 0x94, 0x46, 0xbe, 0xfc, 0x2f, 0xa1, 0xc6, 0xcf, 0x1a, 0xac,
	0x8e, 0xf7, 0xa4, 0xbe, 0xc0, 0x1d, 0x28, 0x0c, 0x95, 0x38, 0x14, 0x61, 0x25, 0x4b, 0x84, 0x46,
	0x5e, 0x09, 0x70, 0xfa, 0xe2, 0x6b, 0x7e, 0xfa, 0x0d, 0x8a, 0xad, 0x38, 0xf2, 0x90, 0xba, 0x17,
	0xe4, 0x05, 0x2c, 0x8e, 0x9d, 0x40, 0xb2, 0x97, 0xd6, 0xc4, 0x84, 0x73, 0x5d, 0xdd, 0xbf, 0xcd,
	0x4d, 0xf1, 0xa6, 0xb0, 0x34, 0x7e, 0x86, 0x48, 0x3a, 0x72, 0xe2, 0x5d, 0xac, 0xfe, 0x75, 0xab,
	0x9f, 0x2a, 0x71, 0x0f, 0x16, 0xcf, 0xba, 0x7d, 0x64, 0xa1, 0x83, 0xa7, 0x1e, 0x17, 0x9c, 0xac,
	0xd5, 0xe3, 0x3f, 0x7b, 0x7d, 0xf8, 0x67, 0xaf, 0x3f, 0x94, 0x7f, 0xf6, 0x6a, 0x86, 0x9d, 0x58,
	0xb0, 0x92, 0xbc, 0x20, 0xa4, 0x96, 0xaa, 0x9e, 0x71, 0xfc, 0xaa, 0x7f, 0x7f, 0x87, 0xa7, 0xea,
	0xd4, 0x82, 0x95, 0xe4, 0x8a, 0x4e, 0x28, 0x94, 0x71, 0x1c, 0x26, 0x14, 0xca, 0xdc, 0xf7, 0x67,
	0x50, 0x9a, 0xb0, 0xa8, 0xe4, 0x9f, 0x54, 0x86, 0xec, 0x75, 0xce, 0x9c, 0xd6, 0x73, 0x58, 0x18,
	0x55, 0x38, 0xd9, 0xfd, 0x16, 0xff, 0x9b, 0x29, 0xed, 0xdd, 0xe2, 0x15, 0x37, 0xde, 0x99, 0x8b,
	0x8a, 0xfd, 0xf7, 0x35, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x17, 0xee, 0xfb, 0xc8, 0x09, 0x00, 0x00,
}
