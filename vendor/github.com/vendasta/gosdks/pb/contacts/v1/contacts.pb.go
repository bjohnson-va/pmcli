// Code generated by protoc-gen-go. DO NOT EDIT.
// source: contacts/v1/contacts.proto

package contacts_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TODO: should this be returned with the contact? This might be the time to seperate the contacts and the review gen stuff
// The review request stuff should really be with the review gen app, not with the contacts. Should be able to get the lists
// fast enough that there's no reason to munge them together.
// It would also allow us to handle multiple request statuses if there were multiple requests
type ReviewRequestStatus int32

const (
	// The contact has left a review
	ReviewRequestStatus_LEFT_REVIEW ReviewRequestStatus = 0
	// The request has been delivered
	ReviewRequestStatus_DELIVERED ReviewRequestStatus = 1
	// The request did not make it to the recipient
	ReviewRequestStatus_BOUNCED ReviewRequestStatus = 2
	// The request was opened
	ReviewRequestStatus_OPENED ReviewRequestStatus = 3
	// The link in the request was clicked
	ReviewRequestStatus_CLICKED ReviewRequestStatus = 4
	// The would recommend link in the request was clicked
	ReviewRequestStatus_CLICKED_POSITIVE ReviewRequestStatus = 5
	// The would not recommend link in the request was clicked
	ReviewRequestStatus_CLICKED_NEGATIVE ReviewRequestStatus = 6
	// The recipient unsubscribed from receiving review requests
	ReviewRequestStatus_UNSUBSCRIBE ReviewRequestStatus = 7
	// The recipient marked the request as spam
	ReviewRequestStatus_SPAM_REPORT ReviewRequestStatus = 8
	// The requet is queued for sending but has not been delivered yet
	ReviewRequestStatus_SENDING ReviewRequestStatus = 9
	// The request was dropped
	ReviewRequestStatus_DROPPED ReviewRequestStatus = 10
)

var ReviewRequestStatus_name = map[int32]string{
	0:  "LEFT_REVIEW",
	1:  "DELIVERED",
	2:  "BOUNCED",
	3:  "OPENED",
	4:  "CLICKED",
	5:  "CLICKED_POSITIVE",
	6:  "CLICKED_NEGATIVE",
	7:  "UNSUBSCRIBE",
	8:  "SPAM_REPORT",
	9:  "SENDING",
	10: "DROPPED",
}
var ReviewRequestStatus_value = map[string]int32{
	"LEFT_REVIEW":      0,
	"DELIVERED":        1,
	"BOUNCED":          2,
	"OPENED":           3,
	"CLICKED":          4,
	"CLICKED_POSITIVE": 5,
	"CLICKED_NEGATIVE": 6,
	"UNSUBSCRIBE":      7,
	"SPAM_REPORT":      8,
	"SENDING":          9,
	"DROPPED":          10,
}

func (x ReviewRequestStatus) String() string {
	return proto.EnumName(ReviewRequestStatus_name, int32(x))
}
func (ReviewRequestStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// The directions that a result set can be sorted in.
type SortDirection int32

const (
	SortDirection_Ascending  SortDirection = 0
	SortDirection_Descending SortDirection = 1
)

var SortDirection_name = map[int32]string{
	0: "Ascending",
	1: "Descending",
}
var SortDirection_value = map[string]int32{
	"Ascending":  0,
	"Descending": 1,
}

func (x SortDirection) String() string {
	return proto.EnumName(SortDirection_name, int32(x))
}
func (SortDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// The field to sort a result set on.
type SortField int32

const (
	SortField_Name    SortField = 0
	SortField_Created SortField = 1
)

var SortField_name = map[int32]string{
	0: "Name",
	1: "Created",
}
var SortField_value = map[string]int32{
	"Name":    0,
	"Created": 1,
}

func (x SortField) String() string {
	return proto.EnumName(SortField_name, int32(x))
}
func (SortField) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// Options for controlling the order of query results
type SortOptions struct {
	// A direction to sort results in
	Direction SortDirection `protobuf:"varint,1,opt,name=direction,enum=contacts.v1.SortDirection" json:"direction,omitempty"`
	// Field to sort on
	Field SortField `protobuf:"varint,2,opt,name=field,enum=contacts.v1.SortField" json:"field,omitempty"`
}

func (m *SortOptions) Reset()                    { *m = SortOptions{} }
func (m *SortOptions) String() string            { return proto.CompactTextString(m) }
func (*SortOptions) ProtoMessage()               {}
func (*SortOptions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SortOptions) GetDirection() SortDirection {
	if m != nil {
		return m.Direction
	}
	return SortDirection_Ascending
}

func (m *SortOptions) GetField() SortField {
	if m != nil {
		return m.Field
	}
	return SortField_Name
}

// Option for controlling the filter of the contacts list
type Filters struct {
	// The source of the contacts the user want to filter for
	Source []string `protobuf:"bytes,1,rep,name=source" json:"source,omitempty"`
}

func (m *Filters) Reset()                    { *m = Filters{} }
func (m *Filters) String() string            { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()               {}
func (*Filters) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Filters) GetSource() []string {
	if m != nil {
		return m.Source
	}
	return nil
}

type Contact struct {
	// A unique id for the contact
	ContactId string `protobuf:"bytes,1,opt,name=contact_id,json=contactId" json:"contact_id,omitempty"`
	// The account group this contact belongs to
	AccountGroupId string `protobuf:"bytes,2,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
	// The first name of the contact
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// The last name of the contact
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	// The street address of where the contact is
	Address string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	// The city where the contact is
	City string `protobuf:"bytes,6,opt,name=city" json:"city,omitempty"`
	// The state where the contact is
	State string `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	// The country where the contact is
	Country string `protobuf:"bytes,8,opt,name=country" json:"country,omitempty"`
	// The phone number of the contact
	Phone []string `protobuf:"bytes,9,rep,name=phone" json:"phone,omitempty"`
	// The email address of the contact
	Email []string `protobuf:"bytes,10,rep,name=email" json:"email,omitempty"`
	// The time the contact was created
	Created *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=created" json:"created,omitempty"`
	// The time the contact was last modified
	Updated *google_protobuf.Timestamp `protobuf:"bytes,12,opt,name=updated" json:"updated,omitempty"`
	// The time the contact was deleted. Will be nil if the contact has not been deleted
	Deleted *google_protobuf.Timestamp `protobuf:"bytes,14,opt,name=deleted" json:"deleted,omitempty"`
	// The ID of the application that created the contact
	Origin string `protobuf:"bytes,13,opt,name=origin" json:"origin,omitempty"`
	// The customer specified ID from the origin system
	OriginalId string `protobuf:"bytes,15,opt,name=original_id,json=originalId" json:"original_id,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Contact) GetContactId() string {
	if m != nil {
		return m.ContactId
	}
	return ""
}

func (m *Contact) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

func (m *Contact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Contact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Contact) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contact) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Contact) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Contact) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Contact) GetPhone() []string {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *Contact) GetEmail() []string {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *Contact) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Contact) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *Contact) GetDeleted() *google_protobuf.Timestamp {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Contact) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *Contact) GetOriginalId() string {
	if m != nil {
		return m.OriginalId
	}
	return ""
}

// Creating a contact requires [account_group_id] and at least one of [first_name, last_nam, email, phone]
type CreateContactRequest struct {
	// The account group to add this contact to
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
	// The first name of the contact
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// The last name of the contact
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	// The street address of where the contact is
	Address string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	// The city where the contact is
	City string `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	// The state where the contact is
	State string `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	// The country where the contact is
	Country string `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
	// The phone number of the contact
	Phone []string `protobuf:"bytes,8,rep,name=phone" json:"phone,omitempty"`
	// The email address of the contact
	Email []string `protobuf:"bytes,9,rep,name=email" json:"email,omitempty"`
	// The application ID that created the contact
	Origin string `protobuf:"bytes,10,opt,name=origin" json:"origin,omitempty"`
	// The customer specified ID from the origin system
	OriginalId string `protobuf:"bytes,11,opt,name=original_id,json=originalId" json:"original_id,omitempty"`
}

func (m *CreateContactRequest) Reset()                    { *m = CreateContactRequest{} }
func (m *CreateContactRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContactRequest) ProtoMessage()               {}
func (*CreateContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CreateContactRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

func (m *CreateContactRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateContactRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreateContactRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateContactRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CreateContactRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CreateContactRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *CreateContactRequest) GetPhone() []string {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *CreateContactRequest) GetEmail() []string {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *CreateContactRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *CreateContactRequest) GetOriginalId() string {
	if m != nil {
		return m.OriginalId
	}
	return ""
}

type CreateContactResponse struct {
	// The new contact that's been created
	Contact *Contact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
}

func (m *CreateContactResponse) Reset()                    { *m = CreateContactResponse{} }
func (m *CreateContactResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateContactResponse) ProtoMessage()               {}
func (*CreateContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CreateContactResponse) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

type DeleteContactRequest struct {
	// The contact ID to delete
	ContactId string `protobuf:"bytes,1,opt,name=contact_id,json=contactId" json:"contact_id,omitempty"`
	// The account group to delete contact for
	AccountGroupId string `protobuf:"bytes,2,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *DeleteContactRequest) Reset()                    { *m = DeleteContactRequest{} }
func (m *DeleteContactRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContactRequest) ProtoMessage()               {}
func (*DeleteContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DeleteContactRequest) GetContactId() string {
	if m != nil {
		return m.ContactId
	}
	return ""
}

func (m *DeleteContactRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

type ListContactsRequest struct {
	// The account group to retrieve the contacts for
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
	// Cursor should be supplied from the last response or ""
	Cursor string `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
	// The number of results to retrieve.
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// search_term is an arbitrary string to perform full text search across all the contacts information
	SearchTerm string `protobuf:"bytes,4,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	// sort_options control what fileds it can sort on and the sorting direction
	SortOptions *SortOptions `protobuf:"bytes,5,opt,name=sort_options,json=sortOptions" json:"sort_options,omitempty"`
	// filters control what fileds it can filte for
	Filters *Filters `protobuf:"bytes,6,opt,name=filters" json:"filters,omitempty"`
}

func (m *ListContactsRequest) Reset()                    { *m = ListContactsRequest{} }
func (m *ListContactsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContactsRequest) ProtoMessage()               {}
func (*ListContactsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ListContactsRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

func (m *ListContactsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListContactsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListContactsRequest) GetSearchTerm() string {
	if m != nil {
		return m.SearchTerm
	}
	return ""
}

func (m *ListContactsRequest) GetSortOptions() *SortOptions {
	if m != nil {
		return m.SortOptions
	}
	return nil
}

func (m *ListContactsRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ListContactsResponse struct {
	// List of the contacts
	Contacts []*Contact `protobuf:"bytes,1,rep,name=contacts" json:"contacts,omitempty"`
	// A cursor that can be provided to retrieve the next page of results
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
	// Total number of contacts for account group
	TotalResults int64 `protobuf:"varint,4,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

func (m *ListContactsResponse) Reset()                    { *m = ListContactsResponse{} }
func (m *ListContactsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContactsResponse) ProtoMessage()               {}
func (*ListContactsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ListContactsResponse) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *ListContactsResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListContactsResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ListContactsResponse) GetTotalResults() int64 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

type ListOriginsRequest struct {
	// The account group id to retrieve contacts origins for
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *ListOriginsRequest) Reset()                    { *m = ListOriginsRequest{} }
func (m *ListOriginsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListOriginsRequest) ProtoMessage()               {}
func (*ListOriginsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ListOriginsRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

type WhiteLabeledOrigin struct {
	// The origin of contact
	Origin string `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	// The white labeled name of the contact origin
	WhiteLabeledName string `protobuf:"bytes,2,opt,name=white_labeled_name,json=whiteLabeledName" json:"white_labeled_name,omitempty"`
}

func (m *WhiteLabeledOrigin) Reset()                    { *m = WhiteLabeledOrigin{} }
func (m *WhiteLabeledOrigin) String() string            { return proto.CompactTextString(m) }
func (*WhiteLabeledOrigin) ProtoMessage()               {}
func (*WhiteLabeledOrigin) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *WhiteLabeledOrigin) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *WhiteLabeledOrigin) GetWhiteLabeledName() string {
	if m != nil {
		return m.WhiteLabeledName
	}
	return ""
}

type ListOriginsResponse struct {
	// Mapping between an origin and the whitelabeled name
	WhiteLabeledOrigins []*WhiteLabeledOrigin `protobuf:"bytes,1,rep,name=white_labeled_origins,json=whiteLabeledOrigins" json:"white_labeled_origins,omitempty"`
}

func (m *ListOriginsResponse) Reset()                    { *m = ListOriginsResponse{} }
func (m *ListOriginsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListOriginsResponse) ProtoMessage()               {}
func (*ListOriginsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ListOriginsResponse) GetWhiteLabeledOrigins() []*WhiteLabeledOrigin {
	if m != nil {
		return m.WhiteLabeledOrigins
	}
	return nil
}

// A request type to associate a vendor's contact id to the contact id in our system
type AssociateIDRequest struct {
	// The Contact ID to add an external mapping for
	ContactId string `protobuf:"bytes,1,opt,name=contact_id,json=contactId" json:"contact_id,omitempty"`
	// The Contact ID on the external source to map to
	VendorContactId string `protobuf:"bytes,2,opt,name=vendor_contact_id,json=vendorContactId" json:"vendor_contact_id,omitempty"`
	// The Application ID for the mapping
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (m *AssociateIDRequest) Reset()                    { *m = AssociateIDRequest{} }
func (m *AssociateIDRequest) String() string            { return proto.CompactTextString(m) }
func (*AssociateIDRequest) ProtoMessage()               {}
func (*AssociateIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *AssociateIDRequest) GetContactId() string {
	if m != nil {
		return m.ContactId
	}
	return ""
}

func (m *AssociateIDRequest) GetVendorContactId() string {
	if m != nil {
		return m.VendorContactId
	}
	return ""
}

func (m *AssociateIDRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func init() {
	proto.RegisterType((*SortOptions)(nil), "contacts.v1.SortOptions")
	proto.RegisterType((*Filters)(nil), "contacts.v1.Filters")
	proto.RegisterType((*Contact)(nil), "contacts.v1.Contact")
	proto.RegisterType((*CreateContactRequest)(nil), "contacts.v1.CreateContactRequest")
	proto.RegisterType((*CreateContactResponse)(nil), "contacts.v1.CreateContactResponse")
	proto.RegisterType((*DeleteContactRequest)(nil), "contacts.v1.DeleteContactRequest")
	proto.RegisterType((*ListContactsRequest)(nil), "contacts.v1.ListContactsRequest")
	proto.RegisterType((*ListContactsResponse)(nil), "contacts.v1.ListContactsResponse")
	proto.RegisterType((*ListOriginsRequest)(nil), "contacts.v1.ListOriginsRequest")
	proto.RegisterType((*WhiteLabeledOrigin)(nil), "contacts.v1.WhiteLabeledOrigin")
	proto.RegisterType((*ListOriginsResponse)(nil), "contacts.v1.ListOriginsResponse")
	proto.RegisterType((*AssociateIDRequest)(nil), "contacts.v1.AssociateIDRequest")
	proto.RegisterEnum("contacts.v1.ReviewRequestStatus", ReviewRequestStatus_name, ReviewRequestStatus_value)
	proto.RegisterEnum("contacts.v1.SortDirection", SortDirection_name, SortDirection_value)
	proto.RegisterEnum("contacts.v1.SortField", SortField_name, SortField_value)
}

func init() { proto.RegisterFile("contacts/v1/contacts.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdb, 0x6e, 0xe3, 0x36,
	0x10, 0x5d, 0xd9, 0xf1, 0x6d, 0x94, 0x8b, 0xca, 0x38, 0x81, 0x9a, 0xa2, 0x48, 0xaa, 0xbe, 0x04,
	0xc1, 0xc2, 0xe9, 0xa6, 0x7d, 0x28, 0x50, 0xa0, 0x40, 0x62, 0x29, 0x81, 0xd0, 0xac, 0x6d, 0xd0,
	0x49, 0x16, 0xe8, 0x8b, 0xc0, 0x48, 0x8c, 0xa3, 0x42, 0x16, 0x55, 0x92, 0x4e, 0xba, 0xfb, 0xd8,
	0xbf, 0xe9, 0x57, 0xf4, 0xa1, 0x9f, 0xd4, 0x1f, 0x28, 0x48, 0x4a, 0x5e, 0x3b, 0x97, 0xbd, 0x00,
	0x7d, 0xd3, 0x9c, 0x39, 0x33, 0x1a, 0x9d, 0x43, 0x8e, 0x0d, 0x3b, 0x31, 0xcb, 0x25, 0x89, 0xa5,
	0x38, 0xbc, 0x7b, 0x75, 0x58, 0x3d, 0xf7, 0x0a, 0xce, 0x24, 0x43, 0xf6, 0x3c, 0xbe, 0x7b, 0xb5,
	0xb3, 0x3b, 0x61, 0x6c, 0x92, 0xd1, 0x43, 0x9d, 0xba, 0x9e, 0xdd, 0x1c, 0xca, 0x74, 0x4a, 0x85,
	0x24, 0xd3, 0xc2, 0xb0, 0xbd, 0x19, 0xd8, 0x63, 0xc6, 0xe5, 0xb0, 0x90, 0x29, 0xcb, 0x05, 0xfa,
	0x11, 0x3a, 0x49, 0xca, 0x69, 0xac, 0x22, 0xd7, 0xda, 0xb3, 0xf6, 0xd7, 0x8f, 0x76, 0x7a, 0x0b,
	0x0d, 0x7b, 0x8a, 0xec, 0x57, 0x0c, 0xfc, 0x9e, 0x8c, 0x5e, 0x42, 0xe3, 0x26, 0xa5, 0x59, 0xe2,
	0xd6, 0x74, 0xd5, 0xf6, 0xa3, 0xaa, 0x53, 0x95, 0xc5, 0x86, 0xe4, 0x7d, 0x03, 0xad, 0xd3, 0x34,
	0x93, 0x94, 0x0b, 0xb4, 0x0d, 0x4d, 0xc1, 0x66, 0x3c, 0xa6, 0xae, 0xb5, 0x57, 0xdf, 0xef, 0xe0,
	0x32, 0xf2, 0xfe, 0xad, 0x43, 0xab, 0x6f, 0x7a, 0xa0, 0xaf, 0x01, 0xca, 0x76, 0x51, 0x9a, 0xe8,
	0xb9, 0x3a, 0xb8, 0x53, 0x22, 0x61, 0x82, 0xf6, 0xc1, 0x21, 0x71, 0xcc, 0x66, 0xb9, 0x8c, 0x26,
	0x9c, 0xcd, 0x0a, 0x45, 0xaa, 0x69, 0xd2, 0x7a, 0x89, 0x9f, 0x29, 0x38, 0x4c, 0x54, 0xa3, 0x9b,
	0x94, 0x0b, 0x19, 0xe5, 0x64, 0x4a, 0xdd, 0xba, 0x69, 0xa4, 0x91, 0x01, 0x99, 0x52, 0xf4, 0x15,
	0x74, 0x32, 0x52, 0x65, 0x57, 0x74, 0xb6, 0xad, 0x00, 0x9d, 0x74, 0xa1, 0x45, 0x92, 0x84, 0x53,
	0x21, 0xdc, 0x86, 0x4e, 0x55, 0x21, 0x42, 0xb0, 0x12, 0xa7, 0xf2, 0xad, 0xdb, 0xd4, 0xb0, 0x7e,
	0x46, 0x5d, 0x68, 0x08, 0x49, 0x24, 0x75, 0x5b, 0x1a, 0x34, 0x81, 0xea, 0xa1, 0xe7, 0xe1, 0x6f,
	0xdd, 0xb6, 0xe9, 0x51, 0x86, 0x8a, 0x5f, 0xdc, 0xb2, 0x9c, 0xba, 0x1d, 0xad, 0x82, 0x09, 0x14,
	0x4a, 0xa7, 0x24, 0xcd, 0x5c, 0x30, 0xa8, 0x0e, 0xd0, 0x0f, 0xd0, 0x8a, 0x39, 0x25, 0x92, 0x26,
	0xae, 0xbd, 0x67, 0xed, 0xdb, 0x47, 0x3b, 0x3d, 0xe3, 0x73, 0xaf, 0xf2, 0xb9, 0x77, 0x51, 0xf9,
	0x8c, 0x2b, 0xaa, 0xaa, 0x9a, 0x15, 0x89, 0xae, 0x5a, 0xfd, 0x78, 0x55, 0x49, 0x55, 0x55, 0x09,
	0xcd, 0xa8, 0xaa, 0x5a, 0xff, 0x78, 0x55, 0x49, 0x55, 0xa6, 0x32, 0x9e, 0x4e, 0xd2, 0xdc, 0x5d,
	0xd3, 0x9f, 0x59, 0x46, 0x68, 0x17, 0x6c, 0xf3, 0x44, 0x32, 0x65, 0xd2, 0x86, 0x4e, 0x42, 0x05,
	0x85, 0x89, 0xf7, 0x77, 0x0d, 0xba, 0x7d, 0x3d, 0x70, 0xe9, 0x3d, 0xa6, 0xbf, 0xcf, 0xa8, 0x90,
	0x4f, 0x7a, 0x6c, 0x7d, 0x82, 0xc7, 0xb5, 0x0f, 0x7a, 0x5c, 0x7f, 0xde, 0xe3, 0x95, 0xa7, 0x3d,
	0x6e, 0x3c, 0xe5, 0x71, 0xf3, 0x19, 0x8f, 0x5b, 0xcf, 0x78, 0xdc, 0x7e, 0xd2, 0xe3, 0xce, 0xa2,
	0xc7, 0xef, 0x15, 0x84, 0x0f, 0x29, 0x68, 0x3f, 0x52, 0xf0, 0x0c, 0xb6, 0x1e, 0x08, 0x28, 0x0a,
	0x96, 0x0b, 0x8a, 0x7a, 0x6a, 0x2e, 0x0d, 0x69, 0xe1, 0xec, 0xa3, 0xee, 0xd2, 0x1d, 0xad, 0xe8,
	0x15, 0xc9, 0x8b, 0xa0, 0xeb, 0x6b, 0x3b, 0x1f, 0x38, 0xf1, 0x7f, 0x5d, 0x46, 0xef, 0xcf, 0x1a,
	0x6c, 0x9e, 0xa7, 0x42, 0x96, 0xfd, 0xc5, 0xe7, 0x5b, 0xbd, 0x0d, 0xcd, 0x78, 0xc6, 0x05, 0xe3,
	0xe5, 0x1b, 0xca, 0x48, 0x79, 0x5c, 0x90, 0x09, 0x8d, 0x44, 0xfa, 0xce, 0x78, 0x5c, 0xc7, 0x6d,
	0x05, 0x8c, 0xd3, 0x77, 0x54, 0x29, 0x28, 0x28, 0xe1, 0xf1, 0x6d, 0x24, 0x29, 0x9f, 0x96, 0x3e,
	0x83, 0x81, 0x2e, 0x28, 0x9f, 0xa2, 0x9f, 0x60, 0x55, 0x30, 0x2e, 0x23, 0x66, 0x96, 0xa2, 0xb6,
	0xdc, 0x3e, 0x72, 0x1f, 0x6d, 0xb4, 0x72, 0x69, 0x62, 0x5b, 0x2c, 0x6c, 0xd0, 0x1e, 0xb4, 0x6e,
	0xcc, 0x66, 0xd3, 0xa7, 0xe2, 0xa1, 0xca, 0xe5, 0xd6, 0xc3, 0x15, 0xc9, 0xfb, 0xcb, 0x82, 0xee,
	0xb2, 0x08, 0xa5, 0x5d, 0xdf, 0x41, 0xbb, 0x2a, 0xd4, 0x9b, 0xf1, 0x39, 0xbf, 0xe6, 0x2c, 0xf5,
	0x61, 0x39, 0xfd, 0x43, 0x46, 0x4b, 0x92, 0x80, 0x82, 0xfa, 0x46, 0x96, 0x2f, 0xa1, 0x7d, 0x4b,
	0x44, 0x34, 0x65, 0xdc, 0xa8, 0xd2, 0xc6, 0xad, 0x5b, 0x22, 0x5e, 0x33, 0x4e, 0xd1, 0xb7, 0xb0,
	0x26, 0x99, 0x24, 0x59, 0xc4, 0xa9, 0x98, 0x65, 0xd2, 0x1c, 0xff, 0x3a, 0x5e, 0xd5, 0x20, 0x36,
	0x98, 0xf7, 0x33, 0x20, 0x35, 0xea, 0x50, 0x1f, 0xb6, 0xcf, 0xb7, 0xcb, 0xfb, 0x15, 0xd0, 0x9b,
	0xdb, 0x54, 0xd2, 0x73, 0x72, 0x4d, 0x33, 0x9a, 0x98, 0x3e, 0x0b, 0x27, 0xdd, 0x5a, 0x3a, 0xe9,
	0x2f, 0x01, 0xdd, 0x2b, 0x76, 0x94, 0x19, 0xfa, 0xe2, 0x7d, 0x76, 0xee, 0x17, 0xfa, 0xa8, 0x9b,
	0xeb, 0xfd, 0x66, 0xce, 0xd2, 0x7c, 0xb6, 0x52, 0xc5, 0x31, 0x6c, 0x2d, 0x37, 0x31, 0xcd, 0x2b,
	0x49, 0x77, 0x97, 0x24, 0x7d, 0x3c, 0x1c, 0xde, 0xbc, 0x7f, 0x84, 0x09, 0xef, 0x0e, 0xd0, 0xb1,
	0x10, 0x2c, 0x4e, 0x89, 0xa4, 0xa1, 0xff, 0x89, 0xf7, 0xe2, 0x00, 0xbe, 0xb8, 0xa3, 0x79, 0xc2,
	0x78, 0xb4, 0xc0, 0x32, 0x5f, 0xb3, 0x61, 0x12, 0xfd, 0x39, 0x77, 0x0b, 0x9a, 0xa4, 0xd0, 0x42,
	0x9a, 0x05, 0xd5, 0x20, 0x45, 0x11, 0x26, 0x07, 0xff, 0x58, 0xb0, 0x89, 0xe9, 0x5d, 0x4a, 0xef,
	0xcb, 0x77, 0x8e, 0x25, 0x91, 0x33, 0x81, 0x36, 0xc0, 0x3e, 0x0f, 0x4e, 0x2f, 0x22, 0x1c, 0x5c,
	0x85, 0xc1, 0x1b, 0xe7, 0x05, 0x5a, 0x83, 0x8e, 0x1f, 0x9c, 0x87, 0x57, 0x01, 0x0e, 0x7c, 0xc7,
	0x42, 0x36, 0xb4, 0x4e, 0x86, 0x97, 0x83, 0x7e, 0xe0, 0x3b, 0x35, 0x04, 0xd0, 0x1c, 0x8e, 0x82,
	0x41, 0xe0, 0x3b, 0x75, 0x95, 0xe8, 0x9f, 0x87, 0xfd, 0x5f, 0x02, 0xdf, 0x59, 0x41, 0x5d, 0x70,
	0xca, 0x20, 0x1a, 0x0d, 0xc7, 0xe1, 0x45, 0x78, 0x15, 0x38, 0x8d, 0x45, 0x74, 0x10, 0x9c, 0x1d,
	0x6b, 0xb4, 0xa9, 0xde, 0x78, 0x39, 0x18, 0x5f, 0x9e, 0x8c, 0xfb, 0x38, 0x3c, 0x09, 0x9c, 0x96,
	0x02, 0xc6, 0xa3, 0xe3, 0xd7, 0x11, 0x0e, 0x46, 0x43, 0x7c, 0xe1, 0xb4, 0x55, 0xeb, 0x71, 0x30,
	0xf0, 0xc3, 0xc1, 0x99, 0xd3, 0x51, 0x81, 0x8f, 0x87, 0xa3, 0x51, 0xe0, 0x3b, 0x70, 0xd0, 0x83,
	0xb5, 0xa5, 0x7f, 0x11, 0x6a, 0xda, 0x63, 0x11, 0xd3, 0x3c, 0x49, 0xf3, 0x89, 0xf3, 0x02, 0xad,
	0x03, 0xf8, 0x74, 0x1e, 0x5b, 0x07, 0x1e, 0x74, 0xe6, 0xff, 0x1f, 0x50, 0x1b, 0x56, 0x94, 0xdd,
	0xce, 0x0b, 0x3d, 0xbb, 0xf9, 0x65, 0x73, 0xac, 0xeb, 0xa6, 0xfe, 0x31, 0xfa, 0xfe, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x10, 0xda, 0x93, 0xc2, 0x19, 0x09, 0x00, 0x00,
}
