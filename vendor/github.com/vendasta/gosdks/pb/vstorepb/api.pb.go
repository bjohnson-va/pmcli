// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vstorepb/api.proto

package vstorepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Entity struct {
	Namespace string                `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Kind      string                `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Data      *google_protobuf1.Any `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Version   int64                 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Values    *Struct               `protobuf:"bytes,5,opt,name=values" json:"values,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Entity) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Entity) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Entity) GetData() *google_protobuf1.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Entity) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Entity) GetValues() *Struct {
	if m != nil {
		return m.Values
	}
	return nil
}

type Struct struct {
	Values map[string]*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Struct) Reset()                    { *m = Struct{} }
func (m *Struct) String() string            { return proto.CompactTextString(m) }
func (*Struct) ProtoMessage()               {}
func (*Struct) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Struct) GetValues() map[string]*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type ListValue struct {
	Values []*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListValue) Reset()                    { *m = ListValue{} }
func (m *ListValue) String() string            { return proto.CompactTextString(m) }
func (*ListValue) ProtoMessage()               {}
func (*ListValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ListValue) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type Value struct {
	// Types that are valid to be assigned to Kind:
	//	*Value_IntValue
	//	*Value_DoubleValue
	//	*Value_StringValue
	//	*Value_BoolValue
	//	*Value_StructValue
	//	*Value_TimestampValue
	//	*Value_ListValue
	//	*Value_GeopointValue
	//	*Value_BytesValue
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type isValue_Kind interface {
	isValue_Kind()
}

type Value_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}
type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,oneof"`
}
type Value_StructValue struct {
	StructValue *Struct `protobuf:"bytes,6,opt,name=struct_value,json=structValue,oneof"`
}
type Value_TimestampValue struct {
	TimestampValue *google_protobuf2.Timestamp `protobuf:"bytes,7,opt,name=timestamp_value,json=timestampValue,oneof"`
}
type Value_ListValue struct {
	ListValue *ListValue `protobuf:"bytes,8,opt,name=list_value,json=listValue,oneof"`
}
type Value_GeopointValue struct {
	GeopointValue *GeoPoint `protobuf:"bytes,9,opt,name=geopoint_value,json=geopointValue,oneof"`
}
type Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,10,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*Value_IntValue) isValue_Kind()       {}
func (*Value_DoubleValue) isValue_Kind()    {}
func (*Value_StringValue) isValue_Kind()    {}
func (*Value_BoolValue) isValue_Kind()      {}
func (*Value_StructValue) isValue_Kind()    {}
func (*Value_TimestampValue) isValue_Kind() {}
func (*Value_ListValue) isValue_Kind()      {}
func (*Value_GeopointValue) isValue_Kind()  {}
func (*Value_BytesValue) isValue_Kind()     {}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Value) GetIntValue() int64 {
	if x, ok := m.GetKind().(*Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetKind().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetKind().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetBoolValue() bool {
	if x, ok := m.GetKind().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Value) GetStructValue() *Struct {
	if x, ok := m.GetKind().(*Value_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (m *Value) GetTimestampValue() *google_protobuf2.Timestamp {
	if x, ok := m.GetKind().(*Value_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (m *Value) GetListValue() *ListValue {
	if x, ok := m.GetKind().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (m *Value) GetGeopointValue() *GeoPoint {
	if x, ok := m.GetKind().(*Value_GeopointValue); ok {
		return x.GeopointValue
	}
	return nil
}

func (m *Value) GetBytesValue() []byte {
	if x, ok := m.GetKind().(*Value_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_IntValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_StructValue)(nil),
		(*Value_TimestampValue)(nil),
		(*Value_ListValue)(nil),
		(*Value_GeopointValue)(nil),
		(*Value_BytesValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_IntValue:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *Value_DoubleValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_StringValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Value_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_StructValue:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructValue); err != nil {
			return err
		}
	case *Value_TimestampValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TimestampValue); err != nil {
			return err
		}
	case *Value_ListValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListValue); err != nil {
			return err
		}
	case *Value_GeopointValue:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GeopointValue); err != nil {
			return err
		}
	case *Value_BytesValue:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case nil:
	default:
		return fmt.Errorf("Value.Kind has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 2: // kind.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_IntValue{int64(x)}
		return true, err
	case 3: // kind.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Kind = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 4: // kind.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &Value_StringValue{x}
		return true, err
	case 5: // kind.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_BoolValue{x != 0}
		return true, err
	case 6: // kind.struct_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Struct)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_StructValue{msg}
		return true, err
	case 7: // kind.timestamp_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf2.Timestamp)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_TimestampValue{msg}
		return true, err
	case 8: // kind.list_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListValue)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_ListValue{msg}
		return true, err
	case 9: // kind.geopoint_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GeoPoint)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_GeopointValue{msg}
		return true, err
	case 10: // kind.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Kind = &Value_BytesValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_IntValue:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *Value_DoubleValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *Value_StringValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Value_BoolValue:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *Value_StructValue:
		s := proto.Size(x.StructValue)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_TimestampValue:
		s := proto.Size(x.TimestampValue)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_ListValue:
		s := proto.Size(x.ListValue)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_GeopointValue:
		s := proto.Size(x.GeopointValue)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_BytesValue:
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KeySet struct {
	Namespace string   `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Kind      string   `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Keys      []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (m *KeySet) Reset()                    { *m = KeySet{} }
func (m *KeySet) String() string            { return proto.CompactTextString(m) }
func (*KeySet) ProtoMessage()               {}
func (*KeySet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *KeySet) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KeySet) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *KeySet) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CreateRequest struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CreateRequest) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type GetRequest struct {
	KeySets []*KeySet `protobuf:"bytes,1,rep,name=key_sets,json=keySets" json:"key_sets,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GetRequest) GetKeySets() []*KeySet {
	if m != nil {
		return m.KeySets
	}
	return nil
}

type GetResponse struct {
	Entities []*EntityResult `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GetResponse) GetEntities() []*EntityResult {
	if m != nil {
		return m.Entities
	}
	return nil
}

type UpdateRequest struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *UpdateRequest) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type EntityResult struct {
	KeySet *KeySet `protobuf:"bytes,1,opt,name=key_set,json=keySet" json:"key_set,omitempty"`
	Entity *Entity `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *EntityResult) Reset()                    { *m = EntityResult{} }
func (m *EntityResult) String() string            { return proto.CompactTextString(m) }
func (*EntityResult) ProtoMessage()               {}
func (*EntityResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *EntityResult) GetKeySet() *KeySet {
	if m != nil {
		return m.KeySet
	}
	return nil
}

func (m *EntityResult) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type KeyFilter struct {
	// Keys to filter by. You must always provide parent key components if you provide any children.
	// eg: keys = [PID, AG-123], rows PID:AG-123:* are matches, but if keys = [AG-123] or ["", AG-123], you will not get any matches.
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	// if prefix is set to True, the filter will match an incomplete prefix on the last specified key
	// eg: keys = [PID, AG-4], row PID:AG-456 is a match with partial == true, not a match otherwise
	Prefix bool `protobuf:"varint,2,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *KeyFilter) Reset()                    { *m = KeyFilter{} }
func (m *KeyFilter) String() string            { return proto.CompactTextString(m) }
func (*KeyFilter) ProtoMessage()               {}
func (*KeyFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *KeyFilter) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *KeyFilter) GetPrefix() bool {
	if m != nil {
		return m.Prefix
	}
	return false
}

// RangeFilter will bound results by [begin, end)
type RangeFilter struct {
	// Key set to start filtering from.
	Begin []string `protobuf:"bytes,1,rep,name=begin" json:"begin,omitempty"`
	// Key set to stop filtering at.
	End []string `protobuf:"bytes,2,rep,name=end" json:"end,omitempty"`
}

func (m *RangeFilter) Reset()                    { *m = RangeFilter{} }
func (m *RangeFilter) String() string            { return proto.CompactTextString(m) }
func (*RangeFilter) ProtoMessage()               {}
func (*RangeFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *RangeFilter) GetBegin() []string {
	if m != nil {
		return m.Begin
	}
	return nil
}

func (m *RangeFilter) GetEnd() []string {
	if m != nil {
		return m.End
	}
	return nil
}

type LookupFilter struct {
	// Deprecated: use `filters` instead
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	// Types that are valid to be assigned to Filters:
	//	*LookupFilter_KeyFilter
	//	*LookupFilter_RangeFilter
	Filters isLookupFilter_Filters `protobuf_oneof:"filters"`
}

func (m *LookupFilter) Reset()                    { *m = LookupFilter{} }
func (m *LookupFilter) String() string            { return proto.CompactTextString(m) }
func (*LookupFilter) ProtoMessage()               {}
func (*LookupFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type isLookupFilter_Filters interface {
	isLookupFilter_Filters()
}

type LookupFilter_KeyFilter struct {
	KeyFilter *KeyFilter `protobuf:"bytes,2,opt,name=key_filter,json=keyFilter,oneof"`
}
type LookupFilter_RangeFilter struct {
	RangeFilter *RangeFilter `protobuf:"bytes,3,opt,name=range_filter,json=rangeFilter,oneof"`
}

func (*LookupFilter_KeyFilter) isLookupFilter_Filters()   {}
func (*LookupFilter_RangeFilter) isLookupFilter_Filters() {}

func (m *LookupFilter) GetFilters() isLookupFilter_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *LookupFilter) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *LookupFilter) GetKeyFilter() *KeyFilter {
	if x, ok := m.GetFilters().(*LookupFilter_KeyFilter); ok {
		return x.KeyFilter
	}
	return nil
}

func (m *LookupFilter) GetRangeFilter() *RangeFilter {
	if x, ok := m.GetFilters().(*LookupFilter_RangeFilter); ok {
		return x.RangeFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LookupFilter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LookupFilter_OneofMarshaler, _LookupFilter_OneofUnmarshaler, _LookupFilter_OneofSizer, []interface{}{
		(*LookupFilter_KeyFilter)(nil),
		(*LookupFilter_RangeFilter)(nil),
	}
}

func _LookupFilter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LookupFilter)
	// filters
	switch x := m.Filters.(type) {
	case *LookupFilter_KeyFilter:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KeyFilter); err != nil {
			return err
		}
	case *LookupFilter_RangeFilter:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RangeFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LookupFilter.Filters has unexpected type %T", x)
	}
	return nil
}

func _LookupFilter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LookupFilter)
	switch tag {
	case 2: // filters.key_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KeyFilter)
		err := b.DecodeMessage(msg)
		m.Filters = &LookupFilter_KeyFilter{msg}
		return true, err
	case 3: // filters.range_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RangeFilter)
		err := b.DecodeMessage(msg)
		m.Filters = &LookupFilter_RangeFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LookupFilter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LookupFilter)
	// filters
	switch x := m.Filters.(type) {
	case *LookupFilter_KeyFilter:
		s := proto.Size(x.KeyFilter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LookupFilter_RangeFilter:
		s := proto.Size(x.RangeFilter)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LookupRequest struct {
	Namespace string        `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Kind      string        `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	PageSize  int64         `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Cursor    string        `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
	Filter    *LookupFilter `protobuf:"bytes,5,opt,name=filter" json:"filter,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *LookupRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LookupRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *LookupRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *LookupRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *LookupRequest) GetFilter() *LookupFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type LookupResponse struct {
	Entities   []*EntityResult `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
	NextCursor string          `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	HasMore    bool            `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *LookupResponse) GetEntities() []*EntityResult {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *LookupResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *LookupResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type ScanRequest struct {
	Namespace      string        `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Kind           string        `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Filter         *LookupFilter `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty"`
	StartingKeySet *KeySet       `protobuf:"bytes,4,opt,name=starting_key_set,json=startingKeySet" json:"starting_key_set,omitempty"`
}

func (m *ScanRequest) Reset()                    { *m = ScanRequest{} }
func (m *ScanRequest) String() string            { return proto.CompactTextString(m) }
func (*ScanRequest) ProtoMessage()               {}
func (*ScanRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ScanRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScanRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ScanRequest) GetFilter() *LookupFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ScanRequest) GetStartingKeySet() *KeySet {
	if m != nil {
		return m.StartingKeySet
	}
	return nil
}

func init() {
	proto.RegisterType((*Entity)(nil), "vstorepb.Entity")
	proto.RegisterType((*Struct)(nil), "vstorepb.Struct")
	proto.RegisterType((*ListValue)(nil), "vstorepb.ListValue")
	proto.RegisterType((*Value)(nil), "vstorepb.Value")
	proto.RegisterType((*KeySet)(nil), "vstorepb.KeySet")
	proto.RegisterType((*CreateRequest)(nil), "vstorepb.CreateRequest")
	proto.RegisterType((*GetRequest)(nil), "vstorepb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "vstorepb.GetResponse")
	proto.RegisterType((*UpdateRequest)(nil), "vstorepb.UpdateRequest")
	proto.RegisterType((*EntityResult)(nil), "vstorepb.EntityResult")
	proto.RegisterType((*KeyFilter)(nil), "vstorepb.KeyFilter")
	proto.RegisterType((*RangeFilter)(nil), "vstorepb.RangeFilter")
	proto.RegisterType((*LookupFilter)(nil), "vstorepb.LookupFilter")
	proto.RegisterType((*LookupRequest)(nil), "vstorepb.LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "vstorepb.LookupResponse")
	proto.RegisterType((*ScanRequest)(nil), "vstorepb.ScanRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VStore service

type VStoreClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (VStore_ScanClient, error)
}

type vStoreClient struct {
	cc *grpc.ClientConn
}

func NewVStoreClient(cc *grpc.ClientConn) VStoreClient {
	return &vStoreClient{cc}
}

func (c *vStoreClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/vstorepb.VStore/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vStoreClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/vstorepb.VStore/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vStoreClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/vstorepb.VStore/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vStoreClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/vstorepb.VStore/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vStoreClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (VStore_ScanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VStore_serviceDesc.Streams[0], c.cc, "/vstorepb.VStore/Scan", opts...)
	if err != nil {
		return nil, err
	}
	x := &vStoreScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VStore_ScanClient interface {
	Recv() (*EntityResult, error)
	grpc.ClientStream
}

type vStoreScanClient struct {
	grpc.ClientStream
}

func (x *vStoreScanClient) Recv() (*EntityResult, error) {
	m := new(EntityResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for VStore service

type VStoreServer interface {
	Create(context.Context, *CreateRequest) (*google_protobuf.Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	Update(context.Context, *UpdateRequest) (*google_protobuf.Empty, error)
	Scan(*ScanRequest, VStore_ScanServer) error
}

func RegisterVStoreServer(s *grpc.Server, srv VStoreServer) {
	s.RegisterService(&_VStore_serviceDesc, srv)
}

func _VStore_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VStoreServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vstorepb.VStore/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VStoreServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vstorepb.VStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VStoreServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VStore_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VStoreServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vstorepb.VStore/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VStoreServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VStore_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VStoreServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vstorepb.VStore/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VStoreServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VStore_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VStoreServer).Scan(m, &vStoreScanServer{stream})
}

type VStore_ScanServer interface {
	Send(*EntityResult) error
	grpc.ServerStream
}

type vStoreScanServer struct {
	grpc.ServerStream
}

func (x *vStoreScanServer) Send(m *EntityResult) error {
	return x.ServerStream.SendMsg(m)
}

var _VStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vstorepb.VStore",
	HandlerType: (*VStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VStore_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VStore_Get_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _VStore_Lookup_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VStore_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _VStore_Scan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vstorepb/api.proto",
}

func init() { proto.RegisterFile("vstorepb/api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 980 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdf, 0x6f, 0xe3, 0x44,
	0x10, 0x8e, 0xe3, 0xd4, 0xb1, 0xc7, 0x69, 0xaf, 0xda, 0x6b, 0x4b, 0x2e, 0x57, 0xd4, 0x60, 0x84,
	0x08, 0x42, 0x4a, 0x51, 0xc8, 0x09, 0xda, 0x8a, 0x87, 0xeb, 0xa9, 0x34, 0xe2, 0x0e, 0x84, 0x36,
	0x70, 0xaf, 0x91, 0x93, 0x6e, 0x73, 0x56, 0x12, 0xaf, 0xf1, 0xae, 0xab, 0xf3, 0x3d, 0xf1, 0xcc,
	0xbf, 0x81, 0x84, 0x90, 0x10, 0x2f, 0xfc, 0x85, 0x68, 0x7f, 0xd9, 0x4e, 0xc2, 0x01, 0xd7, 0xa7,
	0x78, 0x67, 0xbe, 0x6f, 0xe6, 0x9b, 0xd9, 0xd9, 0x51, 0x00, 0xdd, 0x31, 0x4e, 0x53, 0x92, 0x4c,
	0x4f, 0xc3, 0x24, 0xea, 0x27, 0x29, 0xe5, 0x14, 0xb9, 0xc6, 0xd6, 0x79, 0x3c, 0xa7, 0x74, 0xbe,
	0x24, 0xa7, 0xd2, 0x3e, 0xcd, 0x6e, 0x4f, 0xc9, 0x2a, 0xe1, 0xb9, 0x82, 0x75, 0x1e, 0x6d, 0x3a,
	0xc3, 0xd8, 0xb8, 0x4e, 0x36, 0x5d, 0x3c, 0x5a, 0x11, 0xc6, 0xc3, 0x55, 0xa2, 0x01, 0xc7, 0x1a,
	0x10, 0x26, 0xd1, 0x69, 0x18, 0xc7, 0x94, 0x87, 0x3c, 0xa2, 0x31, 0xd3, 0xde, 0xc3, 0x42, 0xd4,
	0x8c, 0xae, 0x56, 0x34, 0x56, 0xe6, 0xe0, 0x77, 0x0b, 0x9c, 0xab, 0x98, 0x47, 0x3c, 0x47, 0xc7,
	0xe0, 0xc5, 0xe1, 0x8a, 0xb0, 0x24, 0x9c, 0x91, 0xb6, 0xd5, 0xb5, 0x7a, 0x1e, 0x2e, 0x0d, 0x08,
	0x41, 0x63, 0x11, 0xc5, 0x37, 0xed, 0xba, 0x74, 0xc8, 0x6f, 0xd4, 0x83, 0xc6, 0x4d, 0xc8, 0xc3,
	0xb6, 0xdd, 0xb5, 0x7a, 0xfe, 0xe0, 0xa0, 0xaf, 0x04, 0xf4, 0x8d, 0xc2, 0xfe, 0xd3, 0x38, 0xc7,
	0x12, 0x81, 0xda, 0xd0, 0xbc, 0x23, 0x29, 0x8b, 0x68, 0xdc, 0x6e, 0x74, 0xad, 0x9e, 0x8d, 0xcd,
	0x11, 0xf5, 0xc0, 0xb9, 0x0b, 0x97, 0x19, 0x61, 0xed, 0x1d, 0x19, 0x65, 0xbf, 0x6f, 0x84, 0xf6,
	0xc7, 0x3c, 0xcd, 0x66, 0x1c, 0x6b, 0x7f, 0xf0, 0x8b, 0x05, 0x8e, 0x32, 0xa1, 0x61, 0x41, 0xb2,
	0xba, 0x76, 0xcf, 0x1f, 0x1c, 0x6f, 0x92, 0xfa, 0x2f, 0xa5, 0xfb, 0x2a, 0xe6, 0x69, 0x6e, 0x02,
	0x74, 0xbe, 0x01, 0xbf, 0x62, 0x46, 0xfb, 0x60, 0x2f, 0x48, 0xae, 0x2b, 0x15, 0x9f, 0xe8, 0x23,
	0xd8, 0x91, 0x50, 0x59, 0xa4, 0x3f, 0x78, 0x50, 0x46, 0x95, 0x3c, 0xac, 0xbc, 0xe7, 0xf5, 0x2f,
	0xad, 0x60, 0x08, 0xde, 0x8b, 0x88, 0x71, 0x69, 0x47, 0x1f, 0x6f, 0xc8, 0xd9, 0x22, 0x9a, 0x12,
	0xfe, 0xb4, 0x61, 0x47, 0x51, 0xde, 0x07, 0x2f, 0x8a, 0xf9, 0xa4, 0x4c, 0x67, 0x8f, 0x6a, 0xd8,
	0x8d, 0x62, 0x1d, 0xf1, 0x43, 0x68, 0xdd, 0xd0, 0x6c, 0xba, 0x24, 0x1a, 0x21, 0x3a, 0x6c, 0x8d,
	0x6a, 0xd8, 0x57, 0xd6, 0x02, 0xc4, 0x78, 0x1a, 0xc5, 0x73, 0x0d, 0x12, 0x9d, 0xf5, 0x04, 0x48,
	0x59, 0x15, 0xe8, 0x04, 0x60, 0x4a, 0xe9, 0x52, 0x43, 0x44, 0x8f, 0xdd, 0x51, 0x0d, 0x7b, 0xc2,
	0xa6, 0x00, 0x4f, 0x64, 0x94, 0x6c, 0x66, 0xc4, 0x38, 0xff, 0x7c, 0x0d, 0x3a, 0x6e, 0x36, 0xd3,
	0x0a, 0xaf, 0xe0, 0x41, 0x31, 0x80, 0x9a, 0xd9, 0x94, 0xcc, 0xce, 0xd6, 0x18, 0xfc, 0x60, 0x70,
	0xa3, 0x1a, 0xde, 0x2b, 0x48, 0x2a, 0xcc, 0x10, 0x60, 0x19, 0x31, 0x93, 0xdb, 0x95, 0x11, 0x1e,
	0x96, 0xb9, 0x8b, 0x1e, 0x0b, 0xcd, 0xcb, 0xa2, 0xe1, 0x17, 0xb0, 0x37, 0x27, 0x34, 0xa1, 0x65,
	0x0b, 0x3d, 0xc9, 0x44, 0x25, 0xf3, 0x9a, 0xd0, 0xef, 0x85, 0x7f, 0x54, 0xc3, 0xbb, 0x06, 0xab,
	0xc8, 0x1f, 0x80, 0x3f, 0xcd, 0x39, 0x61, 0x9a, 0x09, 0x5d, 0xab, 0xd7, 0x1a, 0xd5, 0x30, 0x48,
	0xa3, 0x84, 0x5c, 0x3a, 0x6a, 0xd8, 0x83, 0xef, 0xc0, 0x79, 0x4e, 0xf2, 0x31, 0xe1, 0xf7, 0x78,
	0x1c, 0xc2, 0x46, 0x72, 0xd6, 0xb6, 0xbb, 0xb6, 0xb4, 0x91, 0x9c, 0x05, 0x67, 0xb0, 0xfb, 0x2c,
	0x25, 0x21, 0x27, 0x98, 0xfc, 0x94, 0x11, 0xc6, 0xc5, 0xf4, 0x13, 0xf9, 0xfa, 0x64, 0xcc, 0xb5,
	0xb6, 0xab, 0x57, 0x89, 0xb5, 0x3f, 0x38, 0x03, 0xb8, 0x26, 0xdc, 0xf0, 0x3e, 0x05, 0x77, 0x41,
	0xf2, 0x09, 0x23, 0xdc, 0xcc, 0x5c, 0x85, 0xa9, 0x24, 0xe3, 0xe6, 0x42, 0xfe, 0xb2, 0xe0, 0x29,
	0xf8, 0x92, 0xca, 0x12, 0x1a, 0x33, 0x82, 0x06, 0xe0, 0xca, 0x98, 0x51, 0x31, 0xaf, 0x47, 0x5b,
	0x59, 0x09, 0xcb, 0x96, 0x1c, 0x17, 0x38, 0x21, 0xfc, 0xc7, 0xe4, 0xe6, 0x5e, 0xc2, 0x67, 0xd0,
	0xaa, 0x06, 0x45, 0x9f, 0x40, 0x53, 0x4b, 0xdf, 0xa6, 0x6a, 0xe5, 0x8e, 0x52, 0x5e, 0x49, 0x52,
	0xff, 0x8f, 0x24, 0x5f, 0x80, 0xf7, 0x9c, 0xe4, 0x5f, 0x47, 0x4b, 0x4e, 0xd2, 0xa2, 0xf3, 0x56,
	0xd9, 0x79, 0x74, 0x04, 0x4e, 0x92, 0x92, 0xdb, 0xe8, 0xb5, 0x0c, 0xe5, 0x62, 0x7d, 0x0a, 0x9e,
	0x80, 0x8f, 0xc3, 0x78, 0x4e, 0x34, 0xf5, 0x00, 0x76, 0xa6, 0x64, 0x1e, 0xc5, 0x9a, 0xab, 0x0e,
	0x62, 0x53, 0x10, 0x79, 0xbb, 0xc2, 0x26, 0x3e, 0x83, 0x5f, 0x2d, 0x68, 0xbd, 0xa0, 0x74, 0x91,
	0x25, 0x9a, 0x78, 0x54, 0xcd, 0x79, 0x59, 0x6f, 0x5b, 0x3a, 0xef, 0x10, 0x40, 0x54, 0x7b, 0x2b,
	0x51, 0xba, 0x8c, 0x87, 0x6b, 0x05, 0xab, 0x00, 0x62, 0xbe, 0x17, 0x45, 0x05, 0xe7, 0xd0, 0x4a,
	0x85, 0x2a, 0xc3, 0x53, 0x0b, 0xf6, 0xb0, 0xe4, 0x55, 0x34, 0x8b, 0x87, 0x99, 0x96, 0xc7, 0x4b,
	0x0f, 0x9a, 0x8a, 0xc5, 0x82, 0xdf, 0x2c, 0xd8, 0x55, 0x2a, 0xcd, 0xb5, 0xbd, 0xfb, 0x18, 0x3f,
	0x06, 0x2f, 0x09, 0xe7, 0x64, 0xc2, 0xa2, 0x37, 0x6a, 0x0d, 0xd9, 0xd8, 0x15, 0x86, 0x71, 0xf4,
	0x86, 0x88, 0xae, 0xce, 0xb2, 0x94, 0xd1, 0x54, 0xed, 0x1e, 0xac, 0x4f, 0xa8, 0x0f, 0x8e, 0x56,
	0xae, 0x96, 0x7a, 0x65, 0xc0, 0xaa, 0x5d, 0xc3, 0x1a, 0x15, 0xfc, 0x6c, 0xc1, 0x9e, 0x11, 0x7a,
	0xff, 0x29, 0x45, 0x27, 0xe0, 0xc7, 0xe4, 0x35, 0x9f, 0x68, 0x4d, 0xaa, 0x0c, 0x10, 0xa6, 0x67,
	0x4a, 0xd7, 0x23, 0x70, 0x5f, 0x85, 0x6c, 0xb2, 0xa2, 0xa9, 0xaa, 0xc5, 0xc5, 0xcd, 0x57, 0x21,
	0xfb, 0x96, 0xa6, 0x24, 0xf8, 0xc3, 0x02, 0x7f, 0x3c, 0x0b, 0xe3, 0xfb, 0x77, 0xaa, 0x2c, 0xda,
	0xfe, 0x3f, 0x45, 0xa3, 0x73, 0xd8, 0x67, 0x3c, 0x4c, 0xb9, 0x58, 0xe0, 0xe6, 0x45, 0x34, 0xde,
	0xf2, 0x22, 0xf6, 0x0c, 0x52, 0x9d, 0x07, 0x7f, 0xd5, 0xc1, 0x79, 0x39, 0x16, 0x18, 0x74, 0x01,
	0x8e, 0xda, 0x29, 0xe8, 0xbd, 0x92, 0xb6, 0xb6, 0x65, 0x3a, 0x47, 0x5b, 0x2b, 0xf9, 0x4a, 0xfc,
	0xe7, 0x08, 0x6a, 0x68, 0x08, 0xf6, 0x35, 0xe1, 0xe8, 0xa0, 0xba, 0x37, 0xcd, 0x92, 0xe9, 0x1c,
	0x6e, 0x58, 0xd5, 0xcd, 0x04, 0x35, 0xf4, 0x15, 0x38, 0xaa, 0xa2, 0x6a, 0xca, 0xb5, 0x41, 0xeb,
	0xb4, 0xb7, 0x1d, 0x05, 0xfd, 0x02, 0x1c, 0xb5, 0x4c, 0xaa, 0xf4, 0xb5, 0xf5, 0xf2, 0x2f, 0x8a,
	0xcf, 0xa0, 0x21, 0xae, 0x09, 0x55, 0xc4, 0x55, 0xae, 0xad, 0xf3, 0x96, 0x21, 0x09, 0x6a, 0x9f,
	0x59, 0x53, 0x47, 0x06, 0xfb, 0xfc, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xe9, 0xdc, 0x56,
	0xa0, 0x09, 0x00, 0x00,
}
