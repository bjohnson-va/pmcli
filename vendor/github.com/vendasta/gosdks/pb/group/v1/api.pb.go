// Code generated by protoc-gen-go. DO NOT EDIT.
// source: group/v1/api.proto

/*
Package group_v1 is a generated protocol buffer package.

It is generated from these files:
	group/v1/api.proto

It has these top-level messages:
	ForeignKeys
	Path
	PagedResponseMetadata
	PagedRequestOptions
	Group
	CreateRequest
	CreateResponse
	AddMembersRequest
	RemoveMembersRequest
	ListMembersRequest
	ListMembersResponse
	ListRequest
	ListResponse
	DeleteGroupRequest
	UpdateRequest
	GetMultiRequest
	GetMultiResponse
*/
package group_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ForeignKeys struct {
	// The id of the partner that owns the group
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The id of the market that owns the group
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *ForeignKeys) Reset()                    { *m = ForeignKeys{} }
func (m *ForeignKeys) String() string            { return proto.CompactTextString(m) }
func (*ForeignKeys) ProtoMessage()               {}
func (*ForeignKeys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ForeignKeys) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *ForeignKeys) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type Path struct {
	// A list of nodes in the path
	Nodes []string `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Path) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type PagedResponseMetadata struct {
	// A cursor that can be provided to retrieve the next page of results
	NextCursor string `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *PagedResponseMetadata) Reset()                    { *m = PagedResponseMetadata{} }
func (m *PagedResponseMetadata) String() string            { return proto.CompactTextString(m) }
func (*PagedResponseMetadata) ProtoMessage()               {}
func (*PagedResponseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PagedResponseMetadata) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *PagedResponseMetadata) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type PagedRequestOptions struct {
	// cursor can be passed to retrieve the next page of results keyed by the cursor
	Cursor string `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	// page_size specifies the number of items to return in the next page
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *PagedRequestOptions) Reset()                    { *m = PagedRequestOptions{} }
func (m *PagedRequestOptions) String() string            { return proto.CompactTextString(m) }
func (*PagedRequestOptions) ProtoMessage()               {}
func (*PagedRequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PagedRequestOptions) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *PagedRequestOptions) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type Group struct {
	// Group identifier
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// Foreign keys which relate to this group
	ForeignKeys *ForeignKeys `protobuf:"bytes,2,opt,name=foreign_keys,json=foreignKeys" json:"foreign_keys,omitempty"`
	// The path to this specific group
	Path *Path `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	// The name of the group
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// The type of the members. A group must consist of the same type of members. A member type could be something
	// like account group, user or salesperson.
	MemberType string `protobuf:"bytes,5,opt,name=member_type,json=memberType" json:"member_type,omitempty"`
	// The group's created time
	Created *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=created" json:"created,omitempty"`
	// The groups updated time
	Updated *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=updated" json:"updated,omitempty"`
	// The namespace of this group
	Namespace string `protobuf:"bytes,9,opt,name=namespace" json:"namespace,omitempty"`
	// The current membership version of this group
	MembershipVersion int64 `protobuf:"varint,10,opt,name=membership_version,json=membershipVersion" json:"membership_version,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Group) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Group) GetForeignKeys() *ForeignKeys {
	if m != nil {
		return m.ForeignKeys
	}
	return nil
}

func (m *Group) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetMemberType() string {
	if m != nil {
		return m.MemberType
	}
	return ""
}

func (m *Group) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Group) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *Group) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Group) GetMembershipVersion() int64 {
	if m != nil {
		return m.MembershipVersion
	}
	return 0
}

type CreateRequest struct {
	// Foreign keys which relate to this group
	ForeignKeys *ForeignKeys `protobuf:"bytes,1,opt,name=foreign_keys,json=foreignKeys" json:"foreign_keys,omitempty"`
	// The name of the group
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The path to the node where the group should be created.
	Path *Path `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	// The type of members this group will store.
	MemberType string `protobuf:"bytes,4,opt,name=member_type,json=memberType" json:"member_type,omitempty"`
	// The namespace this group is scoped to
	Namespace string `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateRequest) GetForeignKeys() *ForeignKeys {
	if m != nil {
		return m.ForeignKeys
	}
	return nil
}

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *CreateRequest) GetMemberType() string {
	if m != nil {
		return m.MemberType
	}
	return ""
}

func (m *CreateRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type CreateResponse struct {
	// The id of the group which was created
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// The path to the group which was created
	Path *Path `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateResponse) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *CreateResponse) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

type AddMembersRequest struct {
	// The path to a group where the members should be added
	Path *Path `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// The members to add
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *AddMembersRequest) Reset()                    { *m = AddMembersRequest{} }
func (m *AddMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*AddMembersRequest) ProtoMessage()               {}
func (*AddMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddMembersRequest) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *AddMembersRequest) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

type RemoveMembersRequest struct {
	// The path to a group where the members should be removed
	Path *Path `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// The members to remove
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *RemoveMembersRequest) Reset()                    { *m = RemoveMembersRequest{} }
func (m *RemoveMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveMembersRequest) ProtoMessage()               {}
func (*RemoveMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RemoveMembersRequest) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RemoveMembersRequest) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

type ListMembersRequest struct {
	// The path to the node
	Path *Path `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Options for how to page the response for this request
	PagingOptions *PagedRequestOptions `protobuf:"bytes,2,opt,name=paging_options,json=pagingOptions" json:"paging_options,omitempty"`
}

func (m *ListMembersRequest) Reset()                    { *m = ListMembersRequest{} }
func (m *ListMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMembersRequest) ProtoMessage()               {}
func (*ListMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListMembersRequest) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ListMembersRequest) GetPagingOptions() *PagedRequestOptions {
	if m != nil {
		return m.PagingOptions
	}
	return nil
}

type ListMembersResponse struct {
	// All the members in the group and its descendants
	Members []string `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	// The total members in this group
	TotalMembers int64 `protobuf:"varint,2,opt,name=total_members,json=totalMembers" json:"total_members,omitempty"`
	// Metadata about the paging
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,3,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
}

func (m *ListMembersResponse) Reset()                    { *m = ListMembersResponse{} }
func (m *ListMembersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMembersResponse) ProtoMessage()               {}
func (*ListMembersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListMembersResponse) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ListMembersResponse) GetTotalMembers() int64 {
	if m != nil {
		return m.TotalMembers
	}
	return 0
}

func (m *ListMembersResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

type ListRequest struct {
	// Foreign keys which relate to this group
	ForeignKeys *ForeignKeys `protobuf:"bytes,1,opt,name=foreign_keys,json=foreignKeys" json:"foreign_keys,omitempty"`
	// The path to the group. If no path is provided a list of the root groups will be returned.
	Path *Path `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// Filter the list of groups
	Filters *ListRequest_Filters `protobuf:"bytes,3,opt,name=filters" json:"filters,omitempty"`
	// Options for how to page the response for this request
	PagingOptions *PagedRequestOptions `protobuf:"bytes,4,opt,name=paging_options,json=pagingOptions" json:"paging_options,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListRequest) GetForeignKeys() *ForeignKeys {
	if m != nil {
		return m.ForeignKeys
	}
	return nil
}

func (m *ListRequest) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ListRequest) GetFilters() *ListRequest_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListRequest) GetPagingOptions() *PagedRequestOptions {
	if m != nil {
		return m.PagingOptions
	}
	return nil
}

type ListRequest_Filters struct {
	// Filter the groups to the types of values they store
	MemberType string `protobuf:"bytes,1,opt,name=member_type,json=memberType" json:"member_type,omitempty"`
	// Filter the groups by a specific namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *ListRequest_Filters) Reset()                    { *m = ListRequest_Filters{} }
func (m *ListRequest_Filters) String() string            { return proto.CompactTextString(m) }
func (*ListRequest_Filters) ProtoMessage()               {}
func (*ListRequest_Filters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *ListRequest_Filters) GetMemberType() string {
	if m != nil {
		return m.MemberType
	}
	return ""
}

func (m *ListRequest_Filters) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ListResponse struct {
	// Metadata about the paging
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,1,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
	// A list of groups
	Groups []*Group `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

func (m *ListResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type DeleteGroupRequest struct {
	// A path to the group to delete
	Path *Path `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *DeleteGroupRequest) Reset()                    { *m = DeleteGroupRequest{} }
func (m *DeleteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupRequest) ProtoMessage()               {}
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteGroupRequest) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

type UpdateRequest struct {
	// Path to the group to update
	Path *Path `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Name the new name of the group
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpdateRequest) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetMultiRequest struct {
	Path []*Path `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
}

func (m *GetMultiRequest) Reset()                    { *m = GetMultiRequest{} }
func (m *GetMultiRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMultiRequest) ProtoMessage()               {}
func (*GetMultiRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetMultiRequest) GetPath() []*Path {
	if m != nil {
		return m.Path
	}
	return nil
}

type GetMultiResponse struct {
	Groups []*GetMultiResponse_GroupContainer `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *GetMultiResponse) Reset()                    { *m = GetMultiResponse{} }
func (m *GetMultiResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMultiResponse) ProtoMessage()               {}
func (*GetMultiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetMultiResponse) GetGroups() []*GetMultiResponse_GroupContainer {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GetMultiResponse_GroupContainer struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *GetMultiResponse_GroupContainer) Reset()         { *m = GetMultiResponse_GroupContainer{} }
func (m *GetMultiResponse_GroupContainer) String() string { return proto.CompactTextString(m) }
func (*GetMultiResponse_GroupContainer) ProtoMessage()    {}
func (*GetMultiResponse_GroupContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 0}
}

func (m *GetMultiResponse_GroupContainer) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func init() {
	proto.RegisterType((*ForeignKeys)(nil), "group.v1.ForeignKeys")
	proto.RegisterType((*Path)(nil), "group.v1.Path")
	proto.RegisterType((*PagedResponseMetadata)(nil), "group.v1.PagedResponseMetadata")
	proto.RegisterType((*PagedRequestOptions)(nil), "group.v1.PagedRequestOptions")
	proto.RegisterType((*Group)(nil), "group.v1.Group")
	proto.RegisterType((*CreateRequest)(nil), "group.v1.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "group.v1.CreateResponse")
	proto.RegisterType((*AddMembersRequest)(nil), "group.v1.AddMembersRequest")
	proto.RegisterType((*RemoveMembersRequest)(nil), "group.v1.RemoveMembersRequest")
	proto.RegisterType((*ListMembersRequest)(nil), "group.v1.ListMembersRequest")
	proto.RegisterType((*ListMembersResponse)(nil), "group.v1.ListMembersResponse")
	proto.RegisterType((*ListRequest)(nil), "group.v1.ListRequest")
	proto.RegisterType((*ListRequest_Filters)(nil), "group.v1.ListRequest.Filters")
	proto.RegisterType((*ListResponse)(nil), "group.v1.ListResponse")
	proto.RegisterType((*DeleteGroupRequest)(nil), "group.v1.DeleteGroupRequest")
	proto.RegisterType((*UpdateRequest)(nil), "group.v1.UpdateRequest")
	proto.RegisterType((*GetMultiRequest)(nil), "group.v1.GetMultiRequest")
	proto.RegisterType((*GetMultiResponse)(nil), "group.v1.GetMultiResponse")
	proto.RegisterType((*GetMultiResponse_GroupContainer)(nil), "group.v1.GetMultiResponse.GroupContainer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GroupService service

type GroupServiceClient interface {
	// Create a new group
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Add members to a specific group
	AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove members to a specific group
	RemoveMembers(ctx context.Context, in *RemoveMembersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// ListMembers all the values in a group, and it's children as a flat list
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	// List all the child groups for a given path
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Update a group
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete a group
	Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// GetMulti groups
	GetMulti(ctx context.Context, in *GetMultiRequest, opts ...grpc.CallOption) (*GetMultiResponse, error)
}

type groupServiceClient struct {
	cc *grpc.ClientConn
}

func NewGroupServiceClient(cc *grpc.ClientConn) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/AddMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) RemoveMembers(ctx context.Context, in *RemoveMembersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/RemoveMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/ListMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetMulti(ctx context.Context, in *GetMultiRequest, opts ...grpc.CallOption) (*GetMultiResponse, error) {
	out := new(GetMultiResponse)
	err := grpc.Invoke(ctx, "/group.v1.GroupService/GetMulti", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupService service

type GroupServiceServer interface {
	// Create a new group
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Add members to a specific group
	AddMembers(context.Context, *AddMembersRequest) (*google_protobuf1.Empty, error)
	// Remove members to a specific group
	RemoveMembers(context.Context, *RemoveMembersRequest) (*google_protobuf1.Empty, error)
	// ListMembers all the values in a group, and it's children as a flat list
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	// List all the child groups for a given path
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Update a group
	Update(context.Context, *UpdateRequest) (*google_protobuf1.Empty, error)
	// Delete a group
	Delete(context.Context, *DeleteGroupRequest) (*google_protobuf1.Empty, error)
	// GetMulti groups
	GetMulti(context.Context, *GetMultiRequest) (*GetMultiResponse, error)
}

func RegisterGroupServiceServer(s *grpc.Server, srv GroupServiceServer) {
	s.RegisterService(&_GroupService_serviceDesc, srv)
}

func _GroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/AddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).AddMembers(ctx, req.(*AddMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_RemoveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).RemoveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/RemoveMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).RemoveMembers(ctx, req.(*RemoveMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Delete(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.v1.GroupService/GetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetMulti(ctx, req.(*GetMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "group.v1.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupService_Create_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _GroupService_AddMembers_Handler,
		},
		{
			MethodName: "RemoveMembers",
			Handler:    _GroupService_RemoveMembers_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _GroupService_ListMembers_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupService_Delete_Handler,
		},
		{
			MethodName: "GetMulti",
			Handler:    _GroupService_GetMulti_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group/v1/api.proto",
}

func init() { proto.RegisterFile("group/v1/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xed, 0x6e, 0xdb, 0x54,
	0x18, 0xae, 0xf3, 0x9d, 0x37, 0x4d, 0xcb, 0xce, 0xd6, 0xe1, 0xa5, 0x2d, 0x9d, 0x0e, 0x42, 0x8c,
	0x1f, 0xa4, 0x5a, 0x01, 0x75, 0x12, 0x42, 0x62, 0xca, 0x58, 0x17, 0x58, 0xb5, 0xe1, 0x16, 0xfe,
	0x5a, 0xa7, 0xf5, 0xdb, 0xc4, 0x5a, 0xec, 0x63, 0xec, 0x93, 0x88, 0xec, 0x07, 0x12, 0x37, 0xc0,
	0x25, 0xf0, 0x9b, 0x0b, 0xe0, 0x02, 0xb8, 0x22, 0xae, 0x01, 0x9d, 0x0f, 0xd7, 0x76, 0x9c, 0x86,
	0xac, 0xf0, 0xaf, 0xe7, 0xfd, 0x78, 0xfc, 0xbc, 0xcf, 0xfb, 0x91, 0x02, 0x19, 0xc5, 0x7c, 0x1a,
	0x1d, 0xce, 0x1e, 0x1f, 0xb2, 0xc8, 0xef, 0x47, 0x31, 0x17, 0x9c, 0xb4, 0x94, 0xad, 0x3f, 0x7b,
	0xdc, 0x3b, 0x18, 0x71, 0x3e, 0x9a, 0xe0, 0xa1, 0xb2, 0x5f, 0x4c, 0xaf, 0x0e, 0x85, 0x1f, 0x60,
	0x22, 0x58, 0x10, 0xe9, 0xd0, 0xde, 0xee, 0x62, 0x00, 0x06, 0x91, 0x98, 0x6b, 0x27, 0x1d, 0x42,
	0xe7, 0x39, 0x8f, 0xd1, 0x1f, 0x85, 0xdf, 0xe1, 0x3c, 0x21, 0xfb, 0x00, 0x11, 0x8b, 0x45, 0x88,
	0xb1, 0xeb, 0x7b, 0xb6, 0xf5, 0xd0, 0x7a, 0xd4, 0x76, 0xda, 0xc6, 0x32, 0xf4, 0xc8, 0x2e, 0xb4,
	0x03, 0x16, 0xbf, 0x41, 0x21, 0xbd, 0x15, 0xe5, 0x6d, 0x69, 0xc3, 0xd0, 0xa3, 0x7b, 0x50, 0x7b,
	0xcd, 0xc4, 0x98, 0xdc, 0x83, 0x7a, 0xc8, 0x3d, 0x4c, 0x6c, 0xeb, 0x61, 0xf5, 0x51, 0xdb, 0xd1,
	0x0f, 0x7a, 0x06, 0x3b, 0xaf, 0xd9, 0x08, 0x3d, 0x07, 0x93, 0x88, 0x87, 0x09, 0x9e, 0xa2, 0x60,
	0x1e, 0x13, 0x8c, 0x1c, 0x40, 0x27, 0xc4, 0x9f, 0x85, 0x7b, 0x39, 0x8d, 0x13, 0x1e, 0x9b, 0x6f,
	0x82, 0x34, 0x0d, 0x94, 0x85, 0x3c, 0x80, 0xd6, 0x98, 0x25, 0x6e, 0xc0, 0x63, 0x54, 0xdf, 0x6c,
	0x39, 0xcd, 0x31, 0x4b, 0x4e, 0x79, 0x8c, 0xf4, 0x5b, 0xb8, 0x6b, 0x40, 0x7f, 0x9a, 0x62, 0x22,
	0x5e, 0x45, 0xc2, 0xe7, 0x61, 0x42, 0xee, 0x43, 0xa3, 0x80, 0x66, 0x5e, 0x92, 0x7e, 0xc4, 0x46,
	0xe8, 0x26, 0xfe, 0x5b, 0x0d, 0x55, 0x75, 0x5a, 0xd2, 0x70, 0xe6, 0xbf, 0x45, 0xfa, 0x77, 0x05,
	0xea, 0x27, 0x52, 0x54, 0xf9, 0x41, 0xa5, 0x6e, 0x26, 0x41, 0x53, 0xbd, 0x87, 0x1e, 0x79, 0x02,
	0x9b, 0x57, 0x5a, 0x2e, 0xf7, 0x0d, 0xce, 0x13, 0x05, 0xd2, 0x39, 0xda, 0xe9, 0xa7, 0xdd, 0xe8,
	0xe7, 0xc4, 0x74, 0x3a, 0x57, 0x39, 0x65, 0x29, 0xd4, 0x22, 0x26, 0xc6, 0x76, 0x55, 0x65, 0x6c,
	0x65, 0x19, 0x52, 0x33, 0x47, 0xf9, 0x08, 0x81, 0x5a, 0xc8, 0x02, 0xb4, 0x6b, 0xea, 0xa3, 0xea,
	0x6f, 0x29, 0x4f, 0x80, 0xc1, 0x05, 0xc6, 0xae, 0x98, 0x47, 0x68, 0xd7, 0xb5, 0x3c, 0xda, 0x74,
	0x3e, 0x8f, 0x90, 0x7c, 0x0e, 0xcd, 0xcb, 0x18, 0x99, 0x40, 0xcf, 0x6e, 0x2a, 0xec, 0x5e, 0x5f,
	0x37, 0xbc, 0x9f, 0x36, 0xbc, 0x7f, 0x9e, 0x4e, 0x84, 0x93, 0x86, 0xca, 0xac, 0x69, 0xe4, 0xa9,
	0xac, 0xd6, 0xbf, 0x67, 0x99, 0x50, 0xb2, 0x07, 0x6d, 0x49, 0x2a, 0x89, 0xd8, 0x25, 0xda, 0x6d,
	0x3d, 0x1d, 0xd7, 0x06, 0xf2, 0x29, 0x10, 0xcd, 0x2b, 0x19, 0xfb, 0x91, 0x3b, 0xc3, 0x38, 0xf1,
	0x79, 0x68, 0x83, 0xd2, 0xf9, 0x4e, 0xe6, 0xf9, 0x51, 0x3b, 0xe8, 0x5f, 0x16, 0x74, 0x07, 0x8a,
	0x8e, 0x69, 0x5f, 0x49, 0x5d, 0x6b, 0x6d, 0x75, 0x53, 0xe5, 0x2a, 0x39, 0xe5, 0xd6, 0x51, 0x7c,
	0x41, 0xdd, 0x5a, 0x49, 0xdd, 0x42, 0xc5, 0xf5, 0x85, 0x8a, 0xe9, 0x2b, 0xd8, 0x4a, 0x2b, 0xd0,
	0x53, 0xbd, 0x6a, 0x76, 0x52, 0x3e, 0x95, 0x9b, 0xf9, 0xd0, 0xef, 0xe1, 0xce, 0x53, 0xcf, 0x3b,
	0xd5, 0x5a, 0xa5, 0xb2, 0xa4, 0x89, 0xd6, 0x8a, 0x42, 0x6c, 0x68, 0x1a, 0x85, 0xed, 0x8a, 0x5a,
	0xbb, 0xf4, 0x49, 0xcf, 0xe1, 0x9e, 0x83, 0x01, 0x9f, 0xe1, 0xff, 0x8a, 0xfa, 0x0b, 0x90, 0x97,
	0x7e, 0x22, 0x6e, 0x81, 0xf9, 0x0c, 0xb6, 0x22, 0x36, 0xf2, 0xc3, 0x91, 0xcb, 0xf5, 0xba, 0x1a,
	0x41, 0xf6, 0xf3, 0xd1, 0xa5, 0x9d, 0x76, 0xba, 0x3a, 0xc9, 0x3c, 0xe9, 0xef, 0x16, 0xdc, 0x2d,
	0x10, 0x30, 0xfa, 0xe7, 0x18, 0x5b, 0x05, 0xc6, 0xe4, 0x43, 0xe8, 0x0a, 0x2e, 0xd8, 0xc4, 0xcd,
	0x2a, 0x92, 0x83, 0xb9, 0xa9, 0x8c, 0x06, 0x86, 0xbc, 0x80, 0x6d, 0x43, 0x2e, 0x30, 0xf7, 0xc9,
	0x8c, 0xcf, 0x41, 0x89, 0x5d, 0xf1, 0x8c, 0x39, 0xa6, 0xa8, 0xf4, 0x4d, 0xff, 0xac, 0x40, 0x47,
	0x12, 0xfc, 0xef, 0xb3, 0xbd, 0xc6, 0xdc, 0x90, 0x63, 0x68, 0x5e, 0xf9, 0x13, 0x21, 0xcb, 0xaa,
	0x2e, 0xaa, 0x99, 0x63, 0xd1, 0x7f, 0xae, 0x83, 0x9c, 0x34, 0x7a, 0x49, 0x37, 0x6a, 0xef, 0xde,
	0x8d, 0xde, 0x0b, 0x68, 0x1a, 0xe4, 0xc5, 0x8d, 0xb2, 0x56, 0x6f, 0x54, 0x65, 0x71, 0xa3, 0x7e,
	0xb5, 0x60, 0x53, 0x13, 0x36, 0x0d, 0x5d, 0xd2, 0x11, 0xeb, 0x56, 0x1d, 0x21, 0x1f, 0x43, 0x43,
	0x65, 0xe8, 0x59, 0xee, 0x1c, 0x6d, 0x67, 0x00, 0xea, 0xee, 0x3b, 0xc6, 0x4d, 0x9f, 0x00, 0x79,
	0x86, 0x13, 0x14, 0xa8, 0xcd, 0xeb, 0xcf, 0x36, 0x3d, 0x81, 0xee, 0x0f, 0xea, 0x54, 0xbe, 0xcb,
	0x42, 0x2c, 0xb9, 0x5d, 0xf4, 0x0b, 0xd8, 0x3e, 0x41, 0x71, 0x3a, 0x9d, 0x08, 0xbf, 0x0c, 0x55,
	0xbd, 0xf1, 0xfb, 0xbf, 0x59, 0xf0, 0x5e, 0x96, 0x67, 0x14, 0x7c, 0x7a, 0x5d, 0xb7, 0x4e, 0xfd,
	0x24, 0x57, 0xf7, 0x42, 0xac, 0x16, 0x62, 0xc0, 0x43, 0xc1, 0xfc, 0x10, 0xe3, 0x54, 0x91, 0xde,
	0x31, 0x6c, 0x15, 0x3d, 0xe4, 0x23, 0xa8, 0x2b, 0x9f, 0xa9, 0xac, 0xa4, 0xa5, 0xf6, 0x1e, 0xfd,
	0x51, 0x83, 0x4d, 0x65, 0x38, 0xc3, 0x78, 0xe6, 0x5f, 0x22, 0xf9, 0x0a, 0x1a, 0xfa, 0x62, 0x92,
	0xf7, 0xb3, 0x94, 0xc2, 0xaf, 0x40, 0xcf, 0x2e, 0x3b, 0x34, 0x3b, 0xba, 0x41, 0x06, 0x00, 0xd9,
	0x7d, 0x24, 0xbb, 0x59, 0x64, 0xe9, 0x6a, 0xf6, 0xee, 0x97, 0x7e, 0xd0, 0xbe, 0x91, 0xff, 0xf7,
	0xd0, 0x0d, 0x32, 0x84, 0x6e, 0xe1, 0x22, 0x92, 0x0f, 0x32, 0x9c, 0x65, 0xa7, 0x72, 0x05, 0xd4,
	0x4b, 0xbd, 0xe4, 0x29, 0xd0, 0x5e, 0x71, 0xeb, 0x16, 0x60, 0xf6, 0x6f, 0xf0, 0x5e, 0x57, 0x77,
	0x0c, 0x35, 0xe9, 0x20, 0x3b, 0x4b, 0x97, 0x57, 0xd2, 0x28, 0x9a, 0xaf, 0x13, 0xbf, 0x84, 0x86,
	0x9e, 0xbb, 0xbc, 0xaa, 0x85, 0x49, 0x5c, 0x51, 0xc3, 0xd7, 0xd0, 0xd0, 0xe3, 0x9e, 0xa7, 0x5f,
	0x5e, 0x80, 0x15, 0x08, 0x03, 0x68, 0xa5, 0x93, 0x44, 0x1e, 0x2c, 0x9b, 0x2e, 0x0d, 0xd0, 0xbb,
	0x79, 0xf0, 0xe8, 0xc6, 0x45, 0x43, 0xc1, 0x7e, 0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77,
	0x35, 0x11, 0xb6, 0xee, 0x0a, 0x00, 0x00,
}
