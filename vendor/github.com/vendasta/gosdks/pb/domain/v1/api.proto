syntax = "proto3";

package domain.v1;

import "dns_record.proto";


// A request for getting a domain's DNS records
message GetDNSRecordsRequest {
    // The domain for which to get DNS records
    string domain = 1;
    // The record types for which to check
    repeated DNSRecordType record_types = 2;
}

// A response that represents a donmain's DNS records
message GetDNSRecordsResponse {
    // The domain that has dns records below
    string domain = 1;
    // DNS A record for the domain above
    ARecord a_record = 2;
    // DNS Cname record for the domain above
    CNameRecord cname_record = 3;
    // DNS CAA record for the domain above
    CAARecord caa_record = 4;
}

// Identifier is a contextual id that holds hierarchical data.
//
// Examples:
//
// Identifier{contextual_identifier: "/application/partner-center"}
// Identifier{contextual_identifier: "/product/RM/partner/ABC"}
// Identifier{contextual_identifier: "/product/SM/partner/DEF/market/my-market"}
// Identifier{contextual_identifier: "/marketplace/website-pro/account/AG-J7V5H8AV/website/49da31ebc3f34f6c97dd540e2447dca7"}
//
// These hierarchical identifiers allow for flexible re-use, as well as scanning across each contextual piece.
// For example, you could scan across all domains for `/product/RM`, which returns all custom domains for Reputation Intelligence.
// You could also scan across `/product/SM/partner/DEF` and get all of the custom market domains for the DEF partner in SM.
message Identifier {
    string contextual_identifier = 1;
}

// Provides the domain name and additional metadata.
message Domain {
    string domain = 1;
    bool secure = 2;
}

// A request for getting an Identifier by a domain.
message GetIdentifierByDomainRequest {
    //  The domain or sub-domain name.
    // Examples:
    //  - partners.vendasta.com
    //  - steprep-prod-hrd.appspot.com
    //  - rep.customdomain.com
    string domain = 1;
}

// Response for GetIdentifierByDomain
message GetIdentifierByDomainResponse {
    Identifier identifier = 1;
}

// A request for getting a domain by an Identifier.
message GetDomainByIdentifierRequest {
    Identifier identifier = 1;
}

// Response for GetDomainByIdentifier
message GetDomainByIdentifierResponse {
    Domain primary = 1;
    repeated Domain secondaries = 2;
}

// Service for domain related functionalities, like DNS lookup
service DomainService {
  // contract: returns a gRPC 7 if caller is unauthorized to access domain micro service
  // Get a domain's DNS records by given domain
  rpc GetDNSRecords (GetDNSRecordsRequest) returns (GetDNSRecordsResponse) {};

  // Returns an identifier of the owner of the given domain if it exists
  rpc GetIdentifierByDomain(GetIdentifierByDomainRequest) returns (GetIdentifierByDomainResponse) {};

  // Returns a domain by the Identifier if it exists.
  rpc GetDomainByIdentifier(GetDomainByIdentifierRequest) returns (GetDomainByIdentifierResponse) {};
}

