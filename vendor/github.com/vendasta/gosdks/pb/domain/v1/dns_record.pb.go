// Code generated by protoc-gen-go.
// source: dns_record.proto
// DO NOT EDIT!

package domain_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Enum for DNS record types
type DNSRecordType int32

const (
	DNSRecordType_A_RECORD     DNSRecordType = 0
	DNSRecordType_CNAME_RECORD DNSRecordType = 1
	DNSRecordType_CAA_RECORD   DNSRecordType = 2
)

var DNSRecordType_name = map[int32]string{
	0: "A_RECORD",
	1: "CNAME_RECORD",
	2: "CAA_RECORD",
}
var DNSRecordType_value = map[string]int32{
	"A_RECORD":     0,
	"CNAME_RECORD": 1,
	"CAA_RECORD":   2,
}

func (x DNSRecordType) String() string {
	return proto.EnumName(DNSRecordType_name, int32(x))
}
func (DNSRecordType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// A record
type ARecord struct {
	// A record value
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *ARecord) Reset()                    { *m = ARecord{} }
func (m *ARecord) String() string            { return proto.CompactTextString(m) }
func (*ARecord) ProtoMessage()               {}
func (*ARecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ARecord) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

// Cname record
type CNameRecord struct {
	// Cname record value
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *CNameRecord) Reset()                    { *m = CNameRecord{} }
func (m *CNameRecord) String() string            { return proto.CompactTextString(m) }
func (*CNameRecord) ProtoMessage()               {}
func (*CNameRecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CNameRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// CAA record value
type CAAValue struct {
	// real CAA record value
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// boolean to represent the issuer_critical bit of the flag property. In a CAA record, the flag is an 8-bit integer
	// where the most significant bit indicates whether the corresponding property tag must be completely understood
	// in order for the CAA record to be issued correctly.
	IssuerCriticalFlag bool `protobuf:"varint,2,opt,name=issuer_critical_flag,json=issuerCriticalFlag" json:"issuer_critical_flag,omitempty"`
	// A string that represents the identifier of the property represented by the record
	Tag string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	// Time to live
	Ttl uint64 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	// Record class
	RecordClass string `protobuf:"bytes,5,opt,name=record_class,json=recordClass" json:"record_class,omitempty"`
}

func (m *CAAValue) Reset()                    { *m = CAAValue{} }
func (m *CAAValue) String() string            { return proto.CompactTextString(m) }
func (*CAAValue) ProtoMessage()               {}
func (*CAAValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CAAValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CAAValue) GetIssuerCriticalFlag() bool {
	if m != nil {
		return m.IssuerCriticalFlag
	}
	return false
}

func (m *CAAValue) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *CAAValue) GetTtl() uint64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *CAAValue) GetRecordClass() string {
	if m != nil {
		return m.RecordClass
	}
	return ""
}

// CAA record
type CAARecord struct {
	// CAA record value
	Value []*CAAValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *CAARecord) Reset()                    { *m = CAARecord{} }
func (m *CAARecord) String() string            { return proto.CompactTextString(m) }
func (*CAARecord) ProtoMessage()               {}
func (*CAARecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CAARecord) GetValue() []*CAAValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ARecord)(nil), "domain.v1.ARecord")
	proto.RegisterType((*CNameRecord)(nil), "domain.v1.CNameRecord")
	proto.RegisterType((*CAAValue)(nil), "domain.v1.CAAValue")
	proto.RegisterType((*CAARecord)(nil), "domain.v1.CAARecord")
	proto.RegisterEnum("domain.v1.DNSRecordType", DNSRecordType_name, DNSRecordType_value)
}

func init() { proto.RegisterFile("dns_record.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0xcd, 0xfc, 0x68, 0x7b, 0x5b, 0xa5, 0xc4, 0x59, 0x74, 0x67, 0xad, 0x9b, 0xea, 0xa2,
	0xf8, 0x03, 0x6e, 0x25, 0x64, 0xc6, 0x9d, 0x15, 0xa2, 0xb8, 0x0d, 0xb1, 0x8d, 0xa5, 0x90, 0x99,
	0x0e, 0x49, 0x67, 0xc0, 0x47, 0xf1, 0x6d, 0xa5, 0xc9, 0x74, 0x14, 0x74, 0x77, 0xef, 0x39, 0x5f,
	0xc2, 0x3d, 0x07, 0xa2, 0x6a, 0x65, 0xb8, 0x96, 0x65, 0xab, 0xab, 0x7c, 0xad, 0xdb, 0xae, 0xc5,
	0x7e, 0xd5, 0x2e, 0x45, 0xb3, 0xca, 0xb7, 0x37, 0xe9, 0x19, 0x1c, 0x11, 0x66, 0x3d, 0x3c, 0x83,
	0xe9, 0x56, 0xa8, 0x8d, 0x8c, 0x51, 0x32, 0xce, 0x7c, 0xe6, 0x96, 0xf4, 0x02, 0x02, 0x5a, 0x88,
	0xa5, 0xfc, 0x0b, 0xa1, 0x1f, 0xe8, 0x0b, 0x81, 0x47, 0x09, 0x79, 0xeb, 0x97, 0xff, 0x11, 0x7c,
	0x0d, 0xb3, 0xc6, 0x98, 0x8d, 0xd4, 0xbc, 0xd4, 0x4d, 0xd7, 0x94, 0x42, 0xf1, 0x0f, 0x25, 0xea,
	0x78, 0x94, 0xa0, 0xcc, 0x63, 0xd8, 0x79, 0x74, 0x67, 0x3d, 0x2a, 0x51, 0xe3, 0x08, 0xc6, 0x9d,
	0xa8, 0xe3, 0xb1, 0xfd, 0xa5, 0x1f, 0xad, 0xd2, 0xa9, 0x78, 0x92, 0xa0, 0x6c, 0xc2, 0xfa, 0x11,
	0x9f, 0x43, 0xe8, 0x92, 0xf1, 0x52, 0x09, 0x63, 0xe2, 0xa9, 0x85, 0x03, 0xa7, 0xd1, 0x5e, 0x4a,
	0xef, 0xc1, 0xa7, 0x64, 0xc8, 0x78, 0xf9, 0x3b, 0x63, 0x70, 0x7b, 0x9a, 0xef, 0x9b, 0xc8, 0x87,
	0xfb, 0x77, 0x07, 0x5f, 0x3d, 0xc0, 0xf1, 0xbc, 0x78, 0x71, 0xef, 0x5e, 0x3f, 0xd7, 0x12, 0x87,
	0xe0, 0x11, 0xce, 0x16, 0xf4, 0x99, 0xcd, 0xa3, 0x03, 0x1c, 0x41, 0x48, 0x0b, 0xf2, 0xb4, 0x18,
	0x14, 0x84, 0x4f, 0x00, 0x28, 0xd9, 0x13, 0xa3, 0xf7, 0x43, 0x5b, 0xf6, 0xdd, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb6, 0xe0, 0x93, 0x2a, 0x80, 0x01, 0x00, 0x00,
}
