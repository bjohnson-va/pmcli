// Code generated by protoc-gen-go.
// source: review_gen.proto
// DO NOT EDIT!

/*
Package review_gen_v1 is a generated protocol buffer package.

It is generated from these files:
	review_gen.proto

It has these top-level messages:
	Contact
	CreateContactRequest
	Review
	ListReviewRequest
	ListReviewResponse
	GetMultiReviewRequest
	GetMultiReviewResponse
*/
package review_gen_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A customer that can be asked to review the business
type Contact struct {
	// The customer's email (used to send email review requests)
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	// The customer's first name (used in review request templates)
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// The customer's last name (used in review request templates)
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	// The customer's mobile number (used to send SMS review requests)
	MobileNumber string `protobuf:"bytes,4,opt,name=mobile_number,json=mobileNumber" json:"mobile_number,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Contact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Contact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Contact) GetMobileNumber() string {
	if m != nil {
		return m.MobileNumber
	}
	return ""
}

// Creates a new Contact, and optionally request a review from them via email or SMS
type CreateContactRequest struct {
	// The contact to create
	Contact *Contact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	// Request a review via the default email template?
	RequestReviewByEmail bool `protobuf:"varint,2,opt,name=request_review_by_email,json=requestReviewByEmail" json:"request_review_by_email,omitempty"`
	// Request a review via the default SMS template?
	RequestReviewBy_SMS bool `protobuf:"varint,3,opt,name=request_review_by_SMS,json=requestReviewBySMS" json:"request_review_by_SMS,omitempty"`
	// The AccountGroupId to create the contact under
	Account string `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
}

func (m *CreateContactRequest) Reset()                    { *m = CreateContactRequest{} }
func (m *CreateContactRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContactRequest) ProtoMessage()               {}
func (*CreateContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateContactRequest) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *CreateContactRequest) GetRequestReviewByEmail() bool {
	if m != nil {
		return m.RequestReviewByEmail
	}
	return false
}

func (m *CreateContactRequest) GetRequestReviewBy_SMS() bool {
	if m != nil {
		return m.RequestReviewBy_SMS
	}
	return false
}

func (m *CreateContactRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// Stores the data about a single review, on a single business listing, on a single
// review source.
type Review struct {
	// The ID of the review
	ReviewId string `protobuf:"bytes,1,opt,name=review_id,json=reviewId" json:"review_id,omitempty"`
	// The ID of the listing the review is associated with
	ListingId string `protobuf:"bytes,2,opt,name=listing_id,json=listingId" json:"listing_id,omitempty"`
	// The ID of the business the listing is associated with
	BusinessId string `protobuf:"bytes,3,opt,name=business_id,json=businessId" json:"business_id,omitempty"`
	// The ID of the review source
	SourceId string `protobuf:"bytes,4,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	// The title of the review (not all sites have a title)
	Title string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	// Indicates whether a star rating is included with the review
	HasRating bool `protobuf:"varint,6,opt,name=has_rating,json=hasRating" json:"has_rating,omitempty"`
	// The number of stars (1-5), only valid if has_rating is true
	Stars int32 `protobuf:"varint,7,opt,name=stars" json:"stars,omitempty"`
	// A snippet of the text of the review (not all sites require a reviewer to
	// write anything to accompany their star rating).
	Snippet string `protobuf:"bytes,8,opt,name=snippet" json:"snippet,omitempty"`
	// A direct link to the review (or listing, if the source does not support
	// direct links to individual reviews).
	Link string `protobuf:"bytes,9,opt,name=link" json:"link,omitempty"`
	// The time when review was retrieved.  Some sources have push-APIs so the
	// reviews will be available almost immediately, others only after they are
	// periodically fetch.
	Retrieved *google_protobuf2.Timestamp `protobuf:"bytes,10,opt,name=retrieved" json:"retrieved,omitempty"`
	// The time when review was created (many sites quarantine reviews, so this
	// often is not when the review first appeared on the site)
	Created *google_protobuf2.Timestamp `protobuf:"bytes,11,opt,name=created" json:"created,omitempty"`
}

func (m *Review) Reset()                    { *m = Review{} }
func (m *Review) String() string            { return proto.CompactTextString(m) }
func (*Review) ProtoMessage()               {}
func (*Review) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Review) GetReviewId() string {
	if m != nil {
		return m.ReviewId
	}
	return ""
}

func (m *Review) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *Review) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *Review) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *Review) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Review) GetHasRating() bool {
	if m != nil {
		return m.HasRating
	}
	return false
}

func (m *Review) GetStars() int32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

func (m *Review) GetSnippet() string {
	if m != nil {
		return m.Snippet
	}
	return ""
}

func (m *Review) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Review) GetRetrieved() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Retrieved
	}
	return nil
}

func (m *Review) GetCreated() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

// Requests a set of reviews for a business within a specific timeframe
type ListReviewRequest struct {
	// The ID of the business to gather reviews for
	BusinessId string `protobuf:"bytes,1,opt,name=business_id,json=businessId" json:"business_id,omitempty"`
	// The start of the window in time to gather reviews
	From *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	// The end of the window in time to gather reviews
	To *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	// A cursor is provided to allow the client to gather reviews beyond the
	// first page of results.
	Cursor string `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListReviewRequest) Reset()                    { *m = ListReviewRequest{} }
func (m *ListReviewRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReviewRequest) ProtoMessage()               {}
func (*ListReviewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListReviewRequest) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *ListReviewRequest) GetFrom() *google_protobuf2.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListReviewRequest) GetTo() *google_protobuf2.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ListReviewRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type ListReviewResponse struct {
	// A list of reviews matching the requested time interval
	Reviews []*Review `protobuf:"bytes,1,rep,name=reviews" json:"reviews,omitempty"`
	// Indicates that more reviews were avaialable, but not returned due
	// to the page size limit.
	More bool `protobuf:"varint,2,opt,name=more" json:"more,omitempty"`
	// A cursor that can be passed to subsequent GetReview requests to
	// page through the results.
	Cursor string `protobuf:"bytes,3,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListReviewResponse) Reset()                    { *m = ListReviewResponse{} }
func (m *ListReviewResponse) String() string            { return proto.CompactTextString(m) }
func (*ListReviewResponse) ProtoMessage()               {}
func (*ListReviewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListReviewResponse) GetReviews() []*Review {
	if m != nil {
		return m.Reviews
	}
	return nil
}

func (m *ListReviewResponse) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

func (m *ListReviewResponse) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type GetMultiReviewRequest struct {
	// The business the reviews are associated with
	BusinessId string `protobuf:"bytes,1,opt,name=business_id,json=businessId" json:"business_id,omitempty"`
	// A list of review IDs to retrieve
	ReviewId []string `protobuf:"bytes,3,rep,name=review_id,json=reviewId" json:"review_id,omitempty"`
}

func (m *GetMultiReviewRequest) Reset()                    { *m = GetMultiReviewRequest{} }
func (m *GetMultiReviewRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMultiReviewRequest) ProtoMessage()               {}
func (*GetMultiReviewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetMultiReviewRequest) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func (m *GetMultiReviewRequest) GetReviewId() []string {
	if m != nil {
		return m.ReviewId
	}
	return nil
}

type GetMultiReviewResponse struct {
	// A list of reviews matching the requested IDs, null if they can't be found
	Reviews []*Review `protobuf:"bytes,1,rep,name=reviews" json:"reviews,omitempty"`
}

func (m *GetMultiReviewResponse) Reset()                    { *m = GetMultiReviewResponse{} }
func (m *GetMultiReviewResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMultiReviewResponse) ProtoMessage()               {}
func (*GetMultiReviewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetMultiReviewResponse) GetReviews() []*Review {
	if m != nil {
		return m.Reviews
	}
	return nil
}

func init() {
	proto.RegisterType((*Contact)(nil), "review_gen.v1.Contact")
	proto.RegisterType((*CreateContactRequest)(nil), "review_gen.v1.CreateContactRequest")
	proto.RegisterType((*Review)(nil), "review_gen.v1.Review")
	proto.RegisterType((*ListReviewRequest)(nil), "review_gen.v1.ListReviewRequest")
	proto.RegisterType((*ListReviewResponse)(nil), "review_gen.v1.ListReviewResponse")
	proto.RegisterType((*GetMultiReviewRequest)(nil), "review_gen.v1.GetMultiReviewRequest")
	proto.RegisterType((*GetMultiReviewResponse)(nil), "review_gen.v1.GetMultiReviewResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CRM service

type CRMClient interface {
	// Adds a contact to the CRM and optionally requests a review from them
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type cRMClient struct {
	cc *grpc.ClientConn
}

func NewCRMClient(cc *grpc.ClientConn) CRMClient {
	return &cRMClient{cc}
}

func (c *cRMClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/review_gen.v1.CRM/CreateContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CRM service

type CRMServer interface {
	// Adds a contact to the CRM and optionally requests a review from them
	CreateContact(context.Context, *CreateContactRequest) (*google_protobuf1.Empty, error)
}

func RegisterCRMServer(s *grpc.Server, srv CRMServer) {
	s.RegisterService(&_CRM_serviceDesc, srv)
}

func _CRM_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review_gen.v1.CRM/CreateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CRM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review_gen.v1.CRM",
	HandlerType: (*CRMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _CRM_CreateContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review_gen.proto",
}

// Client API for Reviews service

type ReviewsClient interface {
	GetMulti(ctx context.Context, in *GetMultiReviewRequest, opts ...grpc.CallOption) (*GetMultiReviewResponse, error)
	List(ctx context.Context, in *ListReviewRequest, opts ...grpc.CallOption) (*ListReviewResponse, error)
}

type reviewsClient struct {
	cc *grpc.ClientConn
}

func NewReviewsClient(cc *grpc.ClientConn) ReviewsClient {
	return &reviewsClient{cc}
}

func (c *reviewsClient) GetMulti(ctx context.Context, in *GetMultiReviewRequest, opts ...grpc.CallOption) (*GetMultiReviewResponse, error) {
	out := new(GetMultiReviewResponse)
	err := grpc.Invoke(ctx, "/review_gen.v1.Reviews/GetMulti", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewsClient) List(ctx context.Context, in *ListReviewRequest, opts ...grpc.CallOption) (*ListReviewResponse, error) {
	out := new(ListReviewResponse)
	err := grpc.Invoke(ctx, "/review_gen.v1.Reviews/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reviews service

type ReviewsServer interface {
	GetMulti(context.Context, *GetMultiReviewRequest) (*GetMultiReviewResponse, error)
	List(context.Context, *ListReviewRequest) (*ListReviewResponse, error)
}

func RegisterReviewsServer(s *grpc.Server, srv ReviewsServer) {
	s.RegisterService(&_Reviews_serviceDesc, srv)
}

func _Reviews_GetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServer).GetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review_gen.v1.Reviews/GetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServer).GetMulti(ctx, req.(*GetMultiReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reviews_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review_gen.v1.Reviews/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewsServer).List(ctx, req.(*ListReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reviews_serviceDesc = grpc.ServiceDesc{
	ServiceName: "review_gen.v1.Reviews",
	HandlerType: (*ReviewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMulti",
			Handler:    _Reviews_GetMulti_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Reviews_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review_gen.proto",
}

func init() { proto.RegisterFile("review_gen.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0x93, 0x34, 0x3f, 0x37, 0x5f, 0xbf, 0x9f, 0xf9, 0xd2, 0xd4, 0xa4, 0x54, 0x0d, 0x2e,
	0x48, 0x55, 0x16, 0x31, 0x0d, 0x20, 0xa1, 0x2e, 0xa9, 0x2a, 0x14, 0x89, 0x74, 0xe1, 0xc0, 0x3a,
	0x9a, 0xd8, 0xd3, 0x74, 0x54, 0xdb, 0xe3, 0xce, 0x8c, 0x83, 0xba, 0x43, 0xbc, 0x02, 0x2f, 0xc1,
	0xc3, 0xb0, 0xe3, 0x15, 0x10, 0x1b, 0x5e, 0x02, 0xcd, 0x8f, 0x45, 0xe2, 0x54, 0xad, 0x60, 0xe7,
	0x7b, 0xcf, 0x99, 0xb9, 0xf7, 0x9e, 0x7b, 0x3c, 0xf0, 0x2f, 0x27, 0x4b, 0x4a, 0xde, 0xcf, 0x16,
	0x24, 0x1d, 0x66, 0x9c, 0x49, 0x86, 0xb6, 0x57, 0x32, 0xcb, 0xe3, 0xde, 0xc3, 0x05, 0x63, 0x8b,
	0x98, 0xf8, 0x38, 0xa3, 0x3e, 0x4e, 0x53, 0x26, 0xb1, 0xa4, 0x2c, 0x15, 0x86, 0xdc, 0xdb, 0xb3,
	0xa8, 0x8e, 0xe6, 0xf9, 0x85, 0x4f, 0x92, 0x4c, 0xde, 0x58, 0xf0, 0xa0, 0x0c, 0x4a, 0x9a, 0x10,
	0x21, 0x71, 0x92, 0x19, 0x82, 0xf7, 0xc1, 0x81, 0xc6, 0x29, 0x4b, 0x25, 0x0e, 0x25, 0xea, 0xc0,
	0x16, 0x49, 0x30, 0x8d, 0x5d, 0xa7, 0xef, 0x1c, 0xb5, 0x02, 0x13, 0xa0, 0x7d, 0x80, 0x0b, 0xca,
	0x85, 0x9c, 0xa5, 0x38, 0x21, 0x6e, 0x45, 0x43, 0x2d, 0x9d, 0x39, 0xc7, 0x09, 0x41, 0x7b, 0xd0,
	0x8a, 0x71, 0x81, 0x56, 0x35, 0xda, 0x54, 0x09, 0x0d, 0x1e, 0xc2, 0x76, 0xc2, 0xe6, 0x34, 0x26,
	0xb3, 0x34, 0x4f, 0xe6, 0x84, 0xbb, 0x35, 0x4d, 0xf8, 0xcb, 0x24, 0xcf, 0x75, 0xce, 0xfb, 0xe2,
	0x40, 0xe7, 0x94, 0x13, 0x2c, 0x89, 0x6d, 0x24, 0x20, 0xd7, 0x39, 0x11, 0x12, 0x3d, 0x85, 0x46,
	0x68, 0x32, 0xba, 0xa3, 0xf6, 0xa8, 0x3b, 0x5c, 0x13, 0x66, 0x58, 0xf0, 0x0b, 0x1a, 0x7a, 0x01,
	0xbb, 0xdc, 0x1c, 0x9e, 0x59, 0xe6, 0xfc, 0x66, 0x66, 0x66, 0x52, 0x8d, 0x37, 0x83, 0x8e, 0x85,
	0x03, 0x8d, 0xbe, 0xba, 0x39, 0xd3, 0x23, 0x1e, 0xc3, 0xce, 0xe6, 0xb1, 0xe9, 0x64, 0xaa, 0xe7,
	0x69, 0x06, 0xa8, 0x74, 0x68, 0x3a, 0x99, 0x22, 0x17, 0x1a, 0x38, 0x0c, 0x59, 0x9e, 0x4a, 0x3b,
	0x53, 0x11, 0x7a, 0x3f, 0x2a, 0x50, 0x37, 0x4c, 0xa5, 0x8d, 0xbd, 0x8f, 0x46, 0x56, 0xd4, 0xa6,
	0x49, 0x8c, 0x23, 0xa5, 0x6b, 0x4c, 0x85, 0xa4, 0xe9, 0x42, 0xa1, 0x56, 0x57, 0x9b, 0x19, 0x47,
	0xe8, 0x00, 0xda, 0xf3, 0x5c, 0xd0, 0x94, 0x08, 0xa1, 0x70, 0xa3, 0x2c, 0x14, 0xa9, 0x71, 0xa4,
	0x2e, 0x17, 0x2c, 0xe7, 0x21, 0x51, 0xb0, 0xe9, 0xa1, 0x69, 0x12, 0xe3, 0x48, 0xad, 0x52, 0x52,
	0x19, 0x13, 0x77, 0xcb, 0xac, 0x52, 0x07, 0xaa, 0xe4, 0x25, 0x16, 0x33, 0x8e, 0x55, 0x0d, 0xb7,
	0xae, 0x87, 0x6b, 0x5d, 0x62, 0x11, 0xe8, 0x84, 0x3a, 0x24, 0x24, 0xe6, 0xc2, 0x6d, 0xf4, 0x9d,
	0xa3, 0xad, 0xc0, 0x04, 0x6a, 0x52, 0x91, 0xd2, 0x2c, 0x23, 0xd2, 0x6d, 0x9a, 0x49, 0x6d, 0x88,
	0x10, 0xd4, 0x62, 0x9a, 0x5e, 0xb9, 0x2d, 0x9d, 0xd6, 0xdf, 0xe8, 0xa5, 0x1a, 0x59, 0x72, 0x4a,
	0x96, 0x24, 0x72, 0x41, 0x6f, 0xad, 0x37, 0x34, 0x26, 0x1c, 0x16, 0x26, 0x1c, 0xbe, 0x2d, 0x4c,
	0x18, 0xfc, 0x22, 0xa3, 0xe7, 0xd0, 0x08, 0xb5, 0x0b, 0x22, 0xb7, 0x7d, 0xef, 0xb9, 0x82, 0xea,
	0x7d, 0x76, 0xe0, 0xbf, 0x37, 0xb4, 0xd8, 0x4d, 0xe1, 0x9c, 0x92, 0x78, 0xce, 0x86, 0x78, 0x43,
	0xa8, 0x5d, 0x70, 0x96, 0x68, 0xd9, 0xef, 0xae, 0xa4, 0x79, 0x68, 0x00, 0x15, 0xc9, 0xf4, 0x12,
	0xee, 0x66, 0x57, 0x24, 0x43, 0x5d, 0xa8, 0x87, 0x39, 0x17, 0xac, 0x70, 0xbb, 0x8d, 0xbc, 0x6b,
	0x40, 0xab, 0x9d, 0x8a, 0x8c, 0xa5, 0x82, 0x20, 0x1f, 0x1a, 0xc6, 0x12, 0xc2, 0x75, 0xfa, 0xd5,
	0xa3, 0xf6, 0x68, 0xa7, 0x64, 0x72, 0xcb, 0x2f, 0x58, 0x4a, 0xf5, 0x84, 0x71, 0x62, 0x0d, 0xad,
	0xbf, 0x57, 0x4a, 0x56, 0xd7, 0x4a, 0xbe, 0x83, 0x9d, 0xd7, 0x44, 0x4e, 0xf2, 0x58, 0xd2, 0xdf,
	0x14, 0x68, 0xcd, 0xba, 0xd5, 0x7e, 0x75, 0xd5, 0xba, 0xde, 0x18, 0xba, 0xe5, 0x6b, 0xff, 0x70,
	0x9a, 0x11, 0x87, 0xea, 0x69, 0x30, 0x41, 0x57, 0xb0, 0xbd, 0xf6, 0x04, 0xa0, 0xc3, 0xf2, 0xaf,
	0x7e, 0xcb, 0x03, 0xd1, 0xeb, 0x6e, 0x6c, 0xe2, 0x4c, 0xbd, 0x7d, 0xde, 0xfe, 0xc7, 0xaf, 0xdf,
	0x3e, 0x55, 0x76, 0x3d, 0xe4, 0x2f, 0x8f, 0x7d, 0xfb, 0x36, 0xf8, 0xc6, 0x31, 0x27, 0xce, 0x60,
	0xf4, 0xdd, 0x81, 0x46, 0x60, 0xd5, 0xe4, 0xd0, 0x2c, 0x46, 0x41, 0x8f, 0x4b, 0x35, 0x6f, 0x95,
	0xae, 0xf7, 0xe4, 0x1e, 0x96, 0x51, 0xc2, 0x7b, 0xa0, 0x7b, 0xf8, 0xdf, 0xfb, 0x5b, 0xf5, 0x60,
	0x4e, 0xf8, 0x0b, 0x22, 0x4f, 0x9c, 0x01, 0x5a, 0x40, 0x4d, 0x19, 0x01, 0xf5, 0x4b, 0x37, 0x6d,
	0xf8, 0xb8, 0xf7, 0xe8, 0x0e, 0x86, 0xad, 0xd3, 0xd3, 0x75, 0x3a, 0xde, 0x3f, 0x2b, 0x75, 0xd4,
	0x2b, 0x72, 0xe2, 0x0c, 0xe6, 0x75, 0xad, 0xcb, 0xb3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe5,
	0x2d, 0xcc, 0xa3, 0x62, 0x06, 0x00, 0x00,
}
