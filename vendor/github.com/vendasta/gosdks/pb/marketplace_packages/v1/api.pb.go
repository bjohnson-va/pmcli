// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketplace_packages/v1/api.proto

package marketplace_packages_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request all packages matching provided values
type ListPackagesRequest struct {
	// The ID of the partner who we are getting packages for
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The ID of the market we are getting the package for
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// LMI Category that this package belongs to
	LmiCategory Lmi_Categories `protobuf:"varint,3,opt,name=lmi_category,json=lmiCategory,enum=marketplace_packages.v1.Lmi_Categories" json:"lmi_category,omitempty"`
	// List of the statuses of the products in the package
	Statuses []Statuses_Status `protobuf:"varint,4,rep,packed,name=statuses,enum=marketplace_packages.v1.Statuses_Status" json:"statuses,omitempty"`
	// Use partner configurated custom order
	Sort bool `protobuf:"varint,5,opt,name=sort" json:"sort,omitempty"`
	// Number of packages returned
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Page of results that we are on
	Cursor string `protobuf:"bytes,7,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListPackagesRequest) Reset()                    { *m = ListPackagesRequest{} }
func (m *ListPackagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPackagesRequest) ProtoMessage()               {}
func (*ListPackagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ListPackagesRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *ListPackagesRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ListPackagesRequest) GetLmiCategory() Lmi_Categories {
	if m != nil {
		return m.LmiCategory
	}
	return Lmi_NOT_SET
}

func (m *ListPackagesRequest) GetStatuses() []Statuses_Status {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *ListPackagesRequest) GetSort() bool {
	if m != nil {
		return m.Sort
	}
	return false
}

func (m *ListPackagesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPackagesRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type ListPackagesResponse struct {
	// List of the packages that are available
	Packages []*Package `protobuf:"bytes,1,rep,name=packages" json:"packages,omitempty"`
	// Page of results that we are on
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Are there more pages?
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *ListPackagesResponse) Reset()                    { *m = ListPackagesResponse{} }
func (m *ListPackagesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPackagesResponse) ProtoMessage()               {}
func (*ListPackagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ListPackagesResponse) GetPackages() []*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *ListPackagesResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListPackagesResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// Filters for the list products end point.
type ListProductFilter struct {
	// only return approved Products, used to filter out products that have lost approval
	Approved bool `protobuf:"varint,1,opt,name=approved" json:"approved,omitempty"`
}

func (m *ListProductFilter) Reset()                    { *m = ListProductFilter{} }
func (m *ListProductFilter) String() string            { return proto.CompactTextString(m) }
func (*ListProductFilter) ProtoMessage()               {}
func (*ListProductFilter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ListProductFilter) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

// Request all products for partner id
type ListProductsRequest struct {
	// The ID of the partner
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// Number of products returned
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Page of results that we are on
	Cursor string `protobuf:"bytes,3,opt,name=cursor" json:"cursor,omitempty"`
	// Market ID for whitelabeling
	MarketId string `protobuf:"bytes,4,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// filters
	Filters *ListProductFilter `protobuf:"bytes,5,opt,name=filters" json:"filters,omitempty"`
}

func (m *ListProductsRequest) Reset()                    { *m = ListProductsRequest{} }
func (m *ListProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListProductsRequest) ProtoMessage()               {}
func (*ListProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ListProductsRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *ListProductsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListProductsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListProductsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ListProductsRequest) GetFilters() *ListProductFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ListProductsResponse struct {
	// The Products for a partner
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
	// Page of results that we are on
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Is there more pages?
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *ListProductsResponse) Reset()                    { *m = ListProductsResponse{} }
func (m *ListProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListProductsResponse) ProtoMessage()               {}
func (*ListProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ListProductsResponse) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *ListProductsResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListProductsResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// Request all products for partner id
type ListAddonsRequest struct {
	// The ID of the partner
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The IDs of the Apps
	AppIds []string `protobuf:"bytes,2,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
	// Number of addons returned
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Page of results that we are on
	Cursor string `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListAddonsRequest) Reset()                    { *m = ListAddonsRequest{} }
func (m *ListAddonsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAddonsRequest) ProtoMessage()               {}
func (*ListAddonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListAddonsRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *ListAddonsRequest) GetAppIds() []string {
	if m != nil {
		return m.AppIds
	}
	return nil
}

func (m *ListAddonsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListAddonsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type ListAddonsResponse struct {
	// The Addons for a partner
	Addons []*Addon `protobuf:"bytes,1,rep,name=addons" json:"addons,omitempty"`
	// Page of results that we are on
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Is there more pages?
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *ListAddonsResponse) Reset()                    { *m = ListAddonsResponse{} }
func (m *ListAddonsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAddonsResponse) ProtoMessage()               {}
func (*ListAddonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ListAddonsResponse) GetAddons() []*Addon {
	if m != nil {
		return m.Addons
	}
	return nil
}

func (m *ListAddonsResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListAddonsResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type GetMultiProductsRequest struct {
	// The ID of the partner
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The IDs of the products to get
	ProductIds []string `protobuf:"bytes,2,rep,name=product_ids,json=productIds" json:"product_ids,omitempty"`
	// The MarketID to apply white labeling for, if non is provided we will white label at a partner level
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *GetMultiProductsRequest) Reset()                    { *m = GetMultiProductsRequest{} }
func (m *GetMultiProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMultiProductsRequest) ProtoMessage()               {}
func (*GetMultiProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GetMultiProductsRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *GetMultiProductsRequest) GetProductIds() []string {
	if m != nil {
		return m.ProductIds
	}
	return nil
}

func (m *GetMultiProductsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type GetMultiProductsResponse struct {
	// The list of requested Products
	Products []*GetMultiProductsResponse_ProductContainer `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *GetMultiProductsResponse) Reset()                    { *m = GetMultiProductsResponse{} }
func (m *GetMultiProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMultiProductsResponse) ProtoMessage()               {}
func (*GetMultiProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GetMultiProductsResponse) GetProducts() []*GetMultiProductsResponse_ProductContainer {
	if m != nil {
		return m.Products
	}
	return nil
}

type GetMultiProductsResponse_ProductContainer struct {
	Product *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
}

func (m *GetMultiProductsResponse_ProductContainer) Reset() {
	*m = GetMultiProductsResponse_ProductContainer{}
}
func (m *GetMultiProductsResponse_ProductContainer) String() string { return proto.CompactTextString(m) }
func (*GetMultiProductsResponse_ProductContainer) ProtoMessage()    {}
func (*GetMultiProductsResponse_ProductContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{8, 0}
}

func (m *GetMultiProductsResponse_ProductContainer) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type ListAppIDsRequest struct {
	// The id of the partner
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
}

func (m *ListAppIDsRequest) Reset()                    { *m = ListAppIDsRequest{} }
func (m *ListAppIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAppIDsRequest) ProtoMessage()               {}
func (*ListAppIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ListAppIDsRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

type ListAppIDsResponse struct {
	// the list of AppIDs that are visible to a partner
	AppIds []string `protobuf:"bytes,1,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
}

func (m *ListAppIDsResponse) Reset()                    { *m = ListAppIDsResponse{} }
func (m *ListAppIDsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAppIDsResponse) ProtoMessage()               {}
func (*ListAppIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ListAppIDsResponse) GetAppIds() []string {
	if m != nil {
		return m.AppIds
	}
	return nil
}

type GetMultiAddonsRequest struct {
	// list of addon key which contains a appId and addonId
	AddonKeys []*AddonKey `protobuf:"bytes,1,rep,name=addon_keys,json=addonKeys" json:"addon_keys,omitempty"`
}

func (m *GetMultiAddonsRequest) Reset()                    { *m = GetMultiAddonsRequest{} }
func (m *GetMultiAddonsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMultiAddonsRequest) ProtoMessage()               {}
func (*GetMultiAddonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GetMultiAddonsRequest) GetAddonKeys() []*AddonKey {
	if m != nil {
		return m.AddonKeys
	}
	return nil
}

type GetMultiAddonsResponse struct {
	// list of addons for above data
	Addons []*Addon `protobuf:"bytes,1,rep,name=addons" json:"addons,omitempty"`
}

func (m *GetMultiAddonsResponse) Reset()                    { *m = GetMultiAddonsResponse{} }
func (m *GetMultiAddonsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMultiAddonsResponse) ProtoMessage()               {}
func (*GetMultiAddonsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *GetMultiAddonsResponse) GetAddons() []*Addon {
	if m != nil {
		return m.Addons
	}
	return nil
}

type GetMultiPackageRequest struct {
	// Package ID to lookup by
	PackageIds []string `protobuf:"bytes,1,rep,name=package_ids,json=packageIds" json:"package_ids,omitempty"`
}

func (m *GetMultiPackageRequest) Reset()                    { *m = GetMultiPackageRequest{} }
func (m *GetMultiPackageRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMultiPackageRequest) ProtoMessage()               {}
func (*GetMultiPackageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GetMultiPackageRequest) GetPackageIds() []string {
	if m != nil {
		return m.PackageIds
	}
	return nil
}

type GetMultiPackageResponse struct {
	// Packages found in lookup
	PackageContainers []*GetMultiPackageResponse_PackageContainer `protobuf:"bytes,1,rep,name=package_containers,json=packageContainers" json:"package_containers,omitempty"`
}

func (m *GetMultiPackageResponse) Reset()                    { *m = GetMultiPackageResponse{} }
func (m *GetMultiPackageResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMultiPackageResponse) ProtoMessage()               {}
func (*GetMultiPackageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *GetMultiPackageResponse) GetPackageContainers() []*GetMultiPackageResponse_PackageContainer {
	if m != nil {
		return m.PackageContainers
	}
	return nil
}

type GetMultiPackageResponse_PackageContainer struct {
	Package *Package `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
}

func (m *GetMultiPackageResponse_PackageContainer) Reset() {
	*m = GetMultiPackageResponse_PackageContainer{}
}
func (m *GetMultiPackageResponse_PackageContainer) String() string { return proto.CompactTextString(m) }
func (*GetMultiPackageResponse_PackageContainer) ProtoMessage()    {}
func (*GetMultiPackageResponse_PackageContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{14, 0}
}

func (m *GetMultiPackageResponse_PackageContainer) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func init() {
	proto.RegisterType((*ListPackagesRequest)(nil), "marketplace_packages.v1.ListPackagesRequest")
	proto.RegisterType((*ListPackagesResponse)(nil), "marketplace_packages.v1.ListPackagesResponse")
	proto.RegisterType((*ListProductFilter)(nil), "marketplace_packages.v1.ListProductFilter")
	proto.RegisterType((*ListProductsRequest)(nil), "marketplace_packages.v1.ListProductsRequest")
	proto.RegisterType((*ListProductsResponse)(nil), "marketplace_packages.v1.ListProductsResponse")
	proto.RegisterType((*ListAddonsRequest)(nil), "marketplace_packages.v1.ListAddonsRequest")
	proto.RegisterType((*ListAddonsResponse)(nil), "marketplace_packages.v1.ListAddonsResponse")
	proto.RegisterType((*GetMultiProductsRequest)(nil), "marketplace_packages.v1.GetMultiProductsRequest")
	proto.RegisterType((*GetMultiProductsResponse)(nil), "marketplace_packages.v1.GetMultiProductsResponse")
	proto.RegisterType((*GetMultiProductsResponse_ProductContainer)(nil), "marketplace_packages.v1.GetMultiProductsResponse.ProductContainer")
	proto.RegisterType((*ListAppIDsRequest)(nil), "marketplace_packages.v1.ListAppIDsRequest")
	proto.RegisterType((*ListAppIDsResponse)(nil), "marketplace_packages.v1.ListAppIDsResponse")
	proto.RegisterType((*GetMultiAddonsRequest)(nil), "marketplace_packages.v1.GetMultiAddonsRequest")
	proto.RegisterType((*GetMultiAddonsResponse)(nil), "marketplace_packages.v1.GetMultiAddonsResponse")
	proto.RegisterType((*GetMultiPackageRequest)(nil), "marketplace_packages.v1.GetMultiPackageRequest")
	proto.RegisterType((*GetMultiPackageResponse)(nil), "marketplace_packages.v1.GetMultiPackageResponse")
	proto.RegisterType((*GetMultiPackageResponse_PackageContainer)(nil), "marketplace_packages.v1.GetMultiPackageResponse.PackageContainer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MarketplacePackages service

type MarketplacePackagesClient interface {
	// List products for a partner
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	// Get products for a partner by ID
	GetMultiProducts(ctx context.Context, in *GetMultiProductsRequest, opts ...grpc.CallOption) (*GetMultiProductsResponse, error)
	// List packages for a partner market
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error)
	// List of products that are visible to a partner
	ListAppIDs(ctx context.Context, in *ListAppIDsRequest, opts ...grpc.CallOption) (*ListAppIDsResponse, error)
	// Get multiple addons by key
	GetMultiAddons(ctx context.Context, in *GetMultiAddonsRequest, opts ...grpc.CallOption) (*GetMultiAddonsResponse, error)
	// List addons for a partner
	ListAddons(ctx context.Context, in *ListAddonsRequest, opts ...grpc.CallOption) (*ListAddonsResponse, error)
	// Get Package by package/solution ID
	GetMultiPackages(ctx context.Context, in *GetMultiPackageRequest, opts ...grpc.CallOption) (*GetMultiPackageResponse, error)
}

type marketplacePackagesClient struct {
	cc *grpc.ClientConn
}

func NewMarketplacePackagesClient(cc *grpc.ClientConn) MarketplacePackagesClient {
	return &marketplacePackagesClient{cc}
}

func (c *marketplacePackagesClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := grpc.Invoke(ctx, "/marketplace_packages.v1.MarketplacePackages/ListProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplacePackagesClient) GetMultiProducts(ctx context.Context, in *GetMultiProductsRequest, opts ...grpc.CallOption) (*GetMultiProductsResponse, error) {
	out := new(GetMultiProductsResponse)
	err := grpc.Invoke(ctx, "/marketplace_packages.v1.MarketplacePackages/GetMultiProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplacePackagesClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error) {
	out := new(ListPackagesResponse)
	err := grpc.Invoke(ctx, "/marketplace_packages.v1.MarketplacePackages/ListPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplacePackagesClient) ListAppIDs(ctx context.Context, in *ListAppIDsRequest, opts ...grpc.CallOption) (*ListAppIDsResponse, error) {
	out := new(ListAppIDsResponse)
	err := grpc.Invoke(ctx, "/marketplace_packages.v1.MarketplacePackages/ListAppIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplacePackagesClient) GetMultiAddons(ctx context.Context, in *GetMultiAddonsRequest, opts ...grpc.CallOption) (*GetMultiAddonsResponse, error) {
	out := new(GetMultiAddonsResponse)
	err := grpc.Invoke(ctx, "/marketplace_packages.v1.MarketplacePackages/GetMultiAddons", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplacePackagesClient) ListAddons(ctx context.Context, in *ListAddonsRequest, opts ...grpc.CallOption) (*ListAddonsResponse, error) {
	out := new(ListAddonsResponse)
	err := grpc.Invoke(ctx, "/marketplace_packages.v1.MarketplacePackages/ListAddons", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplacePackagesClient) GetMultiPackages(ctx context.Context, in *GetMultiPackageRequest, opts ...grpc.CallOption) (*GetMultiPackageResponse, error) {
	out := new(GetMultiPackageResponse)
	err := grpc.Invoke(ctx, "/marketplace_packages.v1.MarketplacePackages/GetMultiPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MarketplacePackages service

type MarketplacePackagesServer interface {
	// List products for a partner
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	// Get products for a partner by ID
	GetMultiProducts(context.Context, *GetMultiProductsRequest) (*GetMultiProductsResponse, error)
	// List packages for a partner market
	ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	// List of products that are visible to a partner
	ListAppIDs(context.Context, *ListAppIDsRequest) (*ListAppIDsResponse, error)
	// Get multiple addons by key
	GetMultiAddons(context.Context, *GetMultiAddonsRequest) (*GetMultiAddonsResponse, error)
	// List addons for a partner
	ListAddons(context.Context, *ListAddonsRequest) (*ListAddonsResponse, error)
	// Get Package by package/solution ID
	GetMultiPackages(context.Context, *GetMultiPackageRequest) (*GetMultiPackageResponse, error)
}

func RegisterMarketplacePackagesServer(s *grpc.Server, srv MarketplacePackagesServer) {
	s.RegisterService(&_MarketplacePackages_serviceDesc, srv)
}

func _MarketplacePackages_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplacePackagesServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_packages.v1.MarketplacePackages/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplacePackagesServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplacePackages_GetMultiProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplacePackagesServer).GetMultiProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_packages.v1.MarketplacePackages/GetMultiProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplacePackagesServer).GetMultiProducts(ctx, req.(*GetMultiProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplacePackages_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplacePackagesServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_packages.v1.MarketplacePackages/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplacePackagesServer).ListPackages(ctx, req.(*ListPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplacePackages_ListAppIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplacePackagesServer).ListAppIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_packages.v1.MarketplacePackages/ListAppIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplacePackagesServer).ListAppIDs(ctx, req.(*ListAppIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplacePackages_GetMultiAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplacePackagesServer).GetMultiAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_packages.v1.MarketplacePackages/GetMultiAddons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplacePackagesServer).GetMultiAddons(ctx, req.(*GetMultiAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplacePackages_ListAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplacePackagesServer).ListAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_packages.v1.MarketplacePackages/ListAddons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplacePackagesServer).ListAddons(ctx, req.(*ListAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplacePackages_GetMultiPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplacePackagesServer).GetMultiPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace_packages.v1.MarketplacePackages/GetMultiPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplacePackagesServer).GetMultiPackages(ctx, req.(*GetMultiPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketplacePackages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketplace_packages.v1.MarketplacePackages",
	HandlerType: (*MarketplacePackagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _MarketplacePackages_ListProducts_Handler,
		},
		{
			MethodName: "GetMultiProducts",
			Handler:    _MarketplacePackages_GetMultiProducts_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _MarketplacePackages_ListPackages_Handler,
		},
		{
			MethodName: "ListAppIDs",
			Handler:    _MarketplacePackages_ListAppIDs_Handler,
		},
		{
			MethodName: "GetMultiAddons",
			Handler:    _MarketplacePackages_GetMultiAddons_Handler,
		},
		{
			MethodName: "ListAddons",
			Handler:    _MarketplacePackages_ListAddons_Handler,
		},
		{
			MethodName: "GetMultiPackages",
			Handler:    _MarketplacePackages_GetMultiPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace_packages/v1/api.proto",
}

func init() { proto.RegisterFile("marketplace_packages/v1/api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 840 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0x5f, 0x6f, 0xd3, 0x48,
	0x10, 0x8f, 0x93, 0x34, 0x71, 0x26, 0x55, 0xd5, 0x6e, 0xef, 0x5a, 0x5f, 0x4e, 0x77, 0x75, 0x7d,
	0x3a, 0x5d, 0x74, 0xbd, 0x26, 0x6d, 0x4e, 0x42, 0x02, 0xf1, 0x40, 0x69, 0x05, 0x0a, 0xb4, 0xa8,
	0x72, 0x9f, 0x78, 0xc1, 0x5a, 0xe2, 0x25, 0xb5, 0x9a, 0xc4, 0x8b, 0xd7, 0x09, 0xa4, 0x4f, 0x3c,
	0xf2, 0xc8, 0x07, 0x41, 0x7c, 0x10, 0xc4, 0x37, 0xe0, 0xcb, 0x20, 0x7b, 0x77, 0xfd, 0xaf, 0xb8,
	0x71, 0xd4, 0xb7, 0xf5, 0xec, 0xcc, 0xce, 0xfc, 0x7e, 0xf3, 0x9b, 0x5d, 0xc3, 0xee, 0x18, 0x7b,
	0x57, 0xc4, 0xa7, 0x23, 0x3c, 0x20, 0x16, 0xc5, 0x83, 0x2b, 0x3c, 0x24, 0xac, 0x3b, 0x3b, 0xec,
	0x62, 0xea, 0x74, 0xa8, 0xe7, 0xfa, 0x2e, 0xda, 0xfe, 0x99, 0x4b, 0x67, 0x76, 0xd8, 0xfa, 0x3b,
	0x2f, 0x56, 0xac, 0x79, 0xfc, 0x2d, 0x6e, 0x9e, 0x6b, 0x4f, 0x07, 0xbe, 0x70, 0xfb, 0x2b, 0xb7,
	0x12, 0xdb, 0x76, 0x27, 0xdc, 0xc9, 0xf8, 0x5c, 0x86, 0xcd, 0x53, 0x87, 0xf9, 0xe7, 0x62, 0xdf,
	0x24, 0x6f, 0xa7, 0x84, 0xf9, 0xe8, 0x0f, 0x00, 0x8a, 0x3d, 0x7f, 0x42, 0x3c, 0xcb, 0xb1, 0x35,
	0x45, 0x57, 0xda, 0x0d, 0xb3, 0x21, 0x2c, 0x7d, 0x1b, 0xfd, 0x0e, 0x0d, 0x7e, 0x7a, 0xb0, 0x5b,
	0x0e, 0x77, 0x55, 0x6e, 0xe8, 0xdb, 0xe8, 0x19, 0xac, 0x8e, 0xc6, 0x8e, 0x35, 0xc0, 0x3e, 0x19,
	0xba, 0xde, 0x5c, 0xab, 0xe8, 0x4a, 0x7b, 0xad, 0xf7, 0x4f, 0x27, 0x07, 0x76, 0xe7, 0x74, 0xec,
	0x74, 0x8e, 0xb9, 0xb3, 0x43, 0x98, 0xd9, 0x1c, 0x8d, 0x1d, 0xf1, 0x39, 0x47, 0x27, 0xa0, 0x32,
	0x1f, 0xfb, 0x53, 0x46, 0x98, 0x56, 0xd5, 0x2b, 0xed, 0xb5, 0x5e, 0x3b, 0xf7, 0x9c, 0x0b, 0xe1,
	0x28, 0x16, 0x66, 0x14, 0x89, 0x10, 0x54, 0x99, 0xeb, 0xf9, 0xda, 0x8a, 0xae, 0xb4, 0x55, 0x33,
	0x5c, 0x07, 0x10, 0x28, 0x1e, 0x12, 0x8b, 0x39, 0xd7, 0x44, 0xab, 0xe9, 0x4a, 0x7b, 0xc5, 0x54,
	0x03, 0xc3, 0x85, 0x73, 0x4d, 0xd0, 0x16, 0xd4, 0x06, 0x53, 0x8f, 0xb9, 0x9e, 0x56, 0x0f, 0xc1,
	0x89, 0x2f, 0xe3, 0x93, 0x02, 0xbf, 0xa4, 0xe9, 0x62, 0xd4, 0x9d, 0x30, 0x82, 0x1e, 0x82, 0x2a,
	0x4b, 0xd1, 0x14, 0xbd, 0xd2, 0x6e, 0xf6, 0xf4, 0xdc, 0x3a, 0x45, 0xb0, 0x19, 0x45, 0xa0, 0x1d,
	0x68, 0x4e, 0xc8, 0x7b, 0xdf, 0x12, 0x39, 0x39, 0xa1, 0x10, 0x98, 0x8e, 0x43, 0x0b, 0xfa, 0x0d,
	0xd4, 0x4b, 0xcc, 0xac, 0xb1, 0xeb, 0x91, 0x90, 0x4e, 0xd5, 0xac, 0x5f, 0x62, 0x76, 0xe6, 0x7a,
	0xc4, 0xe8, 0xc2, 0x46, 0x58, 0x11, 0xef, 0xfd, 0x13, 0x67, 0xe4, 0x13, 0x0f, 0xb5, 0x40, 0xc5,
	0x94, 0x7a, 0xee, 0x8c, 0xf0, 0xe6, 0xa9, 0x66, 0xf4, 0x6d, 0x7c, 0x53, 0x44, 0xcb, 0x79, 0xc4,
	0x12, 0x2d, 0x8f, 0xf9, 0x2a, 0xe7, 0xf2, 0x55, 0x49, 0xf2, 0x95, 0xd6, 0x49, 0x35, 0xa3, 0x93,
	0x13, 0xa8, 0xbf, 0x09, 0xcb, 0x65, 0x61, 0x63, 0x9a, 0xbd, 0x7f, 0xf3, 0x25, 0x92, 0x45, 0x68,
	0xca, 0xd0, 0xb8, 0x25, 0x11, 0x9c, 0x44, 0x4b, 0x84, 0x6d, 0x71, 0x4b, 0xb8, 0xa3, 0x19, 0x45,
	0xdc, 0xa9, 0x25, 0x1f, 0x14, 0xde, 0x93, 0xa3, 0x60, 0xd0, 0x8a, 0xf2, 0xbb, 0x0d, 0x75, 0x4c,
	0xa9, 0xe5, 0xd8, 0x4c, 0x2b, 0xeb, 0x95, 0x80, 0x43, 0x4c, 0x69, 0xdf, 0x66, 0x69, 0xe2, 0x2b,
	0xb9, 0xc4, 0x57, 0x53, 0x42, 0xfd, 0xa8, 0x00, 0x4a, 0x96, 0x20, 0x38, 0xb9, 0x07, 0xb5, 0x70,
	0xfa, 0x25, 0x23, 0x7f, 0xe6, 0x32, 0x12, 0x06, 0x9a, 0xc2, 0xfb, 0x4e, 0x6c, 0xcc, 0x60, 0xfb,
	0x29, 0xf1, 0xcf, 0xa6, 0x23, 0xdf, 0x59, 0x52, 0x72, 0x3b, 0xd0, 0x14, 0xfd, 0x48, 0xd0, 0x02,
	0xc2, 0x24, 0xa8, 0x89, 0xe5, 0x55, 0x49, 0xcb, 0xcb, 0xf8, 0xaa, 0x80, 0x76, 0x33, 0xb1, 0x20,
	0xe2, 0xd5, 0x0d, 0x71, 0x3c, 0xce, 0xa5, 0x22, 0xef, 0x10, 0xa9, 0x9a, 0x63, 0x77, 0xe2, 0x63,
	0x67, 0x42, 0xbc, 0x58, 0x3e, 0xad, 0x17, 0xb0, 0x9e, 0xdd, 0x45, 0x0f, 0xa0, 0x2e, 0xf6, 0x43,
	0xa8, 0x45, 0xf4, 0x28, 0x03, 0x8c, 0x9e, 0x50, 0x14, 0xa5, 0xfd, 0x93, 0x82, 0xf4, 0x19, 0xfb,
	0x42, 0x02, 0x22, 0x46, 0x20, 0x4f, 0xe8, 0x4c, 0x49, 0xea, 0xcc, 0x78, 0x09, 0xbf, 0x4a, 0xa4,
	0x69, 0xe1, 0x3e, 0x02, 0x08, 0x65, 0x60, 0x5d, 0x91, 0xb9, 0x64, 0x6b, 0xf7, 0x76, 0xe1, 0x3c,
	0x27, 0x73, 0xb3, 0x81, 0xc5, 0x8a, 0x19, 0xe7, 0xb0, 0x95, 0x3d, 0xfa, 0x6e, 0x82, 0x34, 0xee,
	0xc7, 0x27, 0xca, 0xeb, 0x54, 0x54, 0x1b, 0x88, 0x86, 0x5b, 0x12, 0x18, 0x41, 0x98, 0x02, 0x9c,
	0xdf, 0x95, 0x84, 0x20, 0x65, 0xac, 0x28, 0x87, 0x02, 0x92, 0xc1, 0x03, 0xd9, 0x37, 0x59, 0xda,
	0xd1, 0x62, 0x81, 0xa4, 0x4f, 0x93, 0x17, 0x7d, 0xac, 0x8f, 0x0d, 0x9a, 0xb1, 0x70, 0xa1, 0x64,
	0x8c, 0xa1, 0x50, 0xb8, 0x6d, 0xb1, 0x50, 0x44, 0x4a, 0x19, 0xd0, 0xfb, 0x52, 0x83, 0xcd, 0xb3,
	0xd8, 0x59, 0x3e, 0x54, 0x68, 0x0c, 0xab, 0xc9, 0x5b, 0x12, 0xfd, 0x57, 0xe4, 0xae, 0x95, 0x12,
	0x68, 0xed, 0x17, 0xf4, 0xe6, 0xc0, 0x8d, 0x12, 0x9a, 0xc3, 0x7a, 0x76, 0x6c, 0xd0, 0xc1, 0x12,
	0x13, 0xc6, 0xd3, 0x1e, 0x2e, 0x3d, 0x93, 0x46, 0x29, 0x42, 0x2a, 0x91, 0x2f, 0x40, 0x9a, 0xfe,
	0xf1, 0x59, 0x84, 0x34, 0xf3, 0xee, 0x1b, 0x25, 0x34, 0x04, 0x88, 0xa7, 0x0c, 0xdd, 0xfe, 0x84,
	0xa5, 0xc6, 0xb7, 0xb5, 0x57, 0xc8, 0x37, 0x4a, 0xc4, 0x60, 0x2d, 0x3d, 0x44, 0xa8, 0xb3, 0x90,
	0x9e, 0xd4, 0x20, 0xb7, 0xba, 0x85, 0xfd, 0x6f, 0xa0, 0xe3, 0x09, 0x17, 0xa0, 0x4b, 0x25, 0xdb,
	0x2b, 0xe4, 0x1b, 0x25, 0x7a, 0x97, 0x10, 0x8c, 0xec, 0x5c, 0xb7, 0xf8, 0xc4, 0xf1, 0x9c, 0x07,
	0xcb, 0x8e, 0xa8, 0x51, 0x7a, 0x5d, 0x0b, 0x7f, 0x84, 0xff, 0xff, 0x11, 0x00, 0x00, 0xff, 0xff,
	0x9e, 0x06, 0xb5, 0x9c, 0xb9, 0x0b, 0x00, 0x00,
}
