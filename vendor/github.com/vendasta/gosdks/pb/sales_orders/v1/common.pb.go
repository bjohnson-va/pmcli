// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sales_orders/v1/common.proto

package salesorders_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The different world currencies that a package could pertain to
type Currency int32

const (
	Currency_USD Currency = 0
	Currency_CAD Currency = 1
	Currency_EUR Currency = 2
	Currency_AUD Currency = 3
	Currency_GBP Currency = 4
	Currency_NZD Currency = 5
)

var Currency_name = map[int32]string{
	0: "USD",
	1: "CAD",
	2: "EUR",
	3: "AUD",
	4: "GBP",
	5: "NZD",
}
var Currency_value = map[string]int32{
	"USD": 0,
	"CAD": 1,
	"EUR": 2,
	"AUD": 3,
	"GBP": 4,
	"NZD": 5,
}

func (x Currency) String() string {
	return proto.EnumName(Currency_name, int32(x))
}
func (Currency) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// The different periods at which a client can be charged
type RevenuePeriod int32

const (
	RevenuePeriod_ONETIME  RevenuePeriod = 0
	RevenuePeriod_DAILY    RevenuePeriod = 1
	RevenuePeriod_WEEKLY   RevenuePeriod = 2
	RevenuePeriod_BIWEEKLY RevenuePeriod = 3
	RevenuePeriod_MONTHLY  RevenuePeriod = 4
	RevenuePeriod_YEARLY   RevenuePeriod = 5
)

var RevenuePeriod_name = map[int32]string{
	0: "ONETIME",
	1: "DAILY",
	2: "WEEKLY",
	3: "BIWEEKLY",
	4: "MONTHLY",
	5: "YEARLY",
}
var RevenuePeriod_value = map[string]int32{
	"ONETIME":  0,
	"DAILY":    1,
	"WEEKLY":   2,
	"BIWEEKLY": 3,
	"MONTHLY":  4,
	"YEARLY":   5,
}

func (x RevenuePeriod) String() string {
	return proto.EnumName(RevenuePeriod_name, int32(x))
}
func (RevenuePeriod) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type RevenueComponent struct {
	// The value in the smallest common currency unit i.e. cents. Therefore 4000 would represent $40.00
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	// The frequency this revenue occurs
	Period RevenuePeriod `protobuf:"varint,2,opt,name=period,enum=salesorders.v1.RevenuePeriod" json:"period,omitempty"`
}

func (m *RevenueComponent) Reset()                    { *m = RevenueComponent{} }
func (m *RevenueComponent) String() string            { return proto.CompactTextString(m) }
func (*RevenueComponent) ProtoMessage()               {}
func (*RevenueComponent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RevenueComponent) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RevenueComponent) GetPeriod() RevenuePeriod {
	if m != nil {
		return m.Period
	}
	return RevenuePeriod_ONETIME
}

type Revenue struct {
	RevenueComponents []*RevenueComponent `protobuf:"bytes,1,rep,name=revenue_components,json=revenueComponents" json:"revenue_components,omitempty"`
}

func (m *Revenue) Reset()                    { *m = Revenue{} }
func (m *Revenue) String() string            { return proto.CompactTextString(m) }
func (*Revenue) ProtoMessage()               {}
func (*Revenue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Revenue) GetRevenueComponents() []*RevenueComponent {
	if m != nil {
		return m.RevenueComponents
	}
	return nil
}

func init() {
	proto.RegisterType((*RevenueComponent)(nil), "salesorders.v1.RevenueComponent")
	proto.RegisterType((*Revenue)(nil), "salesorders.v1.Revenue")
	proto.RegisterEnum("salesorders.v1.Currency", Currency_name, Currency_value)
	proto.RegisterEnum("salesorders.v1.RevenuePeriod", RevenuePeriod_name, RevenuePeriod_value)
}

func init() { proto.RegisterFile("sales_orders/v1/common.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x6b, 0xf2, 0x40,
	0x18, 0xc4, 0x5d, 0x63, 0xd4, 0xf7, 0xf1, 0xad, 0x3c, 0x5d, 0x7a, 0xf0, 0xd0, 0x42, 0xf0, 0x24,
	0x1e, 0x22, 0x5a, 0x7a, 0x6f, 0x34, 0x4b, 0x2b, 0x8d, 0x7f, 0xd8, 0x2a, 0x25, 0xb9, 0x04, 0x1b,
	0xf7, 0x50, 0x30, 0xd9, 0xb0, 0x31, 0x81, 0x7e, 0xfb, 0xb2, 0x49, 0x5a, 0xb0, 0xd0, 0xdb, 0x6f,
	0x76, 0x66, 0x67, 0x87, 0x85, 0xdb, 0xec, 0x70, 0x12, 0x59, 0x28, 0xd5, 0x51, 0xa8, 0x6c, 0x52,
	0x4c, 0x27, 0x91, 0x8c, 0x63, 0x99, 0xd8, 0xa9, 0x92, 0x67, 0x49, 0xfb, 0xa5, 0x5b, 0x99, 0x76,
	0x31, 0x1d, 0x86, 0x80, 0x5c, 0x14, 0x22, 0xc9, 0xc5, 0x42, 0xc6, 0xa9, 0x4c, 0x44, 0x72, 0xa6,
	0x37, 0x60, 0x16, 0x87, 0x53, 0x2e, 0x06, 0xc4, 0x22, 0x23, 0x83, 0x57, 0x82, 0x3e, 0x40, 0x3b,
	0x15, 0xea, 0x43, 0x1e, 0x07, 0x4d, 0x8b, 0x8c, 0xfa, 0xb3, 0x3b, 0xfb, 0xb2, 0xca, 0xae, 0x7b,
	0xb6, 0x65, 0x88, 0xd7, 0xe1, 0x61, 0x00, 0x9d, 0xda, 0xa0, 0x1b, 0xa0, 0xaa, 0xc2, 0x30, 0xfa,
	0x7e, 0x2c, 0x1b, 0x10, 0xcb, 0x18, 0xf5, 0x66, 0xd6, 0x1f, 0x6d, 0x3f, 0xab, 0xf8, 0xb5, 0xfa,
	0x75, 0x92, 0x8d, 0x1f, 0xa1, 0xbb, 0xc8, 0x95, 0x12, 0x49, 0xf4, 0x49, 0x3b, 0x60, 0xec, 0x5f,
	0x5d, 0x6c, 0x68, 0x58, 0x38, 0x2e, 0x12, 0x0d, 0x6c, 0xcf, 0xb1, 0xa9, 0xc1, 0xd9, 0xbb, 0x68,
	0x68, 0x78, 0x9a, 0x6f, 0xb1, 0xa5, 0x61, 0x1d, 0xb8, 0x68, 0x8e, 0x03, 0xb8, 0xba, 0x98, 0x4d,
	0x7b, 0xd0, 0xd9, 0xac, 0xd9, 0x6e, 0xb9, 0x62, 0xd8, 0xa0, 0xff, 0xc0, 0x74, 0x9d, 0xa5, 0xe7,
	0x23, 0xa1, 0x00, 0xed, 0x37, 0xc6, 0x5e, 0x3c, 0x1f, 0x9b, 0xf4, 0x3f, 0x74, 0xe7, 0xcb, 0x5a,
	0x19, 0xfa, 0xc6, 0x6a, 0xb3, 0xde, 0x3d, 0x7b, 0x3e, 0xb6, 0x74, 0xcc, 0x67, 0x0e, 0xf7, 0x7c,
	0x34, 0xdf, 0xdb, 0xe5, 0x8f, 0xdf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xb4, 0x67, 0x0f,
	0x91, 0x01, 0x00, 0x00,
}
