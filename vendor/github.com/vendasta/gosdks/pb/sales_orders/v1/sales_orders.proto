syntax = "proto3";

package salesorders.v1;

import "google/protobuf/timestamp.proto";
import "sales_orders/v1/common.proto";



// The different statuses representing any given state an order can be in
enum Status {
    SUBMITTED = 0;
    APPROVED = 1;
    DECLINED = 2;
    DRAFTED = 3;
    FULFILLED = 4;
    PROCESSING = 5;
    ACTIVATION_ERRORS = 6;
}

// The different statuses representing any given state that a product can be in during the activation process
enum ActivationStatus {
    // The product is in the process of being activated
    PENDING = 0;
    // The product was successfully activated via the order
    ACTIVATED = 1;
    // An error occured while activating the product during the activation step
    ERRORED = 2;
    // The product was already active prior to fulfilling the order
    ALREADY_ACTIVATED = 3;
}

// Available types that a field can be
enum FieldType {
    NOT_SPECIFIED = 0;
    TEXT = 1;
    TEXTAREA = 2;
    DROPDOWN = 3;
    CHECKBOX = 4;
    FILE = 5;
}

message AddonKey {
    // Unique identifier of an addon
    string addon_id = 1;
    // The parent app for the addon
    string app_id = 2;
}

// Representing a package in an order
message Package {
    // Unique identifier of a package
    string package_id = 1;
    // Type of currency the revenue of a package is in
    Currency currency = 2;
    // Revenue of a package
    Revenue revenue = 3;
    // How many of the package is being requested
    int64 quantity = 4;
    // List of unique identifiers for the products that belong to the package
    repeated string product_ids = 5;
    // List of addon keys that belong to the package
    repeated AddonKey addon_keys = 6;
}   
// Represents an information field pertaining to a product
message Field {
    // Unique identifier of a custom or common field
    string field_id = 1;
    // Response related to the question of the field_id
    string answer = 2;
    // The type of field
    FieldType field_type = 3;
    // The question for the custom or common field
    string label = 4;
    // The description of the field
    string description = 5;
}
// Represents the answer(s) to a custom field that is unique to a product
message CustomField {
    // List of custom fields for a given product
    repeated Field fields = 1;
    // Unique identifier of a single product that the custom questions belong to, and will not be provided if the custom field belongs to an addon
    string product_id = 2;
    // Addon key of an addon that the custom questions belong to, and will not be provided if the custom field belongs to a product
    AddonKey addon_key = 3;
}
// Represents the answer to a common field may be shared between products
message CommonField {
    // The field that may be shared by multiple products
    Field field = 1;
    // List of unique product identifiers that share the common field
    repeated string product_ids = 2;
    // List of addon keys that share the common field
    repeated AddonKey addon_keys = 3;
}

// Represents a single product with its corresponding activation status
message ProductActivation {
    // Unique identifier of a single product that is going through the activation process
    string product_id = 1;
    // The activation status of a single product
    ActivationStatus activation_status = 2;
}

// Represents a single addon with its corresponding activation status
message AddonActivation {
    // Unique identifier of a single addon that is going through the activation process
    string addon_id = 1;
    // Unique identifier of the parent app for the addon that is going through the activation process
    string app_id = 2;
    // The activation status of a single product
    ActivationStatus activation_status = 3;
}

// Data representing an order form submitted by a salesperson
message Order {
    // The unique identifier of the order
    string order_id = 1;
    // Salesperson who submitted the order
    string salesperson_id = 2;
    // The partner the order is being made under
    string partner_id = 3;
    // The business the order is being made for
    string business_id = 4;
    // The market the order is being made under
    string market_id = 5;
    // The opportunities that are being used for the order
    repeated string opportunity_ids = 6;
    // The current status of the order
    Status status = 7;
    // The requested activation date for the order's products
    google.protobuf.Timestamp requested_activation = 8;
    // Notes for the partner administrator from the salesperson
    string notes = 9;
    // Packages in the order
    repeated Package packages = 10;
    // Custom field answers for the packages
    repeated CustomField custom_fields = 11;
    // Common field answers for the packages
    repeated CommonField common_fields = 12;
    // Time the order was submitted by a salesperson
    google.protobuf.Timestamp created = 13;
    // The list of products with their corresponding activation status
    repeated ProductActivation product_activations = 14;
    // Time the order was approved
    google.protobuf.Timestamp approved = 15;
    // Time the order was declined
    google.protobuf.Timestamp declined = 16;
    // Time the order was fulfilled
    google.protobuf.Timestamp fulfilled = 17;
    // The list of addons with their corresponding activation status
    repeated AddonActivation addon_activations = 18;
}

// Containing information to create a new order
message CreateSalesOrderRequest {
    // ID of the salesperson that submitted the order
    string salesperson_id = 1;
    // ID of the partner that the order belongs to
    string partner_id = 2;
    // ID of the business that the order is for
    string business_id = 3;
    // ID of the market that the order belongs to
    string market_id = 4;
    // Opportunity id(s) that the order is fulfilling
    repeated string opportunity_ids = 5;
    // Time submitted by a salesperson that indicates when an administrator should activate the products on the order
    google.protobuf.Timestamp requested_activation = 6;
    // Additional notes written by a salesperson
    string notes = 7;
    // Data for the package(s) information
    repeated Package packages = 8;
    // A list of additional unique information pertaining to an individual product
    repeated CustomField custom_fields = 9;
    // A list of additional information that is shared across multiple products
    repeated CommonField common_fields = 10;
}

// Response of creating an order
message CreateSalesOrderResponse {
     // Unique identifier of an order
    string order_id = 1;
}

// Containing information to get an order
message GetSalesOrderRequest {
    // Unique identifier of an order
    string order_id = 1;
    // The business the order belongs to
    string business_id = 2;
}

// Response of getting an order
message GetSalesOrderResponse {
     // Sales order
    Order order = 1;
}

// Request to get a list of orders for a partner
message ListSalesOrderRequest {
    // Filters to list sales orders based on given filter criterias
    message Filters {
        // Singular market filter
        string market_id = 1;
        // Singular salesperson filter
        string salesperson_id = 2;
        // Created date range filter
        DateRangeFilter created = 3;
        // Requested activation date filter
        DateRangeFilter requested_activation = 4;
        // Multiple status filter
        repeated Status statuses = 5;
        // Singular business filter
        string business_id = 6;
    }
    // Begin and end of date range
    message DateRangeFilter {
        google.protobuf.Timestamp begin_range = 1;
        google.protobuf.Timestamp end_range = 2;
    }
    // The field to sort a result set on
    enum SortField {
        REQUESTED_ACTIVATION = 0;
        CREATED = 1;
        STATUS = 2;
    }
    // The directions that a result set can be sorted in
    enum SortDirection {
        ASCENDING = 0;
        DESCENDING = 1;
    }
    // Options for controlling the order of query results
    message SortOption {
        // A direction to sort results in
        SortDirection direction = 1;
        // Field to sort on
        SortField field = 2;
    }
    // partner id for partner making request
    string partner_id = 1;
    // Filters for the request
    Filters filters = 2;
    // Sort options for the request
    SortOption sort_option = 3;
    // current cursor position
    string cursor = 4;
    // size of the page to list
    // 0 assumes the default page size
    int64 page_size = 5;
}

// Response to get a list of orders for a partner
message ListSalesOrderResponse {
    // list of the requested sales order data
    repeated Order orders = 1;
    // A cursor that can be provided to retrieve the next page of results 
    string next_cursor = 2;
    // Whether or not more results exist
    bool has_more = 3;
}

// Request for approving a order
message ApproveSalesOrderRequest {
    // Unique identifier of an order
    string order_id = 1;
    // The business the order belongs to
    string business_id = 2;
}

// Response of approving an order
message ApproveSalesOrderResponse {
     // Sales order
    Order order = 1;
}

// Request for declining a order
message DeclineSalesOrderRequest {
    // Unique identifier of an order
    string order_id = 1;
    // The business the order belongs to
    string business_id = 2;
    // Reason to why the order is declined
    string declined_reason = 3;
}

// Response of declining an order
message DeclineSalesOrderResponse {
     // Sales order
    Order order = 1;
}

// Request for activating products on the order
message ActivateProductsRequest {
    // Unique identifier of an order
    string order_id = 1;
    // The business the order belongs to
    string business_id = 2;
    // A list of additional unique information pertaining to an individual product
    repeated CustomField custom_fields = 3;
    // A list of additional information that is shared across multiple products
    repeated CommonField common_fields = 4;
}

// Response of activating products on the order
message ActivateProductsResponse {
     // Sales order
    Order order = 1;
}
