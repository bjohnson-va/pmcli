// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iam_resources/v1/api.proto

/*
Package iamresources_v1 is a generated protocol buffer package.

It is generated from these files:
	iam_resources/v1/api.proto

It has these top-level messages:
	ValueList
	GetResourceRequest
	GetResourceResponse
	GetResourcesResponse
	Identifiers
	GetResourcesRequest
*/
package iamresources_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ValueList is a holder for multiple string values in order to be compatible with map declarations
type ValueList struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ValueList) Reset()                    { *m = ValueList{} }
func (m *ValueList) String() string            { return proto.CompactTextString(m) }
func (*ValueList) ProtoMessage()               {}
func (*ValueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ValueList) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// GetResourceRequest allows IAM to ask a ResourceOwner for the attribute-based representation of a single resource entity.
type GetResourceRequest struct {
	// resource_id is the resource type that the subject wants to access
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// resource_identifier is a set of parameters that a resource owner needs to identify a resource.
	ResourceIdentifier map[string]*ValueList `protobuf:"bytes,2,rep,name=resource_identifier,json=resourceIdentifier" json:"resource_identifier,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetResourceRequest) Reset()                    { *m = GetResourceRequest{} }
func (m *GetResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetResourceRequest) ProtoMessage()               {}
func (*GetResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResourceRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *GetResourceRequest) GetResourceIdentifier() map[string]*ValueList {
	if m != nil {
		return m.ResourceIdentifier
	}
	return nil
}

// GetResourceResponse includes the expression of a resource as a map of attributes. Only attributes relevant to access control and used by
// policies defined by this resource need to be includes in this map.
type GetResourceResponse struct {
	Attributes map[string]*ValueList `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetResourceResponse) Reset()                    { *m = GetResourceResponse{} }
func (m *GetResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResourceResponse) ProtoMessage()               {}
func (*GetResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetResourceResponse) GetAttributes() map[string]*ValueList {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// GetResourcesResponse includes the expression of a resource as a map of attributes. Only attributes relevant to access control and used by
// policies defined by the set of resources need to be includes in this map.
type GetResourcesResponse struct {
	Attributes []*Identifiers `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *GetResourcesResponse) Reset()                    { *m = GetResourcesResponse{} }
func (m *GetResourcesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResourcesResponse) ProtoMessage()               {}
func (*GetResourcesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResourcesResponse) GetAttributes() []*Identifiers {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Identifiers is a set of identifiers for retreiving resources and identifying resource data.
type Identifiers struct {
	// identifiers is a set of parameters that a resource owner needs to identify a resource.
	Identifiers map[string]*ValueList `protobuf:"bytes,1,rep,name=identifiers" json:"identifiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Identifiers) Reset()                    { *m = Identifiers{} }
func (m *Identifiers) String() string            { return proto.CompactTextString(m) }
func (*Identifiers) ProtoMessage()               {}
func (*Identifiers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Identifiers) GetIdentifiers() map[string]*ValueList {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

// GetResourceRequest allows IAM to ask a ResourceOwner for the attribute-based representation of multiple resource entities.
type GetResourcesRequest struct {
	ResourceIdentifiers []*Identifiers `protobuf:"bytes,1,rep,name=resource_identifiers,json=resourceIdentifiers" json:"resource_identifiers,omitempty"`
	// resource_id is the resource type that the subject wants to access
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
}

func (m *GetResourcesRequest) Reset()                    { *m = GetResourcesRequest{} }
func (m *GetResourcesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetResourcesRequest) ProtoMessage()               {}
func (*GetResourcesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetResourcesRequest) GetResourceIdentifiers() []*Identifiers {
	if m != nil {
		return m.ResourceIdentifiers
	}
	return nil
}

func (m *GetResourcesRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func init() {
	proto.RegisterType((*ValueList)(nil), "iamresources.v1.ValueList")
	proto.RegisterType((*GetResourceRequest)(nil), "iamresources.v1.GetResourceRequest")
	proto.RegisterType((*GetResourceResponse)(nil), "iamresources.v1.GetResourceResponse")
	proto.RegisterType((*GetResourcesResponse)(nil), "iamresources.v1.GetResourcesResponse")
	proto.RegisterType((*Identifiers)(nil), "iamresources.v1.Identifiers")
	proto.RegisterType((*GetResourcesRequest)(nil), "iamresources.v1.GetResourcesRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ResourceOwner service

type ResourceOwnerClient interface {
	// deprecated: Use GetResources
	// GetResource allows IAM to ask for the attribute-based representation of a single resource entity.
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	// GetResources allows IAM to ask for the attribute-based representation of multiple resource entities.
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
}

type resourceOwnerClient struct {
	cc *grpc.ClientConn
}

func NewResourceOwnerClient(cc *grpc.ClientConn) ResourceOwnerClient {
	return &resourceOwnerClient{cc}
}

func (c *resourceOwnerClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := grpc.Invoke(ctx, "/iamresources.v1.ResourceOwner/GetResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceOwnerClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := grpc.Invoke(ctx, "/iamresources.v1.ResourceOwner/GetResources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceOwner service

type ResourceOwnerServer interface {
	// deprecated: Use GetResources
	// GetResource allows IAM to ask for the attribute-based representation of a single resource entity.
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	// GetResources allows IAM to ask for the attribute-based representation of multiple resource entities.
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
}

func RegisterResourceOwnerServer(s *grpc.Server, srv ResourceOwnerServer) {
	s.RegisterService(&_ResourceOwner_serviceDesc, srv)
}

func _ResourceOwner_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceOwnerServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamresources.v1.ResourceOwner/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceOwnerServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceOwner_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceOwnerServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamresources.v1.ResourceOwner/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceOwnerServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceOwner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iamresources.v1.ResourceOwner",
	HandlerType: (*ResourceOwnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResource",
			Handler:    _ResourceOwner_GetResource_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _ResourceOwner_GetResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam_resources/v1/api.proto",
}

func init() { proto.RegisterFile("iam_resources/v1/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x6a, 0xe2, 0x40,
	0x14, 0xdd, 0x89, 0xac, 0xe0, 0xcd, 0x2e, 0xca, 0x28, 0xbb, 0x21, 0x2c, 0x6c, 0x88, 0xbb, 0x90,
	0x97, 0xc6, 0x9a, 0xf6, 0xa1, 0xb4, 0x7d, 0xe9, 0x43, 0x29, 0x85, 0x82, 0x10, 0xa4, 0x50, 0xa1,
	0x48, 0xac, 0x53, 0x18, 0xaa, 0x89, 0x9d, 0x99, 0x58, 0xfc, 0x81, 0xf6, 0x9f, 0xfa, 0x01, 0x7d,
	0xe8, 0x57, 0x15, 0x4d, 0x26, 0x8e, 0x89, 0xb5, 0x3e, 0xf8, 0x36, 0xe3, 0xbd, 0xe7, 0x78, 0xce,
	0x99, 0x7b, 0x03, 0x26, 0x0d, 0xc6, 0x7d, 0x46, 0x78, 0x14, 0xb3, 0x3b, 0xc2, 0x5b, 0xd3, 0x76,
	0x2b, 0x98, 0x50, 0x77, 0xc2, 0x22, 0x11, 0xe1, 0x2a, 0x0d, 0xc6, 0x59, 0xc9, 0x9d, 0xb6, 0xed,
	0x26, 0x54, 0xae, 0x83, 0x51, 0x4c, 0xae, 0x28, 0x17, 0xf8, 0x17, 0x94, 0xa7, 0xf3, 0x0b, 0x37,
	0x90, 0x55, 0x72, 0x2a, 0x7e, 0x7a, 0xb3, 0x9f, 0x35, 0xc0, 0x17, 0x44, 0xf8, 0x29, 0xd0, 0x27,
	0x8f, 0x31, 0xe1, 0x02, 0xff, 0x05, 0x5d, 0x72, 0xf5, 0xe9, 0xd0, 0x40, 0x16, 0x72, 0x2a, 0x3e,
	0xc8, 0x9f, 0x2e, 0x87, 0x78, 0x04, 0x75, 0xa5, 0x81, 0x84, 0x82, 0xde, 0x53, 0xc2, 0x0c, 0xcd,
	0x2a, 0x39, 0xba, 0x77, 0xe2, 0xe6, 0xb4, 0xb8, 0xc5, 0xbf, 0x70, 0xfd, 0x8c, 0x4c, 0xa2, 0xcf,
	0x43, 0xc1, 0x66, 0x3e, 0x66, 0x85, 0x82, 0x19, 0xc0, 0xef, 0x4f, 0xda, 0x71, 0x0d, 0x4a, 0x0f,
	0x64, 0x96, 0x2a, 0x9c, 0x1f, 0xf1, 0x3e, 0x7c, 0x5f, 0x98, 0x33, 0x34, 0x0b, 0x39, 0xba, 0x67,
	0x16, 0xc4, 0x64, 0xa9, 0xf8, 0x49, 0xe3, 0xb1, 0x76, 0x84, 0xec, 0x37, 0x04, 0xf5, 0x15, 0x95,
	0x7c, 0x12, 0x85, 0x9c, 0xe0, 0x2e, 0x40, 0x20, 0x04, 0xa3, 0x83, 0x58, 0xa4, 0xe1, 0xe9, 0xde,
	0xe1, 0x66, 0x7f, 0x09, 0xd2, 0x3d, 0xcb, 0x60, 0x89, 0x31, 0x85, 0xc7, 0xbc, 0x81, 0x6a, 0xae,
	0xbc, 0x33, 0x23, 0x5d, 0x68, 0x28, 0x6a, 0x78, 0x66, 0xe4, 0x74, 0x8d, 0x91, 0x3f, 0x05, 0xca,
	0x65, 0xbc, 0x5c, 0x15, 0x6c, 0xbf, 0x22, 0xd0, 0x95, 0x1a, 0xee, 0x80, 0xbe, 0x7c, 0x76, 0x49,
	0xb7, 0xb7, 0x89, 0x4e, 0x3d, 0x27, 0x81, 0xa8, 0x0c, 0x66, 0x0f, 0x6a, 0xf9, 0x86, 0x9d, 0x45,
	0xf2, 0xb2, 0xfa, 0xb6, 0x5c, 0x4e, 0x79, 0x07, 0x1a, 0x6b, 0x86, 0x78, 0xbb, 0x70, 0xea, 0xc5,
	0x31, 0xe5, 0xf9, 0xb5, 0xd1, 0xf2, 0x6b, 0xe3, 0xbd, 0x23, 0xf8, 0x29, 0x65, 0x74, 0x9e, 0x42,
	0xc2, 0x70, 0x0f, 0x74, 0x45, 0x1a, 0x6e, 0x6e, 0xb1, 0x3a, 0xe6, 0xbf, 0x6d, 0xe6, 0xcf, 0xfe,
	0x86, 0x6f, 0xe1, 0x87, 0x6a, 0x1b, 0x6f, 0xc4, 0xc9, 0x54, 0xcc, 0xff, 0x5f, 0x74, 0x49, 0xfa,
	0x41, 0x79, 0xf1, 0xe1, 0x39, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff, 0x39, 0x6b, 0xdd, 0x43, 0x96,
	0x04, 0x00, 0x00,
}
