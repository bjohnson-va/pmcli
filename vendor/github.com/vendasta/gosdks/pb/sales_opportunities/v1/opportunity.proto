syntax = "proto3";

package salesopportunities.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

enum RevenuePeriod {
    ONETIME = 0;
    DAILY = 1;
    WEEKLY = 2;
    BIWEEKLY = 3;
    MONTHLY = 4;
    YEARLY = 5;
}

enum Currency {
    USD = 0;
    CAD = 1;
    EUR = 2;
    AUD = 3;
    GBP = 4;
    NZD = 5;
}

// Reasons an opportunity was lost
enum ClosedLostReasonOption {
    PRICE = 0;
    NO_BUDGET = 1;
    LOST_TO_COMPETITOR = 2;
    NOT_READY = 3;
    OTHER = 4;
}

message Package {
    string package_id = 1;
    Currency currency = 2;
    Revenue initial_revenue = 3;
    Revenue current_revenue = 4;
    int64 quantity = 5;
}

message RevenueComponent {
    // The value in the smallest common currency unit i.e. cents. Therefore 4000 would represent $40.00.
    int64 value = 1;

    // The frequency this revenue occurs.
    RevenuePeriod period = 2;
}

message Revenue {
    repeated RevenueComponent revenue_components = 1;
}

// A message containing the reason why the opportunity was lost
message ClosedLostReason {
    // The reason the opportunity was lost
    ClosedLostReasonOption value = 1;
}

message Opportunity {
    string opportunity_id = 1;
    string account_group_id = 2;
    string sales_person_id = 3;

    string name = 4;
    repeated Package packages = 5;
    google.protobuf.Timestamp expected_close_date = 6;
    double probability = 7;
    string notes = 8;

    google.protobuf.Timestamp deleted = 9;
    google.protobuf.Timestamp created = 10;
    google.protobuf.Timestamp updated = 11;

    // The projected first year revenue in the smallest common currency unit. This value takes into account one time
    // payments and recurring payments that would occur in the first year.
    int64 projected_first_year_value = 12;

    // The probable first year value in the smallest common currency unit. Calculated by multiplying the prjected first
    // year value by the probability.
    int64 probable_first_year_value = 13;

    string pipeline_stage = 14;
    bool is_closed = 15;

    // The reason the opportunity was closed lost
    ClosedLostReason closed_lost_reason = 16;

    // The date the opportunity was actually closed
    google.protobuf.Timestamp actual_closed_date = 17;

    // The last date the salesperson connected with the business in relation to this opportunity
    google.protobuf.Timestamp last_connected_date = 18;

    // The last date the business had activity
    google.protobuf.Timestamp last_activity_date = 19;

    // The reason the opportunity was reopened
    string reopened_reason = 20;
}

// *******************
// Requests
// *******************

// Message containing information to create opportunity
message CreateOpportunityRequest {
    // Package information for the opportunity
    message CreateOpportunityPackage {
        // Unique ID of package
        string package_id = 1;
        // Quantity of package
        int64 quantity = 2;
    }
    // ID of account group that opportunity belongs to
    string account_group_id = 1;
    // ID of sales person that is assigned to the opportunity
    string sales_person_id = 2;
    
    // Name of an opportunity
    string name = 3;
    // List of package ids (deprecated: Use packages instead)
    repeated string package_ids = 4;
    // Expected close date timestamp
    google.protobuf.Timestamp expected_close_date = 5;
    // Probability of the opportunity
    double probability = 6;
    // Opportunity notes
    string notes = 7;

    // ID of market that opportunity belongs to
    string market_id = 8;
    // ID of partner that opportunity belongs to
    string partner_id = 9;

    // List of packages
    repeated CreateOpportunityPackage packages = 10;
}

message GetOpportunityRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
}

// Begin and end of date range
message DateRangeFilter {
    google.protobuf.Timestamp begin_range = 1;
    google.protobuf.Timestamp end_range = 2;
}

// Minimum and maximum probability range to filter on
message ProbabilityRangeFilter {
    double minimum = 1;
    double maximum = 2;
}

// The directions that a result set can be sorted in.
enum SortDirection {
    ASCENDING = 0;
    DESCENDING = 1;
}

// List opportunities. Paged.
message ListOpportunitiesRequest {
    // Filters to list opportunities based on given filter criterias
    message Filters {
        // id of an account group
        string account_group_id = 1;
        // A list of sales person ids
        repeated string sales_person_ids = 2;
        // A list of pipeline stages
        repeated string pipeline_stages = 3;
        // Create date range filter
        DateRangeFilter created_date_filter = 4;
        // Expected close date range filter
        DateRangeFilter expected_close_date_filter = 5;
        // Probability range filter
        ProbabilityRangeFilter probability_range_filter = 6;
        // A list of package ids
        repeated string package_ids = 7;
        // Actual close date range filter
        DateRangeFilter actual_close_date_filter = 8;
    }
    // The field to sort a result set on.
    enum SortField {
        PROJECTED_FIRST_YEAR_VALUE = 0;
        PROBABILITY = 1;
        CREATED = 2;
        EXPECTED_CLOSE = 3;
        NAME = 4;
        LAST_ACTIVITY = 5;
        LAST_CONNECTED = 6;
        ACTUAL_CLOSE = 7;
    }
    // Options for controlling the order of query results
    message SortOption {
        // A direction to sort results in
        SortDirection direction = 1;
        // Field to sort on
        SortField field = 2;
    }
    // id of an account group (deprecated - use filter property account_group_id instead)
    string account_group_id = 1;
    // cursor for paging
    string cursor = 2;
    // page size for paging
    int64 page_size = 3;
    // A list of sales person ids (deprecated - use filter property sales_person_ids instead)
    repeated string sales_person_ids = 4;
    // Filters used to get list of opportunities
    Filters filters = 5;
    // Opportunities list sort option
    SortOption sort_option = 6;
    // The id of the partner to scope the list of opportunities to
    string partner_id = 7;
    // The id of the market to scope the list of opportunities to
    string market_id = 8;

}

message GetOpportunityCountByAccountGroupsRequest {
    repeated string account_group_ids = 1;
}

message UpdateOpportunityNameRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    string name = 4;
}

message UpdateOpportunityProbabilityRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    double probability = 4;
}

message UpdateOpportunitySalespersonRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    string sales_person_id = 4;
}

message UpdateOpportunityExpectedCloseDateRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    google.protobuf.Timestamp expected_close_date = 4;
}

message UpdateOpportunityNotesRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    string notes = 4;
}

message AddOpportunityPackagesRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    repeated string package_ids = 4;
}

message RemoveOpportunityPackagesRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    repeated string package_ids = 4;
}

message UpdateOpportunityPackageRevenueRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    string package_id = 4;
    Revenue revenue = 5;
}

message UpdateOpportunityPackageRequest {
    string opportunity_id = 1;
    string account_group_id = 2;
    string edit_sales_person_id = 3;
    string package_id = 4;
    Revenue current_revenue = 5;
    // Quantity of the package in the opportunity, a multiplier for the package's potential revenue
    int64 quantity = 6;
}

// Move an opportunity into a closed won stage in the pipeline
message CloseAsWonOpportunityRequest {
    // ID of the opportunity to close
    string opportunity_id = 1;

    // ID of the account group the opportunity belongs to
    string account_group_id = 2;

    // ID of the sales person who closed this opportunity
    string edit_sales_person_id = 3;
}

// Move an opportunity into a closed lost stage in the pipeline
message CloseAsLostOpportunityRequest {
    // ID of the opportunity to close
    string opportunity_id = 1;

    // ID of the account group the opportunity belongs to
    string account_group_id = 2;

    // ID of the sales person who closed this opportunity
    string edit_sales_person_id = 3;

    // Reason why this opportunity was lost
    ClosedLostReasonOption reason = 4;
}

message UpdateLastConnectedDateRequest {
    // ID of the opportunity to update
    string opportunity_id = 1;

    // ID of the account group the opportunity belongs to
    string account_group_id = 2;

    // ID of the sales person who updated this opportunity
    string edit_sales_person_id = 3;

    // The last connected date
    google.protobuf.Timestamp last_connected_date = 4;
}

message UpdateLastActivityDateRequest {
    // ID of the opportunity to update
    string opportunity_id = 1;

    // ID of the account group the opportunity belongs to
    string account_group_id = 2;

    // ID of the sales person who updated this opportunity
    string edit_sales_person_id = 3;

    // The last activity date
    google.protobuf.Timestamp last_activity_date = 4;

    // Flag to indicate that this activity resulted in a connection
    bool connected = 5;
}

message DeleteOpportunityRequest {
    // ID of the opportunity to delete
    string opportunity_id = 1;

    // ID of the account group the opportunity belongs to
    string account_group_id = 2;

    // ID of the sales person who deleted this opportunity
    string edit_sales_person_id = 3;
}

message ReopenClosedOpportunityRequest {
    // ID of the opportunity to reopen
    string opportunity_id = 1;

    // ID of the account group the opportunity belongs to
    string account_group_id = 2;

    // ID of the sales person who reopened the opportunity
    string edit_sales_person_id = 3;

    // Reason for reopening the opportunity
    string reason = 4;
}

message UpdateOpportunityMarketRequest {
    // ID of the opportunity to update
    string opportunity_id = 1;

    // ID of the account group the opportunity belongs to
    string account_group_id = 2;

    // ID of the sales person who updated this opportunity
    string edit_sales_person_id = 3;

    // The market id for the opportunity
    string market_id = 4;
}

// *******************
// Responses
// *******************
message CreateOpportunityResponse {
    Opportunity opportunity = 1;
}

message GetOpportunityResponse {
    Opportunity opportunity = 1;
}

message ListOpportunitiesResponse {
    // List of opportunities
    repeated Opportunity results = 1;
    // A cursor that can be provided to retrieve the next page of results
    string next_cursor = 2;
    // Whether or not more results exist
    bool has_more = 3;
    // The total number of results for this query across all pages
    int64 total_results = 4;
    // The sum total number of projected first year values for this query across all pages
    int64 total_projected_first_year_value = 5;
}

message OpportunityCount {
    string account_group_id = 1;
    int64 count = 2;
}

message GetOpportunityCountByAccountGroupsResponse {
    repeated OpportunityCount results = 1;
}

message UpdateOpportunityNameResponse {
    Opportunity opportunity = 1;
}

message UpdateOpportunityProbabilityResponse {
    Opportunity opportunity = 1;
}

message UpdateOpportunitySalespersonResponse {
    Opportunity opportunity = 1;
}

message UpdateOpportunityExpectedCloseDateResponse {
    Opportunity opportunity = 1;
}

message UpdateOpportunityNotesResponse {
    Opportunity opportunity = 1;
}

message AddOpportunityPackagesResponse {
    Opportunity opportunity = 1;
}

message RemoveOpportunityPackagesResponse {
    Opportunity opportunity = 1;
}

message UpdateOpportunityPackageRevenueResponse {
    Opportunity opportunity = 1;
}

message UpdateOpportunityPackageResponse {
    Opportunity opportunity = 1;
}

message UpdateLastConnectedDateResponse {
    Opportunity opportunity = 1;
}

message UpdateLastActivityDateResponse {
    Opportunity opportunity = 1;
}

// Response to a request to close an opportunity which has been won
message CloseAsWonOpportunityResponse {
    //The opportunity's new state
    Opportunity opportunity = 1;
}

// Response to a request to close an opportunity which has been lost
message CloseAsLostOpportunityResponse {
    // The opportunity's new state
    Opportunity opportunity = 1;
}

message UpdateOpportunityMarketResponse {
    Opportunity opportunity = 1;
}

service SalesOpportunities {
    rpc CreateOpportunity (CreateOpportunityRequest) returns (CreateOpportunityResponse){
    }

    rpc GetOpportunity (GetOpportunityRequest) returns (GetOpportunityResponse){
    }

    rpc ListOpportunities (ListOpportunitiesRequest) returns (ListOpportunitiesResponse){
    }

    rpc GetOpportunityCountByAccountGroups (GetOpportunityCountByAccountGroupsRequest) returns (GetOpportunityCountByAccountGroupsResponse) {
    }

    rpc UpdateOpportunityName (UpdateOpportunityNameRequest) returns (UpdateOpportunityNameResponse) {
    }

    rpc UpdateOpportunityProbability (UpdateOpportunityProbabilityRequest) returns (UpdateOpportunityProbabilityResponse) {
    }

    rpc UpdateOpportunitySalesperson (UpdateOpportunitySalespersonRequest) returns (UpdateOpportunitySalespersonResponse) {
    }

    rpc UpdateOpportunityExpectedCloseDate (UpdateOpportunityExpectedCloseDateRequest) returns (UpdateOpportunityExpectedCloseDateResponse) {
    }

    rpc UpdateOpportunityNotes (UpdateOpportunityNotesRequest) returns (UpdateOpportunityNotesResponse) {
    }

    rpc AddOpportunityPackages (AddOpportunityPackagesRequest) returns (AddOpportunityPackagesResponse) {
    }

    rpc RemoveOpportunityPackages (RemoveOpportunityPackagesRequest) returns (RemoveOpportunityPackagesResponse) {
    }

    rpc UpdateOpportunityPackageRevenue (UpdateOpportunityPackageRevenueRequest) returns (UpdateOpportunityPackageRevenueResponse) {
    }

    rpc UpdateOpportunityPackage (UpdateOpportunityPackageRequest) returns (UpdateOpportunityPackageResponse) {
    }

    rpc CloseAsWonOpportunity (CloseAsWonOpportunityRequest) returns (CloseAsWonOpportunityResponse) {
    }

    rpc CloseAsLostOpportunity (CloseAsLostOpportunityRequest) returns (CloseAsLostOpportunityResponse) {
    }

    rpc UpdateLastConnectedDate (UpdateLastConnectedDateRequest) returns (UpdateLastConnectedDateResponse) {
    }

    rpc UpdateLastActivityDate (UpdateLastActivityDateRequest) returns (UpdateLastActivityDateResponse) {
    }

    rpc DeleteOpportunity (DeleteOpportunityRequest) returns (google.protobuf.Empty) {
    }

    rpc ReopenClosedOpportunity (ReopenClosedOpportunityRequest) returns (google.protobuf.Empty) {
    }

    rpc UpdateOpportunityMarket (UpdateOpportunityMarketRequest) returns (UpdateOpportunityMarketResponse) {
    }
}
