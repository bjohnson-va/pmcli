// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package socialposts_v1 is a generated protocol buffer package.

It is generated from these files:
	api.proto
	social-posts.proto

It has these top-level messages:
	SocialPost
	ListSocialPostsResponse
	ListSocialPostsRequest
	Error
	SchedulePostStatus
	SocialPostData
	ScheduleToAllPagesRequest
	ScheduleToAllPagesResponse
	SchedulePostRequest
	SchedulePostResponse
	DateRangeFilter
	PartnerListScheduledSocialPostsRequest
	PartnerListScheduledPostsResponse
*/
package socialposts_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SocialPosts service

type SocialPostsClient interface {
	// List the social posts
	List(ctx context.Context, in *ListSocialPostsRequest, opts ...grpc.CallOption) (*ListSocialPostsResponse, error)
	// Will schedule a post to go out to all company social services connected to the account
	// This includes all twitter accounts, Facebook pages (not facebook users),
	// Google plus pages (not google plus users) and LinkedIn company pages (not linkedin users)
	ScheduleToAllPages(ctx context.Context, in *ScheduleToAllPagesRequest, opts ...grpc.CallOption) (*ScheduleToAllPagesResponse, error)
	// Schedule a post to the specified social services
	Schedule(ctx context.Context, in *SchedulePostRequest, opts ...grpc.CallOption) (*SchedulePostResponse, error)
}

type socialPostsClient struct {
	cc *grpc.ClientConn
}

func NewSocialPostsClient(cc *grpc.ClientConn) SocialPostsClient {
	return &socialPostsClient{cc}
}

func (c *socialPostsClient) List(ctx context.Context, in *ListSocialPostsRequest, opts ...grpc.CallOption) (*ListSocialPostsResponse, error) {
	out := new(ListSocialPostsResponse)
	err := grpc.Invoke(ctx, "/socialposts.v1.SocialPosts/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialPostsClient) ScheduleToAllPages(ctx context.Context, in *ScheduleToAllPagesRequest, opts ...grpc.CallOption) (*ScheduleToAllPagesResponse, error) {
	out := new(ScheduleToAllPagesResponse)
	err := grpc.Invoke(ctx, "/socialposts.v1.SocialPosts/ScheduleToAllPages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialPostsClient) Schedule(ctx context.Context, in *SchedulePostRequest, opts ...grpc.CallOption) (*SchedulePostResponse, error) {
	out := new(SchedulePostResponse)
	err := grpc.Invoke(ctx, "/socialposts.v1.SocialPosts/Schedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SocialPosts service

type SocialPostsServer interface {
	// List the social posts
	List(context.Context, *ListSocialPostsRequest) (*ListSocialPostsResponse, error)
	// Will schedule a post to go out to all company social services connected to the account
	// This includes all twitter accounts, Facebook pages (not facebook users),
	// Google plus pages (not google plus users) and LinkedIn company pages (not linkedin users)
	ScheduleToAllPages(context.Context, *ScheduleToAllPagesRequest) (*ScheduleToAllPagesResponse, error)
	// Schedule a post to the specified social services
	Schedule(context.Context, *SchedulePostRequest) (*SchedulePostResponse, error)
}

func RegisterSocialPostsServer(s *grpc.Server, srv SocialPostsServer) {
	s.RegisterService(&_SocialPosts_serviceDesc, srv)
}

func _SocialPosts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSocialPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialPostsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialposts.v1.SocialPosts/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialPostsServer).List(ctx, req.(*ListSocialPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialPosts_ScheduleToAllPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleToAllPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialPostsServer).ScheduleToAllPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialposts.v1.SocialPosts/ScheduleToAllPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialPostsServer).ScheduleToAllPages(ctx, req.(*ScheduleToAllPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialPosts_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialPostsServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialposts.v1.SocialPosts/Schedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialPostsServer).Schedule(ctx, req.(*SchedulePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SocialPosts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "socialposts.v1.SocialPosts",
	HandlerType: (*SocialPostsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SocialPosts_List_Handler,
		},
		{
			MethodName: "ScheduleToAllPages",
			Handler:    _SocialPosts_ScheduleToAllPages_Handler,
		},
		{
			MethodName: "Schedule",
			Handler:    _SocialPosts_Schedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for PartnerSocialPosts service

type PartnerSocialPostsClient interface {
	// List all the scheduled social posts of all accounts of a partner scheduled for a certain time period
	ListScheduled(ctx context.Context, in *PartnerListScheduledSocialPostsRequest, opts ...grpc.CallOption) (*PartnerListScheduledPostsResponse, error)
	// List all the scheduled social posts of all accounts of a partner created during a certain time period
	ListScheduledByCreated(ctx context.Context, in *PartnerListScheduledSocialPostsRequest, opts ...grpc.CallOption) (*PartnerListScheduledPostsResponse, error)
}

type partnerSocialPostsClient struct {
	cc *grpc.ClientConn
}

func NewPartnerSocialPostsClient(cc *grpc.ClientConn) PartnerSocialPostsClient {
	return &partnerSocialPostsClient{cc}
}

func (c *partnerSocialPostsClient) ListScheduled(ctx context.Context, in *PartnerListScheduledSocialPostsRequest, opts ...grpc.CallOption) (*PartnerListScheduledPostsResponse, error) {
	out := new(PartnerListScheduledPostsResponse)
	err := grpc.Invoke(ctx, "/socialposts.v1.PartnerSocialPosts/ListScheduled", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerSocialPostsClient) ListScheduledByCreated(ctx context.Context, in *PartnerListScheduledSocialPostsRequest, opts ...grpc.CallOption) (*PartnerListScheduledPostsResponse, error) {
	out := new(PartnerListScheduledPostsResponse)
	err := grpc.Invoke(ctx, "/socialposts.v1.PartnerSocialPosts/ListScheduledByCreated", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PartnerSocialPosts service

type PartnerSocialPostsServer interface {
	// List all the scheduled social posts of all accounts of a partner scheduled for a certain time period
	ListScheduled(context.Context, *PartnerListScheduledSocialPostsRequest) (*PartnerListScheduledPostsResponse, error)
	// List all the scheduled social posts of all accounts of a partner created during a certain time period
	ListScheduledByCreated(context.Context, *PartnerListScheduledSocialPostsRequest) (*PartnerListScheduledPostsResponse, error)
}

func RegisterPartnerSocialPostsServer(s *grpc.Server, srv PartnerSocialPostsServer) {
	s.RegisterService(&_PartnerSocialPosts_serviceDesc, srv)
}

func _PartnerSocialPosts_ListScheduled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerListScheduledSocialPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerSocialPostsServer).ListScheduled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialposts.v1.PartnerSocialPosts/ListScheduled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerSocialPostsServer).ListScheduled(ctx, req.(*PartnerListScheduledSocialPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerSocialPosts_ListScheduledByCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerListScheduledSocialPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerSocialPostsServer).ListScheduledByCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialposts.v1.PartnerSocialPosts/ListScheduledByCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerSocialPostsServer).ListScheduledByCreated(ctx, req.(*PartnerListScheduledSocialPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PartnerSocialPosts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "socialposts.v1.PartnerSocialPosts",
	HandlerType: (*PartnerSocialPostsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListScheduled",
			Handler:    _PartnerSocialPosts_ListScheduled_Handler,
		},
		{
			MethodName: "ListScheduledByCreated",
			Handler:    _PartnerSocialPosts_ListScheduledByCreated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2b, 0xce, 0x4f, 0xce, 0x4c, 0xcc, 0x29, 0xc8, 0x2f,
	0x2e, 0x29, 0xd6, 0x2b, 0x33, 0x94, 0x12, 0x82, 0xf0, 0x75, 0x21, 0x02, 0x60, 0x35, 0x46, 0x1b,
	0x98, 0xb8, 0xb8, 0x83, 0xc1, 0xc2, 0x01, 0x20, 0x51, 0xa1, 0x48, 0x2e, 0x16, 0x9f, 0xcc, 0xe2,
	0x12, 0x21, 0x35, 0x3d, 0x54, 0xcd, 0x7a, 0x20, 0x51, 0x24, 0x85, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x52, 0xea, 0x04, 0xd5, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0x31, 0x08, 0xe5,
	0x72, 0x09, 0x05, 0x27, 0x67, 0xa4, 0xa6, 0x94, 0xe6, 0xa4, 0x86, 0xe4, 0x3b, 0xe6, 0xe4, 0x04,
	0x24, 0xa6, 0xa7, 0x16, 0x0b, 0x69, 0xa2, 0x1b, 0x80, 0xa9, 0x06, 0x66, 0x97, 0x16, 0x31, 0x4a,
	0xe1, 0xd6, 0x85, 0x73, 0x71, 0xc0, 0xe4, 0x85, 0x94, 0x71, 0xe9, 0x04, 0xb9, 0x11, 0x66, 0xbc,
	0x0a, 0x7e, 0x45, 0x30, 0x83, 0x8d, 0x66, 0x31, 0x71, 0x09, 0x05, 0x24, 0x16, 0x95, 0xe4, 0xa5,
	0x16, 0x21, 0x87, 0x5c, 0x0d, 0x17, 0x2f, 0xd8, 0xef, 0x50, 0x4d, 0x29, 0x42, 0x66, 0xe8, 0xe6,
	0x41, 0x35, 0xa1, 0xa8, 0xc2, 0x12, 0xa4, 0x86, 0xc4, 0xe8, 0x43, 0x0f, 0xdc, 0x56, 0x46, 0x2e,
	0x31, 0x14, 0x05, 0x4e, 0x95, 0xce, 0x45, 0xa9, 0x89, 0x25, 0x74, 0x76, 0x87, 0x93, 0x2e, 0x97,
	0x74, 0x72, 0x7e, 0xae, 0x5e, 0x59, 0x6a, 0x5e, 0x4a, 0x62, 0x71, 0x49, 0x22, 0x9a, 0x11, 0x4e,
	0x7c, 0x08, 0x7b, 0x1c, 0x0b, 0x32, 0x8b, 0x93, 0xd8, 0xc0, 0xa9, 0xd0, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xb7, 0x2d, 0xe7, 0xb6, 0x02, 0x00, 0x00,
}
