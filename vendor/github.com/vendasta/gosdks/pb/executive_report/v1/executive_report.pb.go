// Code generated by protoc-gen-go. DO NOT EDIT.
// source: executive_report/v1/executive_report.proto

package executivereport_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// LMI categories to push data to for the Executive Report. Categories have their own heading in the report.
type Category int32

const (
	Category_NOT_SPECIFIED          Category = 0
	Category_LISTINGS               Category = 1
	Category_REPUTATION             Category = 2
	Category_SOCIAL                 Category = 3
	Category_WEBSITE                Category = 4
	Category_SEO                    Category = 5
	Category_ADVERTISING            Category = 6
	Category_CONTENT_AND_EXPERIENCE Category = 7
)

var Category_name = map[int32]string{
	0: "NOT_SPECIFIED",
	1: "LISTINGS",
	2: "REPUTATION",
	3: "SOCIAL",
	4: "WEBSITE",
	5: "SEO",
	6: "ADVERTISING",
	7: "CONTENT_AND_EXPERIENCE",
}
var Category_value = map[string]int32{
	"NOT_SPECIFIED":          0,
	"LISTINGS":               1,
	"REPUTATION":             2,
	"SOCIAL":                 3,
	"WEBSITE":                4,
	"SEO":                    5,
	"ADVERTISING":            6,
	"CONTENT_AND_EXPERIENCE": 7,
}

func (x Category) String() string {
	return proto.EnumName(Category_name, int32(x))
}
func (Category) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Available colors to choose from for certain fields, eg right_info_text_color in an INFO_LIST template
type Color int32

const (
	Color_COLOR_NOT_SPECIFIED Color = 0
	Color_BLACK               Color = 1
	Color_WHITE               Color = 2
	Color_GRAY                Color = 3
	Color_RED                 Color = 4
	Color_GREEN               Color = 5
	Color_BLUE                Color = 6
	Color_YELLOW              Color = 7
	Color_PURPLE              Color = 8
	Color_ORANGE              Color = 9
)

var Color_name = map[int32]string{
	0: "COLOR_NOT_SPECIFIED",
	1: "BLACK",
	2: "WHITE",
	3: "GRAY",
	4: "RED",
	5: "GREEN",
	6: "BLUE",
	7: "YELLOW",
	8: "PURPLE",
	9: "ORANGE",
}
var Color_value = map[string]int32{
	"COLOR_NOT_SPECIFIED": 0,
	"BLACK":               1,
	"WHITE":               2,
	"GRAY":                3,
	"RED":                 4,
	"GREEN":               5,
	"BLUE":                6,
	"YELLOW":              7,
	"PURPLE":              8,
	"ORANGE":              9,
}

func (x Color) String() string {
	return proto.EnumName(Color_name, int32(x))
}
func (Color) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// The frequency type of a report (types for whether the report is a weekly or monthly report)
// NOT_SPECIFIED is the default, and will error in the microservice.
type ReportFrequency int32

const (
	ReportFrequency_FREQUENCY_NOT_SPECIFIED ReportFrequency = 0
	ReportFrequency_WEEKLY                  ReportFrequency = 1
	ReportFrequency_MONTHLY                 ReportFrequency = 2
)

var ReportFrequency_name = map[int32]string{
	0: "FREQUENCY_NOT_SPECIFIED",
	1: "WEEKLY",
	2: "MONTHLY",
}
var ReportFrequency_value = map[string]int32{
	"FREQUENCY_NOT_SPECIFIED": 0,
	"WEEKLY":                  1,
	"MONTHLY":                 2,
}

func (x ReportFrequency) String() string {
	return proto.EnumName(ReportFrequency_name, int32(x))
}
func (ReportFrequency) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// Executive Report template types
type ReportData_TemplateType int32

const (
	// Results in an error when creating report data (to avoid defaulting to number_with_change)
	ReportData_NOT_SPECIFIED ReportData_TemplateType = 0
	// A template type to display a number value with an optional change value.
	ReportData_NUMBER_WITH_CHANGE ReportData_TemplateType = 1
	// A template type to display a call to action for a marketplace app
	ReportData_CALL_TO_ACTION ReportData_TemplateType = 2
	// A basic list has a header, body and footer for each element in the list. A header or body is the minimum requirement,
	ReportData_BASIC_LIST ReportData_TemplateType = 3
	// An info list has the same as the BASIC_LIST, plus info text, color, and icon to be displayed in the top right-most column of the template;
	// as well as an icon url for the left-most column of the template
	ReportData_INFO_LIST ReportData_TemplateType = 4
	// A template type to display horizontal bar graphs with a specified fill percentage, a label on the left side, and a value on the right. The
	// fill percentage and label are the minimum requirement.
	ReportData_BAR_CHART ReportData_TemplateType = 5
	// A number template to display just a number with a title and description.
	ReportData_BASIC_NUMBER ReportData_TemplateType = 6
	// A template type to display the letter grade and the specific score with change. Also a thermometer graph is shown that can display
	// multiple data points (starting score, industry average and 95th percentile) for comparison reasons, the graph is split up into
	// 5 sections depending on the percentile scores representing the grade values A, B, C, D and F
	ReportData_THERMOMETER_WITH_GRADE ReportData_TemplateType = 7
)

var ReportData_TemplateType_name = map[int32]string{
	0: "NOT_SPECIFIED",
	1: "NUMBER_WITH_CHANGE",
	2: "CALL_TO_ACTION",
	3: "BASIC_LIST",
	4: "INFO_LIST",
	5: "BAR_CHART",
	6: "BASIC_NUMBER",
	7: "THERMOMETER_WITH_GRADE",
}
var ReportData_TemplateType_value = map[string]int32{
	"NOT_SPECIFIED":          0,
	"NUMBER_WITH_CHANGE":     1,
	"CALL_TO_ACTION":         2,
	"BASIC_LIST":             3,
	"INFO_LIST":              4,
	"BAR_CHART":              5,
	"BASIC_NUMBER":           6,
	"THERMOMETER_WITH_GRADE": 7,
}

func (x ReportData_TemplateType) String() string {
	return proto.EnumName(ReportData_TemplateType_name, int32(x))
}
func (ReportData_TemplateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

// The accepted formats for a value
type ReportData_Format int32

const (
	ReportData_NUMBER   ReportData_Format = 0
	ReportData_PERCENT  ReportData_Format = 1
	ReportData_TIME     ReportData_Format = 3
	ReportData_FRACTION ReportData_Format = 4
)

var ReportData_Format_name = map[int32]string{
	0: "NUMBER",
	1: "PERCENT",
	3: "TIME",
	4: "FRACTION",
}
var ReportData_Format_value = map[string]int32{
	"NUMBER":   0,
	"PERCENT":  1,
	"TIME":     3,
	"FRACTION": 4,
}

func (x ReportData_Format) String() string {
	return proto.EnumName(ReportData_Format_name, int32(x))
}
func (ReportData_Format) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

// How much space (width) a template card will take up.
type ReportData_Width int32

const (
	ReportData_HALF    ReportData_Width = 0
	ReportData_FULL    ReportData_Width = 1
	ReportData_QUARTER ReportData_Width = 2
)

var ReportData_Width_name = map[int32]string{
	0: "HALF",
	1: "FULL",
	2: "QUARTER",
}
var ReportData_Width_value = map[string]int32{
	"HALF":    0,
	"FULL":    1,
	"QUARTER": 2,
}

func (x ReportData_Width) String() string {
	return proto.EnumName(ReportData_Width_name, int32(x))
}
func (ReportData_Width) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

// Calculated grade
type ReportData_Grade int32

const (
	ReportData_NONE_SPECIFIED ReportData_Grade = 0
	ReportData_A              ReportData_Grade = 1
	ReportData_B              ReportData_Grade = 2
	ReportData_C              ReportData_Grade = 3
	ReportData_D              ReportData_Grade = 4
	ReportData_F              ReportData_Grade = 5
)

var ReportData_Grade_name = map[int32]string{
	0: "NONE_SPECIFIED",
	1: "A",
	2: "B",
	3: "C",
	4: "D",
	5: "F",
}
var ReportData_Grade_value = map[string]int32{
	"NONE_SPECIFIED": 0,
	"A":              1,
	"B":              2,
	"C":              3,
	"D":              4,
	"F":              5,
}

func (x ReportData_Grade) String() string {
	return proto.EnumName(ReportData_Grade_name, int32(x))
}
func (ReportData_Grade) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 3} }

// This is a single piece for an app for their report for a week or month.
type ReportData struct {
	// The type of template, e.g. BigNumber
	TemplateType ReportData_TemplateType `protobuf:"varint,1,opt,name=template_type,json=templateType,enum=executivereport.v1.ReportData_TemplateType" json:"template_type,omitempty"`
	// A unique identifier of the report
	UniqueId string `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	// The title of the data
	Title string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// A description of the data
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The value of the data
	Value string `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	// How much the value has changed from the last report, A negative value is a decrease in the performance of
	// the stat (bad), and a positive value is an increase in the performance (good).
	Change string `protobuf:"bytes,6,opt,name=change" json:"change,omitempty"`
	// How the data is formatted, such as percent or number.
	Format ReportData_Format `protobuf:"varint,7,opt,name=format,enum=executivereport.v1.ReportData_Format" json:"format,omitempty"`
	// How precise the value is
	Precision int64 `protobuf:"varint,8,opt,name=precision" json:"precision,omitempty"`
	// How wide the display of the template card is
	Width ReportData_Width `protobuf:"varint,9,opt,name=width,enum=executivereport.v1.ReportData_Width" json:"width,omitempty"`
	// The relative link path used when linking out of the executive report
	NextUrl string `protobuf:"bytes,10,opt,name=next_url,json=nextUrl" json:"next_url,omitempty"`
	// The text label used for the next_url button
	NextUrlLabel string `protobuf:"bytes,11,opt,name=next_url_label,json=nextUrlLabel" json:"next_url_label,omitempty"`
	// Data for a list template type
	List []*ListItem `protobuf:"bytes,12,rep,name=list" json:"list,omitempty"`
	// Data for a bar graph template type
	BarChart []*BarChart `protobuf:"bytes,13,rep,name=bar_chart,json=barChart" json:"bar_chart,omitempty"`
	// Markers for a graph template type
	Marker []*GraphMarker `protobuf:"bytes,14,rep,name=marker" json:"marker,omitempty"`
	// the calculated grade
	Grade ReportData_Grade `protobuf:"varint,15,opt,name=grade,enum=executivereport.v1.ReportData_Grade" json:"grade,omitempty"`
}

func (m *ReportData) Reset()                    { *m = ReportData{} }
func (m *ReportData) String() string            { return proto.CompactTextString(m) }
func (*ReportData) ProtoMessage()               {}
func (*ReportData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ReportData) GetTemplateType() ReportData_TemplateType {
	if m != nil {
		return m.TemplateType
	}
	return ReportData_NOT_SPECIFIED
}

func (m *ReportData) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *ReportData) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReportData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReportData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ReportData) GetChange() string {
	if m != nil {
		return m.Change
	}
	return ""
}

func (m *ReportData) GetFormat() ReportData_Format {
	if m != nil {
		return m.Format
	}
	return ReportData_NUMBER
}

func (m *ReportData) GetPrecision() int64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *ReportData) GetWidth() ReportData_Width {
	if m != nil {
		return m.Width
	}
	return ReportData_HALF
}

func (m *ReportData) GetNextUrl() string {
	if m != nil {
		return m.NextUrl
	}
	return ""
}

func (m *ReportData) GetNextUrlLabel() string {
	if m != nil {
		return m.NextUrlLabel
	}
	return ""
}

func (m *ReportData) GetList() []*ListItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ReportData) GetBarChart() []*BarChart {
	if m != nil {
		return m.BarChart
	}
	return nil
}

func (m *ReportData) GetMarker() []*GraphMarker {
	if m != nil {
		return m.Marker
	}
	return nil
}

func (m *ReportData) GetGrade() ReportData_Grade {
	if m != nil {
		return m.Grade
	}
	return ReportData_NONE_SPECIFIED
}

// An item in a list
type ListItem struct {
	// A header of a list item, optional if a body exists
	Header string `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// The body of a list item. optional if the header exists
	Body string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	// The footer of a list item. always optional
	Footer string `protobuf:"bytes,3,opt,name=footer" json:"footer,omitempty"`
	// The informational text displayed in the top right-most column of the list item
	InfoText string `protobuf:"bytes,4,opt,name=info_text,json=infoText" json:"info_text,omitempty"`
	// The color of the info_text
	InfoTextColor Color `protobuf:"varint,5,opt,name=info_text_color,json=infoTextColor,enum=executivereport.v1.Color" json:"info_text_color,omitempty"`
	// The icon to be displayed inline after the info_text
	InfoTextIcon string `protobuf:"bytes,6,opt,name=info_text_icon,json=infoTextIcon" json:"info_text_icon,omitempty"`
	// The url of the icon image displayed in the left most column of the list item
	ImageUrl string `protobuf:"bytes,7,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
}

func (m *ListItem) Reset()                    { *m = ListItem{} }
func (m *ListItem) String() string            { return proto.CompactTextString(m) }
func (*ListItem) ProtoMessage()               {}
func (*ListItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ListItem) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *ListItem) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ListItem) GetFooter() string {
	if m != nil {
		return m.Footer
	}
	return ""
}

func (m *ListItem) GetInfoText() string {
	if m != nil {
		return m.InfoText
	}
	return ""
}

func (m *ListItem) GetInfoTextColor() Color {
	if m != nil {
		return m.InfoTextColor
	}
	return Color_COLOR_NOT_SPECIFIED
}

func (m *ListItem) GetInfoTextIcon() string {
	if m != nil {
		return m.InfoTextIcon
	}
	return ""
}

func (m *ListItem) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

// An item in a bar chart
type BarChart struct {
	// The label on the left of the bar
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// The value displayed on the right of the bar
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// The percentage of the bar that will be filled with color
	FillPercent int64 `protobuf:"varint,3,opt,name=fill_percent,json=fillPercent" json:"fill_percent,omitempty"`
	// The color of the bar
	FillColor Color `protobuf:"varint,4,opt,name=fill_color,json=fillColor,enum=executivereport.v1.Color" json:"fill_color,omitempty"`
}

func (m *BarChart) Reset()                    { *m = BarChart{} }
func (m *BarChart) String() string            { return proto.CompactTextString(m) }
func (*BarChart) ProtoMessage()               {}
func (*BarChart) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *BarChart) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *BarChart) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *BarChart) GetFillPercent() int64 {
	if m != nil {
		return m.FillPercent
	}
	return 0
}

func (m *BarChart) GetFillColor() Color {
	if m != nil {
		return m.FillColor
	}
	return Color_COLOR_NOT_SPECIFIED
}

// GraphMarker to highlight a significant value on a graph
type GraphMarker struct {
	Label      string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Score      float32 `protobuf:"fixed32,2,opt,name=score" json:"score,omitempty"`
	Percentile int64   `protobuf:"varint,3,opt,name=percentile" json:"percentile,omitempty"`
}

func (m *GraphMarker) Reset()                    { *m = GraphMarker{} }
func (m *GraphMarker) String() string            { return proto.CompactTextString(m) }
func (*GraphMarker) ProtoMessage()               {}
func (*GraphMarker) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GraphMarker) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GraphMarker) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GraphMarker) GetPercentile() int64 {
	if m != nil {
		return m.Percentile
	}
	return 0
}

// A request for submitting data for a report
type ReportDataRequest struct {
	// The LMI category to submit the report data to.
	Category Category `protobuf:"varint,4,opt,name=category,enum=executivereport.v1.Category" json:"category,omitempty"`
	// The frequency of the report, e.g. monthly or weekly
	Frequency ReportFrequency `protobuf:"varint,5,opt,name=frequency,enum=executivereport.v1.ReportFrequency" json:"frequency,omitempty"`
	// This is a set of data for an app for their report for a week or month.
	ReportData []*ReportData `protobuf:"bytes,6,rep,name=report_data,json=reportData" json:"report_data,omitempty"`
	// A date equal to the first day of the month if frequency is MONTHLY
	// or last day of the week (Sunday) if frequency is WEEKLY
	// ie: MONTHLY would be: 2017-04-01.
	// WEEKLY would be 2017-04-23 (the Sunday)
	ReportDate *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=report_date,json=reportDate" json:"report_date,omitempty"`
	// The unique identifier of the app.
	MarketplaceAppId string `protobuf:"bytes,8,opt,name=marketplace_app_id,json=marketplaceAppId" json:"marketplace_app_id,omitempty"`
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,9,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (m *ReportDataRequest) Reset()                    { *m = ReportDataRequest{} }
func (m *ReportDataRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportDataRequest) ProtoMessage()               {}
func (*ReportDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ReportDataRequest) GetCategory() Category {
	if m != nil {
		return m.Category
	}
	return Category_NOT_SPECIFIED
}

func (m *ReportDataRequest) GetFrequency() ReportFrequency {
	if m != nil {
		return m.Frequency
	}
	return ReportFrequency_FREQUENCY_NOT_SPECIFIED
}

func (m *ReportDataRequest) GetReportData() []*ReportData {
	if m != nil {
		return m.ReportData
	}
	return nil
}

func (m *ReportDataRequest) GetReportDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ReportDate
	}
	return nil
}

func (m *ReportDataRequest) GetMarketplaceAppId() string {
	if m != nil {
		return m.MarketplaceAppId
	}
	return ""
}

func (m *ReportDataRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

// A request for listing all report data in a category
type ListReportDataRequest struct {
	// The LMI category to submit the report data to.
	Category Category `protobuf:"varint,3,opt,name=category,enum=executivereport.v1.Category" json:"category,omitempty"`
	// The frequency of the report, e.g. monthly or weekly
	Frequency ReportFrequency `protobuf:"varint,4,opt,name=frequency,enum=executivereport.v1.ReportFrequency" json:"frequency,omitempty"`
	// current cursor position
	Cursor string `protobuf:"bytes,5,opt,name=cursor" json:"cursor,omitempty"`
	// size of the page to list
	// 0 assumes the default page size
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,7,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
	// A date equal to the first day of the month if frequency is MONTHLY
	// or last day of the week (Sunday) if frequency is WEEKLY
	// ie: MONTHLY would be: 2017-04-01.
	// WEEKLY would be 2017-04-23 (the Sunday)
	ReportDate *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=report_date,json=reportDate" json:"report_date,omitempty"`
}

func (m *ListReportDataRequest) Reset()                    { *m = ListReportDataRequest{} }
func (m *ListReportDataRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReportDataRequest) ProtoMessage()               {}
func (*ListReportDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListReportDataRequest) GetCategory() Category {
	if m != nil {
		return m.Category
	}
	return Category_NOT_SPECIFIED
}

func (m *ListReportDataRequest) GetFrequency() ReportFrequency {
	if m != nil {
		return m.Frequency
	}
	return ReportFrequency_FREQUENCY_NOT_SPECIFIED
}

func (m *ListReportDataRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListReportDataRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListReportDataRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

func (m *ListReportDataRequest) GetReportDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ReportDate
	}
	return nil
}

// The report data and meta data for a product
type ProductReportEntity struct {
	// The data for a product
	Data []*ReportData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	// The unique identifier of the app.
	MarketplaceAppId string `protobuf:"bytes,3,opt,name=marketplace_app_id,json=marketplaceAppId" json:"marketplace_app_id,omitempty"`
}

func (m *ProductReportEntity) Reset()                    { *m = ProductReportEntity{} }
func (m *ProductReportEntity) String() string            { return proto.CompactTextString(m) }
func (*ProductReportEntity) ProtoMessage()               {}
func (*ProductReportEntity) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ProductReportEntity) GetData() []*ReportData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ProductReportEntity) GetMarketplaceAppId() string {
	if m != nil {
		return m.MarketplaceAppId
	}
	return ""
}

// Response of the requested report data for a category
type ListReportDataPagedResponse struct {
	// The report data for a category
	ReportData []*ProductReportEntity `protobuf:"bytes,1,rep,name=report_data,json=reportData" json:"report_data,omitempty"`
	// A cursor that can be provided to retrieve the next page of results
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *ListReportDataPagedResponse) Reset()                    { *m = ListReportDataPagedResponse{} }
func (m *ListReportDataPagedResponse) String() string            { return proto.CompactTextString(m) }
func (*ListReportDataPagedResponse) ProtoMessage()               {}
func (*ListReportDataPagedResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ListReportDataPagedResponse) GetReportData() []*ProductReportEntity {
	if m != nil {
		return m.ReportData
	}
	return nil
}

func (m *ListReportDataPagedResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListReportDataPagedResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// Request for reports for a certain timeframe for an account group
type ListReportDatesRequest struct {
	// The unique identifier of the account group.
	AccountGroupId string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
	// Frequency allows for choosing Which report frequency to get report dates for.
	Frequency ReportFrequency `protobuf:"varint,2,opt,name=frequency,enum=executivereport.v1.ReportFrequency" json:"frequency,omitempty"`
	// next cursor position
	Cursor string `protobuf:"bytes,3,opt,name=cursor" json:"cursor,omitempty"`
	// size of the page to list
	// 0 assumes the default page size
	PageSize int64 `protobuf:"varint,4,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *ListReportDatesRequest) Reset()                    { *m = ListReportDatesRequest{} }
func (m *ListReportDatesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReportDatesRequest) ProtoMessage()               {}
func (*ListReportDatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ListReportDatesRequest) GetAccountGroupId() string {
	if m != nil {
		return m.AccountGroupId
	}
	return ""
}

func (m *ListReportDatesRequest) GetFrequency() ReportFrequency {
	if m != nil {
		return m.Frequency
	}
	return ReportFrequency_FREQUENCY_NOT_SPECIFIED
}

func (m *ListReportDatesRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListReportDatesRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// Response of the requested reports for the year
type ListReportDatesResponse struct {
	// All weekly/monthly reports for an account group
	ReportDates []*google_protobuf.Timestamp `protobuf:"bytes,1,rep,name=report_dates,json=reportDates" json:"report_dates,omitempty"`
	// Whether there is data in the next year
	HasNext bool `protobuf:"varint,2,opt,name=has_next,json=hasNext" json:"has_next,omitempty"`
	// Whether there is data in the previous year
	HasPrev bool `protobuf:"varint,3,opt,name=has_prev,json=hasPrev" json:"has_prev,omitempty"`
	// The cursor to get the next set of report data dates
	NextCursor string `protobuf:"bytes,4,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// The cursor to get the previous set of report data dates
	PrevCursor string `protobuf:"bytes,5,opt,name=prev_cursor,json=prevCursor" json:"prev_cursor,omitempty"`
}

func (m *ListReportDatesResponse) Reset()                    { *m = ListReportDatesResponse{} }
func (m *ListReportDatesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListReportDatesResponse) ProtoMessage()               {}
func (*ListReportDatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ListReportDatesResponse) GetReportDates() []*google_protobuf.Timestamp {
	if m != nil {
		return m.ReportDates
	}
	return nil
}

func (m *ListReportDatesResponse) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

func (m *ListReportDatesResponse) GetHasPrev() bool {
	if m != nil {
		return m.HasPrev
	}
	return false
}

func (m *ListReportDatesResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListReportDatesResponse) GetPrevCursor() string {
	if m != nil {
		return m.PrevCursor
	}
	return ""
}

func init() {
	proto.RegisterType((*ReportData)(nil), "executivereport.v1.ReportData")
	proto.RegisterType((*ListItem)(nil), "executivereport.v1.ListItem")
	proto.RegisterType((*BarChart)(nil), "executivereport.v1.BarChart")
	proto.RegisterType((*GraphMarker)(nil), "executivereport.v1.GraphMarker")
	proto.RegisterType((*ReportDataRequest)(nil), "executivereport.v1.ReportDataRequest")
	proto.RegisterType((*ListReportDataRequest)(nil), "executivereport.v1.ListReportDataRequest")
	proto.RegisterType((*ProductReportEntity)(nil), "executivereport.v1.ProductReportEntity")
	proto.RegisterType((*ListReportDataPagedResponse)(nil), "executivereport.v1.ListReportDataPagedResponse")
	proto.RegisterType((*ListReportDatesRequest)(nil), "executivereport.v1.ListReportDatesRequest")
	proto.RegisterType((*ListReportDatesResponse)(nil), "executivereport.v1.ListReportDatesResponse")
	proto.RegisterEnum("executivereport.v1.Category", Category_name, Category_value)
	proto.RegisterEnum("executivereport.v1.Color", Color_name, Color_value)
	proto.RegisterEnum("executivereport.v1.ReportFrequency", ReportFrequency_name, ReportFrequency_value)
	proto.RegisterEnum("executivereport.v1.ReportData_TemplateType", ReportData_TemplateType_name, ReportData_TemplateType_value)
	proto.RegisterEnum("executivereport.v1.ReportData_Format", ReportData_Format_name, ReportData_Format_value)
	proto.RegisterEnum("executivereport.v1.ReportData_Width", ReportData_Width_name, ReportData_Width_value)
	proto.RegisterEnum("executivereport.v1.ReportData_Grade", ReportData_Grade_name, ReportData_Grade_value)
}

func init() { proto.RegisterFile("executive_report/v1/executive_report.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x72, 0xdb, 0xb6,
	0x16, 0x0e, 0xf5, 0x4b, 0x1d, 0xc9, 0x36, 0x82, 0xdc, 0xeb, 0x30, 0x3f, 0x13, 0xfb, 0xea, 0xe6,
	0xce, 0xf5, 0xb8, 0x1d, 0xbb, 0x71, 0x17, 0x6d, 0xda, 0x49, 0x3b, 0x14, 0x0d, 0xc9, 0x9c, 0xd0,
	0x94, 0x02, 0x51, 0x75, 0xbd, 0xe2, 0xd0, 0x14, 0x2c, 0x73, 0x2a, 0x89, 0x0c, 0x09, 0x39, 0x76,
	0x96, 0x5d, 0x76, 0xdb, 0x47, 0xe8, 0xaa, 0xbb, 0xae, 0xfb, 0x14, 0x7d, 0x8a, 0x2e, 0x3b, 0xd3,
	0x37, 0xe8, 0x00, 0xa4, 0x22, 0xc9, 0x96, 0x93, 0x34, 0x5d, 0x11, 0xe7, 0xe0, 0x3b, 0xe0, 0xf9,
	0xfb, 0x70, 0x00, 0xdb, 0xec, 0x82, 0xf9, 0x13, 0x1e, 0x9c, 0x33, 0x37, 0x66, 0x51, 0x18, 0xf3,
	0xdd, 0xf3, 0x27, 0xbb, 0x57, 0x75, 0x3b, 0x51, 0x1c, 0xf2, 0x10, 0xe3, 0x37, 0xfa, 0x4c, 0x7d,
	0xfe, 0xe4, 0xfe, 0xc6, 0x20, 0x0c, 0x07, 0x43, 0xb6, 0x2b, 0x11, 0x27, 0x93, 0xd3, 0x5d, 0x1e,
	0x8c, 0x58, 0xc2, 0xbd, 0x51, 0x94, 0x1a, 0xd5, 0xff, 0x28, 0x03, 0x50, 0x09, 0xdf, 0xf7, 0xb8,
	0x87, 0x3b, 0xb0, 0xc2, 0xd9, 0x28, 0x1a, 0x7a, 0x9c, 0xb9, 0xfc, 0x32, 0x62, 0x9a, 0xb2, 0xa9,
	0x6c, 0xad, 0xee, 0x7d, 0xb4, 0x73, 0xfd, 0xec, 0x9d, 0x99, 0xd9, 0x8e, 0x93, 0xd9, 0x38, 0x97,
	0x11, 0xa3, 0x35, 0x3e, 0x27, 0xe1, 0x07, 0x50, 0x99, 0x8c, 0x83, 0x97, 0x13, 0xe6, 0x06, 0x7d,
	0x2d, 0xb7, 0xa9, 0x6c, 0x55, 0xa8, 0x9a, 0x2a, 0xcc, 0x3e, 0xfe, 0x17, 0x14, 0x79, 0xc0, 0x87,
	0x4c, 0xcb, 0xcb, 0x8d, 0x54, 0xc0, 0x9b, 0x50, 0xed, 0xb3, 0xc4, 0x8f, 0x83, 0x88, 0x07, 0xe1,
	0x58, 0x2b, 0xc8, 0xbd, 0x79, 0x95, 0xb0, 0x3b, 0xf7, 0x86, 0x13, 0xa6, 0x15, 0x53, 0x3b, 0x29,
	0xe0, 0x75, 0x28, 0xf9, 0x67, 0xde, 0x78, 0xc0, 0xb4, 0x92, 0x54, 0x67, 0x12, 0x7e, 0x06, 0xa5,
	0xd3, 0x30, 0x1e, 0x79, 0x5c, 0x2b, 0xcb, 0x68, 0xfe, 0xf7, 0x8e, 0x68, 0x9a, 0x12, 0x4c, 0x33,
	0x23, 0xfc, 0x10, 0x2a, 0x51, 0xcc, 0xfc, 0x20, 0x11, 0xce, 0xa8, 0x9b, 0xca, 0x56, 0x9e, 0xce,
	0x14, 0xf8, 0x0b, 0x28, 0xbe, 0x0a, 0xfa, 0xfc, 0x4c, 0xab, 0xc8, 0xb3, 0x1f, 0xbf, 0xe3, 0xec,
	0x23, 0x81, 0xa5, 0xa9, 0x09, 0xbe, 0x07, 0xea, 0x98, 0x5d, 0x70, 0x77, 0x12, 0x0f, 0x35, 0x90,
	0x2e, 0x97, 0x85, 0xdc, 0x8b, 0x87, 0xf8, 0x31, 0xac, 0x4e, 0xb7, 0xdc, 0xa1, 0x77, 0xc2, 0x86,
	0x5a, 0x55, 0x02, 0x6a, 0x19, 0xc0, 0x12, 0x3a, 0xfc, 0x09, 0x14, 0x86, 0x41, 0xc2, 0xb5, 0xda,
	0x66, 0x7e, 0xab, 0xba, 0xf7, 0x70, 0xd9, 0xbf, 0xad, 0x20, 0xe1, 0x26, 0x67, 0x23, 0x2a, 0x91,
	0xf8, 0x29, 0x54, 0x4e, 0xbc, 0xd8, 0xf5, 0xcf, 0xbc, 0x98, 0x6b, 0x2b, 0x37, 0x9b, 0x35, 0xbc,
	0xd8, 0x10, 0x18, 0xaa, 0x9e, 0x64, 0x2b, 0xfc, 0x19, 0x94, 0x46, 0x5e, 0xfc, 0x1d, 0x8b, 0xb5,
	0x55, 0x69, 0xb7, 0xb1, 0xcc, 0xae, 0x15, 0x7b, 0xd1, 0xd9, 0xa1, 0x84, 0xd1, 0x0c, 0x2e, 0x52,
	0x34, 0x88, 0xbd, 0x3e, 0xd3, 0xd6, 0xde, 0x2b, 0x45, 0x2d, 0x81, 0xa5, 0xa9, 0x49, 0xfd, 0x67,
	0x05, 0x6a, 0xf3, 0xdd, 0x85, 0x6f, 0xc3, 0x8a, 0xdd, 0x76, 0xdc, 0x6e, 0x87, 0x18, 0x66, 0xd3,
	0x24, 0xfb, 0xe8, 0x16, 0x5e, 0x07, 0x6c, 0xf7, 0x0e, 0x1b, 0x84, 0xba, 0x47, 0xa6, 0x73, 0xe0,
	0x1a, 0x07, 0xba, 0xdd, 0x22, 0x48, 0xc1, 0x18, 0x56, 0x0d, 0xdd, 0xb2, 0x5c, 0xa7, 0xed, 0xea,
	0x86, 0x63, 0xb6, 0x6d, 0x94, 0xc3, 0xab, 0x00, 0x0d, 0xbd, 0x6b, 0x1a, 0xae, 0x65, 0x76, 0x1d,
	0x94, 0xc7, 0x2b, 0x50, 0x31, 0xed, 0x66, 0x3b, 0x15, 0x0b, 0x42, 0x6c, 0xe8, 0x54, 0x1c, 0x41,
	0x1d, 0x54, 0xc4, 0x08, 0x6a, 0x29, 0x3a, 0x3d, 0x1f, 0x95, 0xf0, 0x7d, 0x58, 0x77, 0x0e, 0x08,
	0x3d, 0x6c, 0x1f, 0x12, 0x67, 0xfa, 0xc3, 0x16, 0xd5, 0xf7, 0x09, 0x2a, 0xd7, 0x9f, 0x42, 0x29,
	0x6d, 0x1d, 0x0c, 0x50, 0xca, 0x2c, 0x6e, 0xe1, 0x2a, 0x94, 0x3b, 0x84, 0x1a, 0xc4, 0x76, 0x90,
	0x82, 0x55, 0x28, 0x38, 0xe6, 0x21, 0x41, 0x79, 0x5c, 0x03, 0xb5, 0x49, 0x33, 0xb7, 0x0a, 0xf5,
	0x2d, 0x28, 0xca, 0xce, 0x10, 0x80, 0x03, 0xdd, 0x6a, 0xa2, 0x5b, 0x62, 0xd5, 0xec, 0x59, 0x16,
	0x52, 0xc4, 0x09, 0x2f, 0x7a, 0x3a, 0x75, 0x08, 0x45, 0xb9, 0xfa, 0x57, 0x50, 0x94, 0x09, 0x12,
	0xd1, 0xd9, 0x6d, 0x9b, 0x2c, 0x64, 0xa2, 0x08, 0x8a, 0x8e, 0x14, 0xf1, 0x69, 0xa0, 0x9c, 0xf8,
	0x18, 0x28, 0x2f, 0x3e, 0xfb, 0xa8, 0x20, 0x3e, 0x4d, 0x54, 0xac, 0xff, 0xa9, 0x80, 0x3a, 0xed,
	0x09, 0xc1, 0x98, 0x33, 0xe6, 0xf5, 0x59, 0x2c, 0x79, 0x5e, 0xa1, 0x99, 0x84, 0x31, 0x14, 0x4e,
	0xc2, 0xfe, 0x65, 0xc6, 0x57, 0xb9, 0x16, 0xd8, 0xd3, 0x30, 0xe4, 0x2c, 0xce, 0xc8, 0x9a, 0x49,
	0x82, 0xe0, 0xc1, 0xf8, 0x34, 0x74, 0x39, 0xbb, 0xe0, 0x19, 0x57, 0x55, 0xa1, 0x70, 0xd8, 0x05,
	0xc7, 0x3a, 0xac, 0xbd, 0xd9, 0x74, 0xfd, 0x70, 0x18, 0xc6, 0x92, 0xb2, 0xab, 0x7b, 0xf7, 0x96,
	0x35, 0x81, 0x21, 0x00, 0x74, 0x65, 0x6a, 0x2d, 0x45, 0xc1, 0x84, 0xd9, 0x11, 0x81, 0x1f, 0x8e,
	0x33, 0x76, 0xd7, 0xa6, 0x30, 0xd3, 0x0f, 0xc7, 0xd2, 0x8b, 0x91, 0x37, 0x60, 0x92, 0x4b, 0xe5,
	0xcc, 0x0b, 0xa1, 0xe8, 0xc5, 0xc3, 0xfa, 0x8f, 0x0a, 0xa8, 0xd3, 0x86, 0x16, 0x77, 0x47, 0x4a,
	0xa8, 0x34, 0xe4, 0x54, 0x98, 0xdd, 0x28, 0xb9, 0xf9, 0x1b, 0xe5, 0x3f, 0x50, 0x3b, 0x0d, 0x86,
	0x43, 0x37, 0x62, 0xb1, 0xcf, 0xc6, 0x5c, 0x46, 0x9e, 0xa7, 0x55, 0xa1, 0xeb, 0xa4, 0x2a, 0xfc,
	0x39, 0x80, 0x84, 0xa4, 0xc1, 0x15, 0xde, 0x15, 0x5c, 0x45, 0x80, 0xe5, 0xb2, 0x7e, 0x0c, 0xd5,
	0x39, 0xb6, 0xdc, 0xec, 0x57, 0xe2, 0x87, 0x71, 0xea, 0x57, 0x8e, 0xa6, 0x02, 0x7e, 0x04, 0x90,
	0xb9, 0x14, 0x64, 0x97, 0x67, 0x9e, 0xce, 0x69, 0xea, 0xbf, 0xe7, 0xe0, 0xf6, 0x8c, 0x51, 0x94,
	0xbd, 0x9c, 0xb0, 0x44, 0xb8, 0xaa, 0xfa, 0x1e, 0x67, 0x83, 0x30, 0xbe, 0xcc, 0x1c, 0x5d, 0x4a,
	0x7d, 0x23, 0xc3, 0xd0, 0x37, 0x68, 0xac, 0x43, 0xe5, 0x34, 0x16, 0xa7, 0x8c, 0xfd, 0xcb, 0xac,
	0x80, 0xff, 0xbd, 0x99, 0xc5, 0xcd, 0x29, 0x94, 0xce, 0xac, 0xf0, 0xd7, 0x50, 0x4d, 0x71, 0x6e,
	0xdf, 0xe3, 0x9e, 0x56, 0x92, 0x57, 0xc8, 0xa3, 0xb7, 0x5f, 0x05, 0x14, 0xe2, 0xd9, 0x68, 0xfa,
	0x72, 0xfe, 0x00, 0x26, 0x6b, 0x5c, 0xdd, 0xbb, 0xbf, 0x93, 0x0e, 0xb8, 0x9d, 0xe9, 0x80, 0xdb,
	0x71, 0xa6, 0x03, 0x6e, 0xce, 0x98, 0xe1, 0x8f, 0x01, 0xcb, 0xcb, 0x88, 0x47, 0x43, 0xcf, 0x67,
	0xae, 0x17, 0x45, 0x62, 0x1c, 0xa9, 0x32, 0xd3, 0x68, 0x6e, 0x47, 0x8f, 0x22, 0xb3, 0x8f, 0xb7,
	0x00, 0x79, 0xbe, 0x1f, 0x4e, 0xc6, 0xdc, 0x1d, 0xc4, 0xe1, 0x44, 0x62, 0x2b, 0x12, 0xbb, 0x9a,
	0xe9, 0x5b, 0x42, 0x6d, 0xf6, 0xeb, 0xbf, 0xe4, 0xe0, 0xdf, 0x82, 0x4d, 0x6f, 0x4f, 0x76, 0xfe,
	0xc3, 0x93, 0x5d, 0xf8, 0xa0, 0x64, 0x8b, 0x49, 0x38, 0x89, 0x93, 0x8c, 0x6d, 0x62, 0x12, 0x4a,
	0x49, 0xb0, 0x24, 0x12, 0x24, 0x49, 0x82, 0xd7, 0xe9, 0x90, 0xcc, 0x53, 0x55, 0x28, 0xba, 0xc1,
	0x6b, 0xb6, 0x34, 0xea, 0xf2, 0xb2, 0xa8, 0xaf, 0x96, 0x42, 0xfd, 0x3b, 0xa5, 0xa8, 0xbf, 0x82,
	0x3b, 0x9d, 0x38, 0xec, 0x4f, 0xfc, 0x2c, 0x69, 0x64, 0xcc, 0x03, 0x7e, 0x89, 0xf7, 0xa0, 0x20,
	0x1b, 0x43, 0x79, 0xaf, 0xc6, 0x90, 0xd8, 0x1b, 0xaa, 0x9a, 0x5f, 0x5e, 0xd5, 0xfa, 0x4f, 0x0a,
	0x3c, 0x58, 0xac, 0x55, 0xc7, 0x1b, 0xb0, 0x3e, 0x65, 0x49, 0x14, 0x8e, 0x13, 0x86, 0x0f, 0x16,
	0x3b, 0x34, 0x75, 0xe4, 0xff, 0xcb, 0x1c, 0x59, 0xe2, 0xff, 0x42, 0xab, 0x6e, 0x40, 0x55, 0x0e,
	0xef, 0xac, 0x06, 0xe9, 0x95, 0x02, 0x42, 0x65, 0xa4, 0x75, 0xb8, 0x07, 0xea, 0x99, 0x97, 0xb8,
	0x23, 0x41, 0x6c, 0xe1, 0xae, 0x4a, 0xcb, 0x67, 0x5e, 0x72, 0x18, 0xc6, 0xac, 0xfe, 0xab, 0x02,
	0xeb, 0x0b, 0x5e, 0xb2, 0x64, 0xda, 0x52, 0xcb, 0x0a, 0xa4, 0x2c, 0x2d, 0xd0, 0x42, 0x0b, 0xe5,
	0xfe, 0x61, 0x0b, 0xe5, 0x6f, 0x6e, 0xa1, 0xc2, 0x62, 0x0b, 0xd5, 0x7f, 0x53, 0xe0, 0xee, 0x35,
	0xe7, 0xb3, 0xf4, 0x3e, 0x83, 0xda, 0x5c, 0xd3, 0x24, 0x59, 0x7e, 0xdf, 0xd6, 0x35, 0xd5, 0x59,
	0xd7, 0x24, 0xd3, 0x94, 0x89, 0x24, 0xca, 0x88, 0xd2, 0x94, 0xd9, 0x62, 0xc8, 0x64, 0x5b, 0x51,
	0xcc, 0xce, 0xe7, 0xb2, 0xd9, 0x89, 0xd9, 0xf9, 0xd5, 0x4a, 0x14, 0xae, 0x55, 0x62, 0x03, 0xaa,
	0xc2, 0xce, 0x5d, 0xa0, 0x0b, 0x08, 0x55, 0x0a, 0xd8, 0xfe, 0x41, 0x01, 0x75, 0x4a, 0xd2, 0x65,
	0x8f, 0x8f, 0x1a, 0xa8, 0xe2, 0xed, 0x60, 0xda, 0xad, 0x2e, 0x52, 0xc4, 0xf3, 0x82, 0x92, 0x4e,
	0xcf, 0xd1, 0xb3, 0xe7, 0x06, 0x40, 0xa9, 0xdb, 0x36, 0x4c, 0xdd, 0x42, 0x79, 0x31, 0xc6, 0x8f,
	0x48, 0xa3, 0x6b, 0x3a, 0x04, 0x15, 0x70, 0x19, 0xf2, 0x5d, 0xd2, 0x46, 0x45, 0xbc, 0x06, 0x55,
	0x7d, 0xff, 0x1b, 0x42, 0x1d, 0xb3, 0x6b, 0xda, 0xad, 0xf4, 0x85, 0x61, 0xb4, 0x6d, 0x87, 0xd8,
	0x8e, 0xab, 0xdb, 0xfb, 0x2e, 0xf9, 0xb6, 0x43, 0xa8, 0x49, 0x6c, 0x83, 0xa0, 0xf2, 0xf6, 0xf7,
	0x0a, 0x14, 0xd3, 0xa9, 0x78, 0x17, 0xee, 0x18, 0x6d, 0xab, 0x4d, 0xdd, 0xab, 0xfe, 0x54, 0xa0,
	0xd8, 0xb0, 0x74, 0xe3, 0x39, 0x52, 0xc4, 0xf2, 0xe8, 0x40, 0xfc, 0x2e, 0x27, 0x1e, 0x13, 0x2d,
	0xaa, 0x1f, 0xa3, 0xbc, 0xf8, 0x31, 0x25, 0xe2, 0x3d, 0x50, 0x81, 0x62, 0x8b, 0x12, 0x62, 0xa3,
	0xa2, 0xd8, 0x6d, 0x58, 0x3d, 0x82, 0x4a, 0xc2, 0xdf, 0x63, 0x62, 0x59, 0xed, 0x23, 0x54, 0x16,
	0xeb, 0x4e, 0x8f, 0x76, 0x2c, 0x82, 0x54, 0xb1, 0x6e, 0x53, 0xf9, 0xac, 0xaa, 0x6c, 0xb7, 0x60,
	0xed, 0x4a, 0xdf, 0xe0, 0x07, 0x70, 0xb7, 0x49, 0xc9, 0x8b, 0x1e, 0xb1, 0x8d, 0xe3, 0x6b, 0x1e,
	0x01, 0x94, 0x8e, 0x08, 0x79, 0x6e, 0x1d, 0xa7, 0x4f, 0x99, 0xc3, 0xb6, 0xed, 0x1c, 0x58, 0xc7,
	0x28, 0x77, 0x52, 0x92, 0x35, 0xff, 0xf4, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x62, 0x1f,
	0xe3, 0xe5, 0x0c, 0x00, 0x00,
}
