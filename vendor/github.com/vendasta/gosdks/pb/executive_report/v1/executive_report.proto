syntax = "proto3";

package executivereport.v1;

import "google/protobuf/timestamp.proto";

// LMI categories to push data to for the Executive Report. Categories have their own heading in the report.
enum Category {
    NOT_SPECIFIED = 0;
    LISTINGS = 1;
    REPUTATION = 2;
    SOCIAL = 3;
    WEBSITE = 4;
    SEO = 5;
    ADVERTISING = 6;
    CONTENT_AND_EXPERIENCE = 7;
}

// Available colors to choose from for certain fields, eg right_info_text_color in an INFO_LIST template
enum Color {
    COLOR_NOT_SPECIFIED = 0;
    BLACK = 1;
    WHITE = 2;
    GRAY = 3;
    RED = 4;
    GREEN = 5;
    BLUE = 6;
    YELLOW = 7;
    PURPLE = 8;
    ORANGE = 9;
}

// The frequency type of a report (types for whether the report is a weekly or monthly report)
// NOT_SPECIFIED is the default, and will error in the microservice.
enum ReportFrequency {
    FREQUENCY_NOT_SPECIFIED = 0;
    WEEKLY = 1;
    MONTHLY = 2;
}

// This is a single piece for an app for their report for a week or month.
message ReportData {
    // Executive Report template types
    enum TemplateType {
        // Results in an error when creating report data (to avoid defaulting to number_with_change)
        NOT_SPECIFIED = 0;
        // A template type to display a number value with an optional change value.
        NUMBER_WITH_CHANGE = 1;
        // A template type to display a call to action for a marketplace app
        CALL_TO_ACTION = 2;
        // A basic list has a header, body and footer for each element in the list. A header or body is the minimum requirement,
        BASIC_LIST = 3;
        // An info list has the same as the BASIC_LIST, plus info text, color, and icon to be displayed in the top right-most column of the template;
        // as well as an icon url for the left-most column of the template
        INFO_LIST = 4;
        // A template type to display horizontal bar graphs with a specified fill percentage, a label on the left side, and a value on the right. The
        // fill percentage and label are the minimum requirement.
        BAR_CHART = 5;
        // A number template to display just a number with a title and description.
        BASIC_NUMBER = 6;
        // A template type to display the letter grade and the specific score with change. Also a thermometer graph is shown that can display
        // multiple data points (starting score, industry average and 95th percentile) for comparison reasons, the graph is split up into
        // 5 sections depending on the percentile scores representing the grade values A, B, C, D and F
        THERMOMETER_WITH_GRADE = 7;
    }

    // The accepted formats for a value
    enum Format {
        NUMBER = 0;
        PERCENT = 1;
        TIME = 3;
        FRACTION = 4;
    }

    // How much space (width) a template card will take up.
    enum Width {
        HALF = 0;
        FULL = 1;
        QUARTER = 2;
    }

    // Calculated grade
    enum Grade {
        NONE_SPECIFIED = 0;
        A = 1;
        B = 2;
        C = 3;
        D = 4;
        F = 5;
    }

    // The type of template, e.g. BigNumber
    TemplateType template_type = 1;
    // A unique identifier of the report
    string unique_id = 2;
    // The title of the data
    string title = 3;
    // A description of the data
    string description = 4;
    // The value of the data
    string value = 5;
    // How much the value has changed from the last report, A negative value is a decrease in the performance of
    // the stat (bad), and a positive value is an increase in the performance (good).
    string change = 6;
    // How the data is formatted, such as percent or number.
    Format format = 7;
    // How precise the value is
    int64 precision = 8;
    // How wide the display of the template card is
    Width width = 9;
    // The relative link path used when linking out of the executive report
    string next_url = 10;
    // The text label used for the next_url button
    string next_url_label = 11;
    // Data for a list template type
    repeated ListItem list = 12;
    // Data for a bar graph template type
    repeated BarChart bar_chart = 13;
    // Markers for a graph template type
    repeated GraphMarker marker = 14;
    // the calculated grade
    Grade grade = 15;
}

// An item in a list
message ListItem {
    // A header of a list item, optional if a body exists
    string header = 1;
    // The body of a list item. optional if the header exists
    string body = 2;
    // The footer of a list item. always optional
    string footer = 3;
    // The informational text displayed in the top right-most column of the list item
    string info_text = 4;
    // The color of the info_text
    Color info_text_color = 5;
    // The icon to be displayed inline after the info_text
    string info_text_icon = 6;
    // The url of the icon image displayed in the left most column of the list item
    string image_url = 7;
}

// An item in a bar chart
message BarChart {
    // The label on the left of the bar
    string label = 1;
    // The value displayed on the right of the bar
    string value = 2;
    // The percentage of the bar that will be filled with color
    int64 fill_percent = 3;
    // The color of the bar
    Color fill_color = 4;
}

// GraphMarker to highlight a significant value on a graph
message GraphMarker {
    string label = 1;
    float score = 2;
    int64 percentile = 3;
}

// A request for submitting data for a report
message ReportDataRequest {
    // The LMI category to submit the report data to.
    Category category = 4;
    // The frequency of the report, e.g. monthly or weekly
    ReportFrequency frequency = 5;
    // This is a set of data for an app for their report for a week or month.
    repeated ReportData report_data = 6;
    // A date equal to the first day of the month if frequency is MONTHLY
    // or last day of the week (Sunday) if frequency is WEEKLY
    // ie: MONTHLY would be: 2017-04-01.
    // WEEKLY would be 2017-04-23 (the Sunday)
    google.protobuf.Timestamp report_date = 7;
    // The unique identifier of the app.
    string marketplace_app_id = 8;
    // The unique identifier of the account group.
    string account_group_id = 9;
}

// A request for listing all report data in a category
message ListReportDataRequest {
    // The LMI category to submit the report data to.
    Category category = 3;
    // The frequency of the report, e.g. monthly or weekly
    ReportFrequency frequency = 4;
    // current cursor position
    string cursor = 5;
    // size of the page to list
    // 0 assumes the default page size
    int64 page_size = 6;
    // The unique identifier of the account group.
    string account_group_id = 7;
    // A date equal to the first day of the month if frequency is MONTHLY
    // or last day of the week (Sunday) if frequency is WEEKLY
    // ie: MONTHLY would be: 2017-04-01.
    // WEEKLY would be 2017-04-23 (the Sunday)
    google.protobuf.Timestamp report_date = 8;
}

// The report data and meta data for a product
message ProductReportEntity {
    // The data for a product
    repeated ReportData data = 1;
    // The unique identifier of the app.
    string marketplace_app_id = 3;
}

// Response of the requested report data for a category
message ListReportDataPagedResponse {
    // The report data for a category
    repeated ProductReportEntity report_data = 1;
    // A cursor that can be provided to retrieve the next page of results
    string next_cursor = 2;
    // Whether or not more results exist
    bool has_more = 3;
}

// Request for reports for a certain timeframe for an account group
message ListReportDatesRequest {
    // The unique identifier of the account group.
    string account_group_id = 1;
    // Frequency allows for choosing Which report frequency to get report dates for.
    ReportFrequency frequency = 2;
    // next cursor position
    string cursor = 3;
    // size of the page to list
    // 0 assumes the default page size
    int64 page_size = 4;
}

// Response of the requested reports for the year
message ListReportDatesResponse {
    // All weekly/monthly reports for an account group
    repeated google.protobuf.Timestamp report_dates = 1;
    // Whether there is data in the next year
    bool has_next = 2;
    // Whether there is data in the previous year
    bool has_prev = 3;
    // The cursor to get the next set of report data dates
    string next_cursor = 4;
    // The cursor to get the previous set of report data dates
    string prev_cursor = 5;
}
