syntax = "proto3";

package missioncontrol.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Details about the user who committed/authored a specific git commit.
message GithubCommitUser {
    google.protobuf.Timestamp date = 1;
    string name = 2;
    string email = 3;
}

// The details of the git commit (if any)
message GitCommitDetails {
    // The user who created the content
    GithubCommitUser author = 1;

    // The user who committed the content
    GithubCommitUser committer = 2;

    // the content of the git commit message
    string message = 3;
}

// Environment represents a mission control environment that segments an application into test, demo, and production.
enum Environment {
    Test = 0;
    Demo = 1;
    Prod = 2;
}

// Metadata for paging through a list/search endpoint.
message PagedResponseMetadata {
    // A cursor that can be provided to retrieve the next page of results
    string next_cursor = 1;
    // Whether or not more results exist
    bool has_more = 2;
}

// Metadata for paging through a list/search endpoint.
message PagedRequestOptions {
    // cursor can be passed to retrieve the next page of results keyed by the cursor
    string cursor = 1;
    // page_size specifies the number of items to return in the next page
    int64 page_size = 2;
}

message Application {
    // unique identifier for the application (example: account-group)
    string app_id = 1;

    // human readable name for the application (example: Account Group)
    string app_name = 2;

    // The Github Repository URL (example: https://github.com/vendasta/account-group)
    string github_repo_url = 3;
}

// Response message for MissionControl.ListApplications
message ListApplicationsResponse {
    repeated Application applications = 1;
    PagedResponseMetadata paging_metadata = 2;
}

// Request message for MissionControl.ListApplicationsRequest
message ListApplicationsRequest {
    PagedRequestOptions paging_options = 1;
}

// Request message for MissionControl.ListImages
message ListImagesRequest {
    // The unique identifier of the application
    string application_id = 1;

    PagedRequestOptions paging_options = 2;
}

// Response message for MissionControl.ListImages
message ListImagesResponse {
    repeated Image images = 1;
}

message Image {
    // The application ID
    string application_id = 1;

    // The ID of the image
    string image_id = 2;

    // if applicable, the git hash of this deployment
    string git_hash = 3;

    // Output only - Time the deployment was created
    google.protobuf.Timestamp created = 4;

    // Optional - Google Container Builder ID that built and published this deployment
    string container_builder_id = 5;

    // Output only - Details about the provided git_hash
    GitCommitDetails git_commit_details = 6;

    // if applicable, the git branch name of this deployment
    string branch_name = 7;
}

message SetImageRequest {
    string application_id = 1; // IAM
    Environment environment = 2; // Prod
    string image_id = 3; // gcr.io/IAM:<version>
    string zone = 4; // us-central1-c
}

message SetTrafficRequest {
    string application_id = 1; // IAM
    Environment environment = 2; // Prod
    string zone = 3; // us-central1-c
    // Should this zone serve traffic for this application and environment
    bool enabled = 4;
}

message GetZonesRequest {
    string application_id = 1;
    Environment environment = 2;

    // If true, only the zones a microservice is serving traffic to will be returned, otherwise all zones a microservice
    // could be deployed to will be returned
    bool enabled = 3;
}

message GetZonesResponse {
    repeated string name = 1;
}

message GetCurrentImageRequest {
    string application_id = 1;
    Environment environment = 2;
}

message CurrentImage {
    Image image = 1;
    repeated string zone = 2;
}

message GetCurrentImageResponse {
    repeated CurrentImage images = 1;
}

service MissionControl {
    // Lists a page of applications
    rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {};

    // List images for the given application
    rpc ListImages(ListImagesRequest) returns (ListImagesResponse){};

    // Set Image for Deployment
    rpc SetImage(SetImageRequest) returns (google.protobuf.Empty) {}

    // Toggle Traffic Enabled
    rpc SetTraffic(SetTrafficRequest) returns (google.protobuf.Empty) {}

    // Get the zones a microservice is eligible for. This can be restricted to the zones that are serving traffic.
    rpc GetZones(GetZonesRequest) returns (GetZonesResponse) {}

    // Get the current image for an environment
    rpc GetCurrentImage(GetCurrentImageRequest) returns (GetCurrentImageResponse) {}
}
