// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mission_control/v1/api.proto

/*
Package missioncontrol_v1 is a generated protocol buffer package.

It is generated from these files:
	mission_control/v1/api.proto

It has these top-level messages:
	GithubCommitUser
	GitCommitDetails
	PagedResponseMetadata
	PagedRequestOptions
	Application
	ListApplicationsResponse
	ListApplicationsRequest
	ListImagesRequest
	ListImagesResponse
	Image
	SetImageRequest
	SetTrafficRequest
	GetZonesRequest
	GetZonesResponse
	GetCurrentImageRequest
	CurrentImage
	GetCurrentImageResponse
*/
package missioncontrol_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Environment represents a mission control environment that segments an application into test, demo, and production.
type Environment int32

const (
	Environment_Test Environment = 0
	Environment_Demo Environment = 1
	Environment_Prod Environment = 2
)

var Environment_name = map[int32]string{
	0: "Test",
	1: "Demo",
	2: "Prod",
}
var Environment_value = map[string]int32{
	"Test": 0,
	"Demo": 1,
	"Prod": 2,
}

func (x Environment) String() string {
	return proto.EnumName(Environment_name, int32(x))
}
func (Environment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Details about the user who committed/authored a specific git commit.
type GithubCommitUser struct {
	Date  *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	Name  string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string                     `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *GithubCommitUser) Reset()                    { *m = GithubCommitUser{} }
func (m *GithubCommitUser) String() string            { return proto.CompactTextString(m) }
func (*GithubCommitUser) ProtoMessage()               {}
func (*GithubCommitUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GithubCommitUser) GetDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *GithubCommitUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GithubCommitUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// The details of the git commit (if any)
type GitCommitDetails struct {
	// The user who created the content
	Author *GithubCommitUser `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	// The user who committed the content
	Committer *GithubCommitUser `protobuf:"bytes,2,opt,name=committer" json:"committer,omitempty"`
	// the content of the git commit message
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *GitCommitDetails) Reset()                    { *m = GitCommitDetails{} }
func (m *GitCommitDetails) String() string            { return proto.CompactTextString(m) }
func (*GitCommitDetails) ProtoMessage()               {}
func (*GitCommitDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GitCommitDetails) GetAuthor() *GithubCommitUser {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *GitCommitDetails) GetCommitter() *GithubCommitUser {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *GitCommitDetails) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Metadata for paging through a list/search endpoint.
type PagedResponseMetadata struct {
	// A cursor that can be provided to retrieve the next page of results
	NextCursor string `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *PagedResponseMetadata) Reset()                    { *m = PagedResponseMetadata{} }
func (m *PagedResponseMetadata) String() string            { return proto.CompactTextString(m) }
func (*PagedResponseMetadata) ProtoMessage()               {}
func (*PagedResponseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PagedResponseMetadata) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *PagedResponseMetadata) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// Metadata for paging through a list/search endpoint.
type PagedRequestOptions struct {
	// cursor can be passed to retrieve the next page of results keyed by the cursor
	Cursor string `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	// page_size specifies the number of items to return in the next page
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *PagedRequestOptions) Reset()                    { *m = PagedRequestOptions{} }
func (m *PagedRequestOptions) String() string            { return proto.CompactTextString(m) }
func (*PagedRequestOptions) ProtoMessage()               {}
func (*PagedRequestOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PagedRequestOptions) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *PagedRequestOptions) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type Application struct {
	// unique identifier for the application (example: account-group)
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// human readable name for the application (example: Account Group)
	AppName string `protobuf:"bytes,2,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	// The Github Repository URL (example: https://github.com/vendasta/account-group)
	GithubRepoUrl string `protobuf:"bytes,3,opt,name=github_repo_url,json=githubRepoUrl" json:"github_repo_url,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Application) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Application) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *Application) GetGithubRepoUrl() string {
	if m != nil {
		return m.GithubRepoUrl
	}
	return ""
}

// Response message for MissionControl.ListApplications
type ListApplicationsResponse struct {
	Applications   []*Application         `protobuf:"bytes,1,rep,name=applications" json:"applications,omitempty"`
	PagingMetadata *PagedResponseMetadata `protobuf:"bytes,2,opt,name=paging_metadata,json=pagingMetadata" json:"paging_metadata,omitempty"`
}

func (m *ListApplicationsResponse) Reset()                    { *m = ListApplicationsResponse{} }
func (m *ListApplicationsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationsResponse) ProtoMessage()               {}
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListApplicationsResponse) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

func (m *ListApplicationsResponse) GetPagingMetadata() *PagedResponseMetadata {
	if m != nil {
		return m.PagingMetadata
	}
	return nil
}

// Request message for MissionControl.ListApplicationsRequest
type ListApplicationsRequest struct {
	PagingOptions *PagedRequestOptions `protobuf:"bytes,1,opt,name=paging_options,json=pagingOptions" json:"paging_options,omitempty"`
}

func (m *ListApplicationsRequest) Reset()                    { *m = ListApplicationsRequest{} }
func (m *ListApplicationsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationsRequest) ProtoMessage()               {}
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListApplicationsRequest) GetPagingOptions() *PagedRequestOptions {
	if m != nil {
		return m.PagingOptions
	}
	return nil
}

// Request message for MissionControl.ListImages
type ListImagesRequest struct {
	// The unique identifier of the application
	ApplicationId string               `protobuf:"bytes,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	PagingOptions *PagedRequestOptions `protobuf:"bytes,2,opt,name=paging_options,json=pagingOptions" json:"paging_options,omitempty"`
}

func (m *ListImagesRequest) Reset()                    { *m = ListImagesRequest{} }
func (m *ListImagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListImagesRequest) ProtoMessage()               {}
func (*ListImagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListImagesRequest) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *ListImagesRequest) GetPagingOptions() *PagedRequestOptions {
	if m != nil {
		return m.PagingOptions
	}
	return nil
}

// Response message for MissionControl.ListImages
type ListImagesResponse struct {
	Images []*Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ListImagesResponse) Reset()                    { *m = ListImagesResponse{} }
func (m *ListImagesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListImagesResponse) ProtoMessage()               {}
func (*ListImagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListImagesResponse) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

type Image struct {
	// The application ID
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	// The ID of the image
	ImageId string `protobuf:"bytes,2,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	// if applicable, the git hash of this deployment
	GitHash string `protobuf:"bytes,3,opt,name=git_hash,json=gitHash" json:"git_hash,omitempty"`
	// Output only - Time the deployment was created
	Created *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	// Optional - Google Container Builder ID that built and published this deployment
	ContainerBuilderId string `protobuf:"bytes,5,opt,name=container_builder_id,json=containerBuilderId" json:"container_builder_id,omitempty"`
	// Output only - Details about the provided git_hash
	GitCommitDetails *GitCommitDetails `protobuf:"bytes,6,opt,name=git_commit_details,json=gitCommitDetails" json:"git_commit_details,omitempty"`
	// if applicable, the git branch name of this deployment
	BranchName string `protobuf:"bytes,7,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Image) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *Image) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *Image) GetGitHash() string {
	if m != nil {
		return m.GitHash
	}
	return ""
}

func (m *Image) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Image) GetContainerBuilderId() string {
	if m != nil {
		return m.ContainerBuilderId
	}
	return ""
}

func (m *Image) GetGitCommitDetails() *GitCommitDetails {
	if m != nil {
		return m.GitCommitDetails
	}
	return nil
}

func (m *Image) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

type SetImageRequest struct {
	ApplicationId string      `protobuf:"bytes,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	Environment   Environment `protobuf:"varint,2,opt,name=environment,enum=missioncontrol.v1.Environment" json:"environment,omitempty"`
	ImageId       string      `protobuf:"bytes,3,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	Zone          string      `protobuf:"bytes,4,opt,name=zone" json:"zone,omitempty"`
}

func (m *SetImageRequest) Reset()                    { *m = SetImageRequest{} }
func (m *SetImageRequest) String() string            { return proto.CompactTextString(m) }
func (*SetImageRequest) ProtoMessage()               {}
func (*SetImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetImageRequest) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *SetImageRequest) GetEnvironment() Environment {
	if m != nil {
		return m.Environment
	}
	return Environment_Test
}

func (m *SetImageRequest) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *SetImageRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type SetTrafficRequest struct {
	ApplicationId string      `protobuf:"bytes,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	Environment   Environment `protobuf:"varint,2,opt,name=environment,enum=missioncontrol.v1.Environment" json:"environment,omitempty"`
	Zone          string      `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	// Should this zone serve traffic for this application and environment
	Enabled bool `protobuf:"varint,4,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *SetTrafficRequest) Reset()                    { *m = SetTrafficRequest{} }
func (m *SetTrafficRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTrafficRequest) ProtoMessage()               {}
func (*SetTrafficRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetTrafficRequest) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *SetTrafficRequest) GetEnvironment() Environment {
	if m != nil {
		return m.Environment
	}
	return Environment_Test
}

func (m *SetTrafficRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *SetTrafficRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type GetZonesRequest struct {
	ApplicationId string      `protobuf:"bytes,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	Environment   Environment `protobuf:"varint,2,opt,name=environment,enum=missioncontrol.v1.Environment" json:"environment,omitempty"`
	// If true, only the zones a microservice is serving traffic to will be returned, otherwise all zones a microservice
	// could be deployed to will be returned
	Enabled bool `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *GetZonesRequest) Reset()                    { *m = GetZonesRequest{} }
func (m *GetZonesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetZonesRequest) ProtoMessage()               {}
func (*GetZonesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetZonesRequest) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *GetZonesRequest) GetEnvironment() Environment {
	if m != nil {
		return m.Environment
	}
	return Environment_Test
}

func (m *GetZonesRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type GetZonesResponse struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *GetZonesResponse) Reset()                    { *m = GetZonesResponse{} }
func (m *GetZonesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetZonesResponse) ProtoMessage()               {}
func (*GetZonesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetZonesResponse) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type GetCurrentImageRequest struct {
	ApplicationId string      `protobuf:"bytes,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	Environment   Environment `protobuf:"varint,2,opt,name=environment,enum=missioncontrol.v1.Environment" json:"environment,omitempty"`
}

func (m *GetCurrentImageRequest) Reset()                    { *m = GetCurrentImageRequest{} }
func (m *GetCurrentImageRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCurrentImageRequest) ProtoMessage()               {}
func (*GetCurrentImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetCurrentImageRequest) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *GetCurrentImageRequest) GetEnvironment() Environment {
	if m != nil {
		return m.Environment
	}
	return Environment_Test
}

type CurrentImage struct {
	Image *Image   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Zone  []string `protobuf:"bytes,2,rep,name=zone" json:"zone,omitempty"`
}

func (m *CurrentImage) Reset()                    { *m = CurrentImage{} }
func (m *CurrentImage) String() string            { return proto.CompactTextString(m) }
func (*CurrentImage) ProtoMessage()               {}
func (*CurrentImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CurrentImage) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *CurrentImage) GetZone() []string {
	if m != nil {
		return m.Zone
	}
	return nil
}

type GetCurrentImageResponse struct {
	Images []*CurrentImage `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *GetCurrentImageResponse) Reset()                    { *m = GetCurrentImageResponse{} }
func (m *GetCurrentImageResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCurrentImageResponse) ProtoMessage()               {}
func (*GetCurrentImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetCurrentImageResponse) GetImages() []*CurrentImage {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*GithubCommitUser)(nil), "missioncontrol.v1.GithubCommitUser")
	proto.RegisterType((*GitCommitDetails)(nil), "missioncontrol.v1.GitCommitDetails")
	proto.RegisterType((*PagedResponseMetadata)(nil), "missioncontrol.v1.PagedResponseMetadata")
	proto.RegisterType((*PagedRequestOptions)(nil), "missioncontrol.v1.PagedRequestOptions")
	proto.RegisterType((*Application)(nil), "missioncontrol.v1.Application")
	proto.RegisterType((*ListApplicationsResponse)(nil), "missioncontrol.v1.ListApplicationsResponse")
	proto.RegisterType((*ListApplicationsRequest)(nil), "missioncontrol.v1.ListApplicationsRequest")
	proto.RegisterType((*ListImagesRequest)(nil), "missioncontrol.v1.ListImagesRequest")
	proto.RegisterType((*ListImagesResponse)(nil), "missioncontrol.v1.ListImagesResponse")
	proto.RegisterType((*Image)(nil), "missioncontrol.v1.Image")
	proto.RegisterType((*SetImageRequest)(nil), "missioncontrol.v1.SetImageRequest")
	proto.RegisterType((*SetTrafficRequest)(nil), "missioncontrol.v1.SetTrafficRequest")
	proto.RegisterType((*GetZonesRequest)(nil), "missioncontrol.v1.GetZonesRequest")
	proto.RegisterType((*GetZonesResponse)(nil), "missioncontrol.v1.GetZonesResponse")
	proto.RegisterType((*GetCurrentImageRequest)(nil), "missioncontrol.v1.GetCurrentImageRequest")
	proto.RegisterType((*CurrentImage)(nil), "missioncontrol.v1.CurrentImage")
	proto.RegisterType((*GetCurrentImageResponse)(nil), "missioncontrol.v1.GetCurrentImageResponse")
	proto.RegisterEnum("missioncontrol.v1.Environment", Environment_name, Environment_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MissionControl service

type MissionControlClient interface {
	// Lists a page of applications
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// List images for the given application
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// Set Image for Deployment
	SetImage(ctx context.Context, in *SetImageRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Toggle Traffic Enabled
	SetTraffic(ctx context.Context, in *SetTrafficRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get the zones a microservice is eligible for. This can be restricted to the zones that are serving traffic.
	GetZones(ctx context.Context, in *GetZonesRequest, opts ...grpc.CallOption) (*GetZonesResponse, error)
	// Get the current image for an environment
	GetCurrentImage(ctx context.Context, in *GetCurrentImageRequest, opts ...grpc.CallOption) (*GetCurrentImageResponse, error)
}

type missionControlClient struct {
	cc *grpc.ClientConn
}

func NewMissionControlClient(cc *grpc.ClientConn) MissionControlClient {
	return &missionControlClient{cc}
}

func (c *missionControlClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := grpc.Invoke(ctx, "/missioncontrol.v1.MissionControl/ListApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionControlClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	out := new(ListImagesResponse)
	err := grpc.Invoke(ctx, "/missioncontrol.v1.MissionControl/ListImages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionControlClient) SetImage(ctx context.Context, in *SetImageRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/missioncontrol.v1.MissionControl/SetImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionControlClient) SetTraffic(ctx context.Context, in *SetTrafficRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/missioncontrol.v1.MissionControl/SetTraffic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionControlClient) GetZones(ctx context.Context, in *GetZonesRequest, opts ...grpc.CallOption) (*GetZonesResponse, error) {
	out := new(GetZonesResponse)
	err := grpc.Invoke(ctx, "/missioncontrol.v1.MissionControl/GetZones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionControlClient) GetCurrentImage(ctx context.Context, in *GetCurrentImageRequest, opts ...grpc.CallOption) (*GetCurrentImageResponse, error) {
	out := new(GetCurrentImageResponse)
	err := grpc.Invoke(ctx, "/missioncontrol.v1.MissionControl/GetCurrentImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MissionControl service

type MissionControlServer interface {
	// Lists a page of applications
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	// List images for the given application
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	// Set Image for Deployment
	SetImage(context.Context, *SetImageRequest) (*google_protobuf1.Empty, error)
	// Toggle Traffic Enabled
	SetTraffic(context.Context, *SetTrafficRequest) (*google_protobuf1.Empty, error)
	// Get the zones a microservice is eligible for. This can be restricted to the zones that are serving traffic.
	GetZones(context.Context, *GetZonesRequest) (*GetZonesResponse, error)
	// Get the current image for an environment
	GetCurrentImage(context.Context, *GetCurrentImageRequest) (*GetCurrentImageResponse, error)
}

func RegisterMissionControlServer(s *grpc.Server, srv MissionControlServer) {
	s.RegisterService(&_MissionControl_serviceDesc, srv)
}

func _MissionControl_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionControlServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/missioncontrol.v1.MissionControl/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionControlServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionControl_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionControlServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/missioncontrol.v1.MissionControl/ListImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionControlServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionControl_SetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionControlServer).SetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/missioncontrol.v1.MissionControl/SetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionControlServer).SetImage(ctx, req.(*SetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionControl_SetTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionControlServer).SetTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/missioncontrol.v1.MissionControl/SetTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionControlServer).SetTraffic(ctx, req.(*SetTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionControl_GetZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionControlServer).GetZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/missioncontrol.v1.MissionControl/GetZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionControlServer).GetZones(ctx, req.(*GetZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionControl_GetCurrentImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionControlServer).GetCurrentImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/missioncontrol.v1.MissionControl/GetCurrentImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionControlServer).GetCurrentImage(ctx, req.(*GetCurrentImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MissionControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "missioncontrol.v1.MissionControl",
	HandlerType: (*MissionControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplications",
			Handler:    _MissionControl_ListApplications_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _MissionControl_ListImages_Handler,
		},
		{
			MethodName: "SetImage",
			Handler:    _MissionControl_SetImage_Handler,
		},
		{
			MethodName: "SetTraffic",
			Handler:    _MissionControl_SetTraffic_Handler,
		},
		{
			MethodName: "GetZones",
			Handler:    _MissionControl_GetZones_Handler,
		},
		{
			MethodName: "GetCurrentImage",
			Handler:    _MissionControl_GetCurrentImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mission_control/v1/api.proto",
}

func init() { proto.RegisterFile("mission_control/v1/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc6, 0x8e, 0x63, 0x3f, 0x37, 0x89, 0x33, 0xb4, 0xa9, 0xeb, 0x22, 0x12, 0x6d, 0x69,
	0x14, 0x52, 0xc9, 0x69, 0x03, 0x12, 0x07, 0x2e, 0xb4, 0x69, 0x49, 0x83, 0x1a, 0x68, 0x37, 0xc9,
	0x05, 0x0e, 0xab, 0xb1, 0xf7, 0x65, 0x3d, 0xc8, 0xbb, 0xb3, 0xcc, 0x8c, 0x23, 0xc8, 0x8d, 0x23,
	0x77, 0xbe, 0x04, 0x88, 0x0b, 0x27, 0xae, 0x7c, 0x34, 0x34, 0x7f, 0xd6, 0x5e, 0xdb, 0x9b, 0x34,
	0x55, 0x25, 0xb8, 0xed, 0xbc, 0x79, 0xbf, 0xf7, 0x7e, 0xef, 0xef, 0x2c, 0x7c, 0x98, 0x30, 0x29,
	0x19, 0x4f, 0xc3, 0x3e, 0x4f, 0x95, 0xe0, 0xc3, 0xbd, 0x8b, 0x27, 0x7b, 0x34, 0x63, 0xdd, 0x4c,
	0x70, 0xc5, 0xc9, 0xba, 0xbb, 0x75, 0x97, 0xdd, 0x8b, 0x27, 0x9d, 0xcd, 0x98, 0xf3, 0x78, 0x88,
	0x7b, 0x46, 0xa1, 0x37, 0x3a, 0xdf, 0x53, 0x2c, 0x41, 0xa9, 0x68, 0x92, 0x59, 0x4c, 0xe7, 0xfe,
	0xac, 0x02, 0x26, 0x99, 0xfa, 0xd9, 0x5e, 0xfa, 0x43, 0x68, 0x1d, 0x32, 0x35, 0x18, 0xf5, 0x0e,
	0x78, 0x92, 0x30, 0x75, 0x26, 0x51, 0x90, 0x2e, 0x54, 0x23, 0xaa, 0xb0, 0xed, 0x6d, 0x79, 0x3b,
	0xcd, 0xfd, 0x4e, 0xd7, 0xe2, 0xbb, 0x39, 0xbe, 0x7b, 0x9a, 0x3b, 0x08, 0x8c, 0x1e, 0x21, 0x50,
	0x4d, 0x69, 0x82, 0xed, 0xc5, 0x2d, 0x6f, 0xa7, 0x11, 0x98, 0x6f, 0x72, 0x1b, 0x96, 0x30, 0xa1,
	0x6c, 0xd8, 0xae, 0x18, 0xa1, 0x3d, 0xf8, 0x7f, 0x7a, 0xc6, 0x9d, 0xf5, 0xf5, 0x1c, 0x15, 0x65,
	0x43, 0x49, 0xbe, 0x80, 0x1a, 0x1d, 0xa9, 0x01, 0x17, 0xce, 0xe1, 0x83, 0xee, 0x5c, 0x90, 0xdd,
	0x59, 0x8e, 0x81, 0x83, 0x90, 0xa7, 0xd0, 0xe8, 0x1b, 0xa9, 0x42, 0x61, 0x08, 0xdc, 0x10, 0x3f,
	0x41, 0x91, 0x36, 0x2c, 0x27, 0x28, 0x25, 0x8d, 0xd1, 0x91, 0xcd, 0x8f, 0xfe, 0x09, 0xdc, 0x79,
	0x4d, 0x63, 0x8c, 0x02, 0x94, 0x19, 0x4f, 0x25, 0x1e, 0xa3, 0xa2, 0x11, 0x55, 0x94, 0x6c, 0x42,
	0x33, 0xc5, 0x9f, 0x54, 0xd8, 0x1f, 0x09, 0xe9, 0x78, 0x37, 0x02, 0xd0, 0xa2, 0x03, 0x23, 0x21,
	0xf7, 0xa0, 0x3e, 0xa0, 0x32, 0x4c, 0xb8, 0xb0, 0x69, 0xa9, 0x07, 0xcb, 0x03, 0x2a, 0x8f, 0xb9,
	0x40, 0xff, 0x6b, 0xf8, 0xc0, 0x19, 0xfd, 0x71, 0x84, 0x52, 0x7d, 0x9b, 0x29, 0xc6, 0x53, 0x49,
	0x36, 0xa0, 0x36, 0x65, 0xcd, 0x9d, 0xc8, 0x7d, 0x68, 0x64, 0x34, 0xc6, 0x50, 0xb2, 0x4b, 0x6b,
	0xaa, 0x12, 0xd4, 0xb5, 0xe0, 0x84, 0x5d, 0xa2, 0x1f, 0x43, 0xf3, 0x69, 0x96, 0x0d, 0x59, 0x9f,
	0x6a, 0x23, 0xe4, 0x0e, 0xd4, 0x68, 0x96, 0x85, 0x2c, 0x72, 0x36, 0x96, 0x68, 0x96, 0x1d, 0x45,
	0x9a, 0x8c, 0x16, 0x17, 0x6a, 0xb4, 0x4c, 0xb3, 0xec, 0x1b, 0x5d, 0xa6, 0x6d, 0x58, 0x8b, 0x4d,
	0x6a, 0x42, 0x81, 0x19, 0x0f, 0x47, 0x22, 0x2f, 0xd8, 0x8a, 0x15, 0x07, 0x98, 0xf1, 0x33, 0x31,
	0xf4, 0xff, 0xf2, 0xa0, 0xfd, 0x8a, 0x49, 0x55, 0xf0, 0x26, 0xf3, 0xac, 0x90, 0x67, 0x70, 0x8b,
	0x16, 0xe4, 0x6d, 0x6f, 0xab, 0xb2, 0xd3, 0xdc, 0xff, 0xa8, 0xa4, 0x0c, 0x05, 0x78, 0x30, 0x85,
	0x21, 0x6f, 0x60, 0x2d, 0xa3, 0x31, 0x4b, 0xe3, 0x30, 0x71, 0x49, 0x76, 0xd5, 0xdc, 0x29, 0x31,
	0x53, 0x5a, 0x94, 0x60, 0xd5, 0x1a, 0xc8, 0xcf, 0xfe, 0x00, 0xee, 0xce, 0x53, 0x36, 0x39, 0x27,
	0xc7, 0xe0, 0x94, 0x43, 0x9e, 0xe5, 0x9c, 0xb5, 0xb3, 0xed, 0xab, 0x9d, 0x15, 0x8b, 0x15, 0xac,
	0x58, 0xb4, 0x3b, 0xfa, 0xbf, 0x7a, 0xb0, 0xae, 0x5d, 0x1d, 0x25, 0x34, 0xc6, 0xb1, 0x93, 0x87,
	0xb0, 0x5a, 0x08, 0x71, 0x52, 0x95, 0x95, 0x82, 0xf4, 0x28, 0x2a, 0xe1, 0xb2, 0xf8, 0x3e, 0x5c,
	0xbe, 0x02, 0x52, 0xa4, 0xe2, 0x4a, 0xf4, 0x18, 0x6a, 0xcc, 0x48, 0x5c, 0x71, 0xda, 0x25, 0xc6,
	0x0d, 0x24, 0x70, 0x7a, 0xfe, 0x3f, 0x8b, 0xb0, 0x64, 0x24, 0x37, 0x8d, 0xe3, 0x1e, 0xd4, 0x0d,
	0x54, 0x2b, 0xb8, 0x2e, 0x33, 0x67, 0x7b, 0x15, 0x33, 0x15, 0x0e, 0xa8, 0x1c, 0xe4, 0x23, 0x16,
	0x33, 0xf5, 0x92, 0xca, 0x01, 0xf9, 0x0c, 0x96, 0xfb, 0x02, 0xa9, 0xc2, 0xa8, 0x5d, 0x7d, 0xeb,
	0xba, 0xc9, 0x55, 0xc9, 0x63, 0xb8, 0xad, 0x89, 0x53, 0x96, 0xa2, 0x08, 0x7b, 0x23, 0x36, 0x8c,
	0x50, 0x68, 0xbf, 0x4b, 0xc6, 0x38, 0x19, 0xdf, 0x3d, 0xb3, 0x57, 0x47, 0x11, 0x79, 0x03, 0x44,
	0x53, 0xb0, 0x53, 0x1f, 0x46, 0x76, 0xf5, 0xb4, 0x6b, 0xd7, 0x2d, 0x8c, 0xa9, 0x2d, 0x15, 0xb4,
	0xe2, 0xd9, 0xbd, 0xb5, 0x09, 0xcd, 0x9e, 0xa0, 0x69, 0x7f, 0x60, 0x27, 0x6b, 0xd9, 0x2e, 0x01,
	0x2b, 0xd2, 0xc3, 0xe5, 0xff, 0xee, 0xc1, 0xda, 0x09, 0xda, 0x52, 0xbc, 0x63, 0x53, 0x7c, 0x09,
	0x4d, 0x4c, 0x2f, 0x98, 0xe0, 0x69, 0x82, 0xa9, 0x32, 0xf9, 0x5c, 0x2d, 0x9d, 0xa8, 0x17, 0x13,
	0xad, 0xa0, 0x08, 0x99, 0x2a, 0x47, 0x65, 0xba, 0x1c, 0x04, 0xaa, 0x97, 0x3c, 0x45, 0x93, 0xf0,
	0x46, 0x60, 0xbe, 0xfd, 0x3f, 0x3c, 0x58, 0x3f, 0x41, 0x75, 0x2a, 0xe8, 0xf9, 0x39, 0xeb, 0xff,
	0xe7, 0x6c, 0x73, 0x4a, 0x95, 0x09, 0x25, 0xbd, 0x97, 0x31, 0xa5, 0xbd, 0xa1, 0x6b, 0x8d, 0x7a,
	0x90, 0x1f, 0xfd, 0xdf, 0x3c, 0x58, 0x3b, 0x44, 0xf5, 0x1d, 0x4f, 0xdf, 0x79, 0xda, 0xde, 0x9f,
	0x6a, 0x81, 0x56, 0x65, 0x9a, 0xd6, 0x36, 0xb4, 0x26, 0xac, 0xdc, 0xe0, 0xe5, 0x6f, 0xa3, 0x1e,
	0x3b, 0xf7, 0x36, 0xfa, 0xbf, 0x78, 0xb0, 0x71, 0x88, 0xfa, 0xa9, 0x10, 0x98, 0xfe, 0x3f, 0xed,
	0xe1, 0x07, 0x70, 0xab, 0xe8, 0x9f, 0x74, 0x61, 0xc9, 0xb4, 0x87, 0x5b, 0x84, 0x57, 0xef, 0x07,
	0xab, 0x36, 0x2e, 0xd8, 0xa2, 0x8d, 0xcb, 0xf4, 0x50, 0x00, 0x77, 0xe7, 0xc2, 0x72, 0x69, 0xf8,
	0x7c, 0x66, 0xff, 0x6c, 0x96, 0xd8, 0x9f, 0x02, 0x3a, 0xf5, 0xdd, 0x47, 0xd0, 0x2c, 0xc4, 0x40,
	0xea, 0x50, 0x3d, 0x45, 0xa9, 0x5a, 0x0b, 0xfa, 0xeb, 0x39, 0x26, 0xbc, 0xe5, 0xe9, 0xaf, 0xd7,
	0x82, 0x47, 0xad, 0xc5, 0xfd, 0xbf, 0xab, 0xb0, 0x7a, 0x6c, 0xed, 0x1e, 0x58, 0xbb, 0x24, 0x81,
	0xd6, 0xec, 0x23, 0x40, 0x76, 0x4b, 0x9c, 0x5f, 0xf1, 0x52, 0x74, 0x1e, 0xdd, 0x48, 0xd7, 0x46,
	0xe9, 0x2f, 0x90, 0xef, 0x01, 0x26, 0xdb, 0x97, 0x7c, 0x7c, 0x05, 0x78, 0xea, 0x9d, 0xe8, 0x3c,
	0x7c, 0x8b, 0xd6, 0xd8, 0xf8, 0x4b, 0xa8, 0xe7, 0xeb, 0x84, 0xf8, 0x25, 0xa0, 0x99, 0x5d, 0xd3,
	0xd9, 0x98, 0x5b, 0xa5, 0x2f, 0xf4, 0x9f, 0x9f, 0xbf, 0x40, 0x5e, 0x01, 0x4c, 0x86, 0xbd, 0x94,
	0xe6, 0xdc, 0x2e, 0xb8, 0xc6, 0xda, 0x19, 0xd4, 0xf3, 0xbe, 0x2f, 0xe5, 0x35, 0x33, 0xaa, 0x9d,
	0x07, 0xd7, 0xea, 0x8c, 0xc3, 0xfd, 0xc1, 0x0c, 0xf9, 0x54, 0x97, 0x7e, 0x52, 0x8e, 0x2c, 0x99,
	0xa4, 0xce, 0xee, 0x4d, 0x54, 0x73, 0x5f, 0xbd, 0x9a, 0x09, 0xea, 0xd3, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xe7, 0xc7, 0xb0, 0x6b, 0x7e, 0x0b, 0x00, 0x00,
}
