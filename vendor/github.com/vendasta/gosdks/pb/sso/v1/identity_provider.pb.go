// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sso/v1/identity_provider.proto

package sso_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The identity context is used to determine which identity provider to use. This context is used in conjunction with
// the service context, provided by the service provider. The two contexts require domain logic to be glued together;
// for example, when the service provider provides an account, we can determine the partner from that account, then
// match that up to an identity provider Partner context.
type IdentityContext struct {
	// Types that are valid to be assigned to Context:
	//	*IdentityContext_Partner_
	//	*IdentityContext_Market_
	Context isIdentityContext_Context `protobuf_oneof:"context"`
}

func (m *IdentityContext) Reset()                    { *m = IdentityContext{} }
func (m *IdentityContext) String() string            { return proto.CompactTextString(m) }
func (*IdentityContext) ProtoMessage()               {}
func (*IdentityContext) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isIdentityContext_Context interface {
	isIdentityContext_Context()
}

type IdentityContext_Partner_ struct {
	Partner *IdentityContext_Partner `protobuf:"bytes,1,opt,name=partner,oneof"`
}
type IdentityContext_Market_ struct {
	Market *IdentityContext_Market `protobuf:"bytes,2,opt,name=market,oneof"`
}

func (*IdentityContext_Partner_) isIdentityContext_Context() {}
func (*IdentityContext_Market_) isIdentityContext_Context()  {}

func (m *IdentityContext) GetContext() isIdentityContext_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *IdentityContext) GetPartner() *IdentityContext_Partner {
	if x, ok := m.GetContext().(*IdentityContext_Partner_); ok {
		return x.Partner
	}
	return nil
}

func (m *IdentityContext) GetMarket() *IdentityContext_Market {
	if x, ok := m.GetContext().(*IdentityContext_Market_); ok {
		return x.Market
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IdentityContext) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IdentityContext_OneofMarshaler, _IdentityContext_OneofUnmarshaler, _IdentityContext_OneofSizer, []interface{}{
		(*IdentityContext_Partner_)(nil),
		(*IdentityContext_Market_)(nil),
	}
}

func _IdentityContext_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IdentityContext)
	// context
	switch x := m.Context.(type) {
	case *IdentityContext_Partner_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Partner); err != nil {
			return err
		}
	case *IdentityContext_Market_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Market); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IdentityContext.Context has unexpected type %T", x)
	}
	return nil
}

func _IdentityContext_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IdentityContext)
	switch tag {
	case 1: // context.partner
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IdentityContext_Partner)
		err := b.DecodeMessage(msg)
		m.Context = &IdentityContext_Partner_{msg}
		return true, err
	case 2: // context.market
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IdentityContext_Market)
		err := b.DecodeMessage(msg)
		m.Context = &IdentityContext_Market_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IdentityContext_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IdentityContext)
	// context
	switch x := m.Context.(type) {
	case *IdentityContext_Partner_:
		s := proto.Size(x.Partner)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IdentityContext_Market_:
		s := proto.Size(x.Market)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IdentityContext_Partner struct {
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
}

func (m *IdentityContext_Partner) Reset()                    { *m = IdentityContext_Partner{} }
func (m *IdentityContext_Partner) String() string            { return proto.CompactTextString(m) }
func (*IdentityContext_Partner) ProtoMessage()               {}
func (*IdentityContext_Partner) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *IdentityContext_Partner) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

type IdentityContext_Market struct {
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	MarketId  string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *IdentityContext_Market) Reset()                    { *m = IdentityContext_Market{} }
func (m *IdentityContext_Market) String() string            { return proto.CompactTextString(m) }
func (*IdentityContext_Market) ProtoMessage()               {}
func (*IdentityContext_Market) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

func (m *IdentityContext_Market) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *IdentityContext_Market) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type SetSessionTransferURLTemplateRequest struct {
	// An ID unique to a particular identity provider, which may provide identity for more than one context.
	IdentityProviderId string `protobuf:"bytes,1,opt,name=identity_provider_id,json=identityProviderId" json:"identity_provider_id,omitempty"`
	// The URL of the endpoint that will handle the session transfer.
	SessionTransferUrlTemplate string `protobuf:"bytes,2,opt,name=session_transfer_url_template,json=sessionTransferUrlTemplate" json:"session_transfer_url_template,omitempty"`
	// The identity context.
	Context *IdentityContext `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
}

func (m *SetSessionTransferURLTemplateRequest) Reset()         { *m = SetSessionTransferURLTemplateRequest{} }
func (m *SetSessionTransferURLTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*SetSessionTransferURLTemplateRequest) ProtoMessage()    {}
func (*SetSessionTransferURLTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1}
}

func (m *SetSessionTransferURLTemplateRequest) GetIdentityProviderId() string {
	if m != nil {
		return m.IdentityProviderId
	}
	return ""
}

func (m *SetSessionTransferURLTemplateRequest) GetSessionTransferUrlTemplate() string {
	if m != nil {
		return m.SessionTransferUrlTemplate
	}
	return ""
}

func (m *SetSessionTransferURLTemplateRequest) GetContext() *IdentityContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type GetSessionTransferURLTemplateRequest struct {
	// An ID unique to a particular identity provider, which may provide identity for more than one context.
	IdentityProviderId string `protobuf:"bytes,1,opt,name=identity_provider_id,json=identityProviderId" json:"identity_provider_id,omitempty"`
	// The identity context.
	Context *IdentityContext `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *GetSessionTransferURLTemplateRequest) Reset()         { *m = GetSessionTransferURLTemplateRequest{} }
func (m *GetSessionTransferURLTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*GetSessionTransferURLTemplateRequest) ProtoMessage()    {}
func (*GetSessionTransferURLTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2}
}

func (m *GetSessionTransferURLTemplateRequest) GetIdentityProviderId() string {
	if m != nil {
		return m.IdentityProviderId
	}
	return ""
}

func (m *GetSessionTransferURLTemplateRequest) GetContext() *IdentityContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type GetSessionTransferURLTemplateResponse struct {
	// The session transfer URL to send the user to (which may result in a redirect to a login screen).
	SessionTransferUrlTemplate string `protobuf:"bytes,1,opt,name=session_transfer_url_template,json=sessionTransferUrlTemplate" json:"session_transfer_url_template,omitempty"`
}

func (m *GetSessionTransferURLTemplateResponse) Reset()         { *m = GetSessionTransferURLTemplateResponse{} }
func (m *GetSessionTransferURLTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*GetSessionTransferURLTemplateResponse) ProtoMessage()    {}
func (*GetSessionTransferURLTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3}
}

func (m *GetSessionTransferURLTemplateResponse) GetSessionTransferUrlTemplate() string {
	if m != nil {
		return m.SessionTransferUrlTemplate
	}
	return ""
}

type GetEntryURLRequest struct {
	// The service provider ID.
	ServiceProviderId string `protobuf:"bytes,1,opt,name=service_provider_id,json=serviceProviderId" json:"service_provider_id,omitempty"`
	// See ServiceContext for more information.
	Context *ServiceContext `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *GetEntryURLRequest) Reset()                    { *m = GetEntryURLRequest{} }
func (m *GetEntryURLRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntryURLRequest) ProtoMessage()               {}
func (*GetEntryURLRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetEntryURLRequest) GetServiceProviderId() string {
	if m != nil {
		return m.ServiceProviderId
	}
	return ""
}

func (m *GetEntryURLRequest) GetContext() *ServiceContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type GetEntryURLResponse struct {
	// The entry URL
	EntryUrl string `protobuf:"bytes,1,opt,name=entry_url,json=entryUrl" json:"entry_url,omitempty"`
}

func (m *GetEntryURLResponse) Reset()                    { *m = GetEntryURLResponse{} }
func (m *GetEntryURLResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntryURLResponse) ProtoMessage()               {}
func (*GetEntryURLResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetEntryURLResponse) GetEntryUrl() string {
	if m != nil {
		return m.EntryUrl
	}
	return ""
}

type GetEntryURLWithCodeRequest struct {
	// The service provider ID.
	ServiceProviderId string `protobuf:"bytes,1,opt,name=service_provider_id,json=serviceProviderId" json:"service_provider_id,omitempty"`
	// The session ID the identity provider wants to pass along to the service providers.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// The user ID.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// The user's email.
	Email string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	// The service context needed to help determine which identity provider to use.
	Context *ServiceContext `protobuf:"bytes,5,opt,name=context" json:"context,omitempty"`
	// The next URL to send the user to, once the code exchange is complete on the entry URL.
	NextUrl string `protobuf:"bytes,6,opt,name=next_url,json=nextUrl" json:"next_url,omitempty"`
}

func (m *GetEntryURLWithCodeRequest) Reset()                    { *m = GetEntryURLWithCodeRequest{} }
func (m *GetEntryURLWithCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntryURLWithCodeRequest) ProtoMessage()               {}
func (*GetEntryURLWithCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GetEntryURLWithCodeRequest) GetServiceProviderId() string {
	if m != nil {
		return m.ServiceProviderId
	}
	return ""
}

func (m *GetEntryURLWithCodeRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *GetEntryURLWithCodeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetEntryURLWithCodeRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetEntryURLWithCodeRequest) GetContext() *ServiceContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *GetEntryURLWithCodeRequest) GetNextUrl() string {
	if m != nil {
		return m.NextUrl
	}
	return ""
}

type GetEntryURLWithCodeResponse struct {
	// The entry URL, containing the code in the query params
	EntryUrl string `protobuf:"bytes,1,opt,name=entry_url,json=entryUrl" json:"entry_url,omitempty"`
}

func (m *GetEntryURLWithCodeResponse) Reset()                    { *m = GetEntryURLWithCodeResponse{} }
func (m *GetEntryURLWithCodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntryURLWithCodeResponse) ProtoMessage()               {}
func (*GetEntryURLWithCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GetEntryURLWithCodeResponse) GetEntryUrl() string {
	if m != nil {
		return m.EntryUrl
	}
	return ""
}

type LogoutRequest struct {
	// The session ID to logout
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *LogoutRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func init() {
	proto.RegisterType((*IdentityContext)(nil), "sso.v1.IdentityContext")
	proto.RegisterType((*IdentityContext_Partner)(nil), "sso.v1.IdentityContext.Partner")
	proto.RegisterType((*IdentityContext_Market)(nil), "sso.v1.IdentityContext.Market")
	proto.RegisterType((*SetSessionTransferURLTemplateRequest)(nil), "sso.v1.SetSessionTransferURLTemplateRequest")
	proto.RegisterType((*GetSessionTransferURLTemplateRequest)(nil), "sso.v1.GetSessionTransferURLTemplateRequest")
	proto.RegisterType((*GetSessionTransferURLTemplateResponse)(nil), "sso.v1.GetSessionTransferURLTemplateResponse")
	proto.RegisterType((*GetEntryURLRequest)(nil), "sso.v1.GetEntryURLRequest")
	proto.RegisterType((*GetEntryURLResponse)(nil), "sso.v1.GetEntryURLResponse")
	proto.RegisterType((*GetEntryURLWithCodeRequest)(nil), "sso.v1.GetEntryURLWithCodeRequest")
	proto.RegisterType((*GetEntryURLWithCodeResponse)(nil), "sso.v1.GetEntryURLWithCodeResponse")
	proto.RegisterType((*LogoutRequest)(nil), "sso.v1.LogoutRequest")
}

func init() { proto.RegisterFile("sso/v1/identity_provider.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xeb, 0x94, 0x3a, 0xf1, 0x45, 0x08, 0x98, 0x54, 0x34, 0x38, 0x4a, 0x41, 0x51, 0x11,
	0x5d, 0xb9, 0x4d, 0xd9, 0x20, 0x58, 0x91, 0x82, 0x5a, 0x4b, 0x41, 0xaa, 0x9c, 0x46, 0x2c, 0x2d,
	0x93, 0xb9, 0x80, 0xc1, 0x99, 0x31, 0x33, 0x13, 0xab, 0x5d, 0xb3, 0xe4, 0xdd, 0x78, 0x0d, 0x5e,
	0x03, 0x79, 0x66, 0x9c, 0xa6, 0x2e, 0x55, 0x22, 0x24, 0x96, 0x73, 0x7f, 0xce, 0x3d, 0xdf, 0x91,
	0x13, 0xd8, 0x95, 0x92, 0x1f, 0x14, 0x83, 0x83, 0x94, 0x22, 0x53, 0xa9, 0xba, 0x8c, 0x73, 0xc1,
	0x8b, 0x94, 0xa2, 0x08, 0x72, 0xc1, 0x15, 0x27, 0xae, 0x94, 0x3c, 0x28, 0x06, 0x7e, 0xcf, 0xce,
	0x49, 0x14, 0x45, 0x3a, 0xc5, 0xda, 0x58, 0xff, 0x47, 0x03, 0xee, 0x87, 0x56, 0xe2, 0x98, 0x33,
	0x85, 0x17, 0x8a, 0xbc, 0x86, 0x66, 0x9e, 0x08, 0xc5, 0x50, 0x74, 0x9c, 0xa7, 0xce, 0xfe, 0xdd,
	0xa3, 0x27, 0x81, 0x11, 0x0b, 0x6a, 0x93, 0xc1, 0x99, 0x19, 0x3b, 0xdd, 0x88, 0xaa, 0x0d, 0xf2,
	0x12, 0xdc, 0x59, 0x22, 0xbe, 0xa1, 0xea, 0x34, 0xf4, 0xee, 0xee, 0x6d, 0xbb, 0xef, 0xf5, 0xd4,
	0xe9, 0x46, 0x64, 0xe7, 0xfd, 0x7d, 0x68, 0x5a, 0x3d, 0xd2, 0x03, 0xb0, 0x7a, 0x71, 0x4a, 0xb5,
	0x09, 0x2f, 0xf2, 0x6c, 0x25, 0xa4, 0xfe, 0x5b, 0x70, 0xcd, 0xf6, 0x8a, 0x41, 0xd2, 0x05, 0xcf,
	0x88, 0x97, 0xdd, 0x86, 0xee, 0xb6, 0x4c, 0x21, 0xa4, 0x43, 0x0f, 0x9a, 0x53, 0xe3, 0xa5, 0xff,
	0xcb, 0x81, 0xbd, 0x31, 0xaa, 0x31, 0x4a, 0x99, 0x72, 0x76, 0x2e, 0x12, 0x26, 0x3f, 0xa1, 0x98,
	0x44, 0xa3, 0x73, 0x9c, 0xe5, 0x59, 0xa2, 0x30, 0xc2, 0xef, 0x73, 0x94, 0x8a, 0x1c, 0xc2, 0xf6,
	0x8d, 0xc0, 0xaf, 0x2e, 0x93, 0xaa, 0x77, 0x66, 0x5b, 0x21, 0x25, 0x6f, 0xa0, 0x27, 0x8d, 0x6c,
	0xac, 0xac, 0x6e, 0x3c, 0x17, 0x59, 0xac, 0xac, 0xb2, 0xb5, 0xe5, 0xcb, 0xda, 0x6d, 0x91, 0x55,
	0xb7, 0xc9, 0x60, 0x61, 0xb4, 0xb3, 0xa9, 0x33, 0xdd, 0xb9, 0x25, 0xd3, 0x68, 0x01, 0xf4, 0xd3,
	0x81, 0xbd, 0x93, 0xff, 0x03, 0xb4, 0xe4, 0xa6, 0xb1, 0xa6, 0x9b, 0xaf, 0xf0, 0x6c, 0x85, 0x19,
	0x99, 0x73, 0x26, 0x71, 0x75, 0x58, 0xce, 0xaa, 0xb0, 0xfa, 0x05, 0x90, 0x13, 0x54, 0xef, 0x98,
	0x12, 0x97, 0x93, 0x68, 0x54, 0x61, 0x06, 0xd0, 0xae, 0xff, 0x00, 0xae, 0x28, 0x1f, 0xda, 0xd6,
	0x12, 0xe4, 0x61, 0x1d, 0xf2, 0x51, 0x05, 0x39, 0x36, 0xb3, 0x37, 0x18, 0x8f, 0xa0, 0x7d, 0xed,
	0xae, 0x25, 0xea, 0x82, 0x87, 0x65, 0xad, 0xc4, 0xb0, 0xe7, 0x5a, 0xba, 0x30, 0x11, 0x59, 0xff,
	0xb7, 0x03, 0xfe, 0xd2, 0xd2, 0x87, 0x54, 0x7d, 0x39, 0xe6, 0x14, 0xff, 0xd5, 0x74, 0x0f, 0xa0,
	0x4a, 0x6f, 0xf1, 0xb9, 0x7b, 0xb6, 0x12, 0x52, 0xb2, 0x03, 0xcd, 0xb9, 0x34, 0x12, 0x9b, 0xba,
	0xe7, 0x96, 0xcf, 0x90, 0x92, 0x6d, 0xd8, 0xc2, 0x59, 0x92, 0x66, 0x9d, 0x3b, 0xba, 0x6c, 0x1e,
	0xcb, 0x11, 0x6c, 0xad, 0x15, 0x01, 0x79, 0x0c, 0x2d, 0x86, 0x17, 0x4a, 0xa3, 0xba, 0x5a, 0xaa,
	0x59, 0xbe, 0x4b, 0xd2, 0x57, 0xd0, 0xfd, 0x2b, 0xe8, 0x3a, 0x29, 0x05, 0x70, 0x6f, 0xc4, 0x3f,
	0xf3, 0xb9, 0xaa, 0x72, 0xb9, 0xce, 0xe9, 0xd4, 0x38, 0x87, 0xcf, 0xa1, 0x3d, 0xe5, 0xb3, 0xa0,
	0x40, 0x46, 0x13, 0xa9, 0x12, 0xeb, 0x7a, 0xf8, 0x20, 0xac, 0x7d, 0xcb, 0x1f, 0x5d, 0xfd, 0x17,
	0xf8, 0xe2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x46, 0x06, 0xd9, 0x4b, 0x05, 0x00, 0x00,
}
