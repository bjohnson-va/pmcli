// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sso/v1/api.proto

/*
Package sso_v1 is a generated protocol buffer package.

It is generated from these files:
	sso/v1/api.proto
	sso/v1/identity_provider.proto
	sso/v1/service_provider.proto

It has these top-level messages:
	IdentityContext
	SetSessionTransferURLTemplateRequest
	GetSessionTransferURLTemplateRequest
	GetSessionTransferURLTemplateResponse
	GetEntryURLRequest
	GetEntryURLResponse
	GetEntryURLWithCodeRequest
	GetEntryURLWithCodeResponse
	LogoutRequest
	GetSSOUrlsRequest
	GetSSOUrlsResponse
	SetSSOUrlsRequest
	ServiceContext
	GetSessionTransferURLRequest
	GetSessionTransferURLResponse
*/
package sso_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IdentityProviderAdmin service

type IdentityProviderAdminClient interface {
	// Get the session transfer URL for a given context.
	GetSessionTransferURLTemplate(ctx context.Context, in *GetSessionTransferURLTemplateRequest, opts ...grpc.CallOption) (*GetSessionTransferURLTemplateResponse, error)
	// Set the session transfer URL for a given context.
	SetSessionTransferURLTemplate(ctx context.Context, in *SetSessionTransferURLTemplateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type identityProviderAdminClient struct {
	cc *grpc.ClientConn
}

func NewIdentityProviderAdminClient(cc *grpc.ClientConn) IdentityProviderAdminClient {
	return &identityProviderAdminClient{cc}
}

func (c *identityProviderAdminClient) GetSessionTransferURLTemplate(ctx context.Context, in *GetSessionTransferURLTemplateRequest, opts ...grpc.CallOption) (*GetSessionTransferURLTemplateResponse, error) {
	out := new(GetSessionTransferURLTemplateResponse)
	err := grpc.Invoke(ctx, "/sso.v1.IdentityProviderAdmin/GetSessionTransferURLTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityProviderAdminClient) SetSessionTransferURLTemplate(ctx context.Context, in *SetSessionTransferURLTemplateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/sso.v1.IdentityProviderAdmin/SetSessionTransferURLTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentityProviderAdmin service

type IdentityProviderAdminServer interface {
	// Get the session transfer URL for a given context.
	GetSessionTransferURLTemplate(context.Context, *GetSessionTransferURLTemplateRequest) (*GetSessionTransferURLTemplateResponse, error)
	// Set the session transfer URL for a given context.
	SetSessionTransferURLTemplate(context.Context, *SetSessionTransferURLTemplateRequest) (*google_protobuf.Empty, error)
}

func RegisterIdentityProviderAdminServer(s *grpc.Server, srv IdentityProviderAdminServer) {
	s.RegisterService(&_IdentityProviderAdmin_serviceDesc, srv)
}

func _IdentityProviderAdmin_GetSessionTransferURLTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionTransferURLTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderAdminServer).GetSessionTransferURLTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.IdentityProviderAdmin/GetSessionTransferURLTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderAdminServer).GetSessionTransferURLTemplate(ctx, req.(*GetSessionTransferURLTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityProviderAdmin_SetSessionTransferURLTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSessionTransferURLTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderAdminServer).SetSessionTransferURLTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.IdentityProviderAdmin/SetSessionTransferURLTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderAdminServer).SetSessionTransferURLTemplate(ctx, req.(*SetSessionTransferURLTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityProviderAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sso.v1.IdentityProviderAdmin",
	HandlerType: (*IdentityProviderAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessionTransferURLTemplate",
			Handler:    _IdentityProviderAdmin_GetSessionTransferURLTemplate_Handler,
		},
		{
			MethodName: "SetSessionTransferURLTemplate",
			Handler:    _IdentityProviderAdmin_SetSessionTransferURLTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/v1/api.proto",
}

// Client API for IdentityProvider service

type IdentityProviderClient interface {
	// Get the entry URL of a service provider.
	GetEntryURL(ctx context.Context, in *GetEntryURLRequest, opts ...grpc.CallOption) (*GetEntryURLResponse, error)
	// Get the entry URL of a service provider with a code that will be exchanged for a user session.
	GetEntryURLWithCode(ctx context.Context, in *GetEntryURLWithCodeRequest, opts ...grpc.CallOption) (*GetEntryURLWithCodeResponse, error)
	// Logout of the session for a user.
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type identityProviderClient struct {
	cc *grpc.ClientConn
}

func NewIdentityProviderClient(cc *grpc.ClientConn) IdentityProviderClient {
	return &identityProviderClient{cc}
}

func (c *identityProviderClient) GetEntryURL(ctx context.Context, in *GetEntryURLRequest, opts ...grpc.CallOption) (*GetEntryURLResponse, error) {
	out := new(GetEntryURLResponse)
	err := grpc.Invoke(ctx, "/sso.v1.IdentityProvider/GetEntryURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityProviderClient) GetEntryURLWithCode(ctx context.Context, in *GetEntryURLWithCodeRequest, opts ...grpc.CallOption) (*GetEntryURLWithCodeResponse, error) {
	out := new(GetEntryURLWithCodeResponse)
	err := grpc.Invoke(ctx, "/sso.v1.IdentityProvider/GetEntryURLWithCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityProviderClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/sso.v1.IdentityProvider/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentityProvider service

type IdentityProviderServer interface {
	// Get the entry URL of a service provider.
	GetEntryURL(context.Context, *GetEntryURLRequest) (*GetEntryURLResponse, error)
	// Get the entry URL of a service provider with a code that will be exchanged for a user session.
	GetEntryURLWithCode(context.Context, *GetEntryURLWithCodeRequest) (*GetEntryURLWithCodeResponse, error)
	// Logout of the session for a user.
	Logout(context.Context, *LogoutRequest) (*google_protobuf.Empty, error)
}

func RegisterIdentityProviderServer(s *grpc.Server, srv IdentityProviderServer) {
	s.RegisterService(&_IdentityProvider_serviceDesc, srv)
}

func _IdentityProvider_GetEntryURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).GetEntryURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.IdentityProvider/GetEntryURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).GetEntryURL(ctx, req.(*GetEntryURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityProvider_GetEntryURLWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryURLWithCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).GetEntryURLWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.IdentityProvider/GetEntryURLWithCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).GetEntryURLWithCode(ctx, req.(*GetEntryURLWithCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityProvider_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityProviderServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.IdentityProvider/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityProviderServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sso.v1.IdentityProvider",
	HandlerType: (*IdentityProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntryURL",
			Handler:    _IdentityProvider_GetEntryURL_Handler,
		},
		{
			MethodName: "GetEntryURLWithCode",
			Handler:    _IdentityProvider_GetEntryURLWithCode_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _IdentityProvider_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/v1/api.proto",
}

// Client API for ServiceProviderAdmin service

type ServiceProviderAdminClient interface {
	// Get the SSO URL's the application is configured for.
	GetSSOUrls(ctx context.Context, in *GetSSOUrlsRequest, opts ...grpc.CallOption) (*GetSSOUrlsResponse, error)
	// Set the SSO URL's for the application (service provider).
	SetSSOUrls(ctx context.Context, in *SetSSOUrlsRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type serviceProviderAdminClient struct {
	cc *grpc.ClientConn
}

func NewServiceProviderAdminClient(cc *grpc.ClientConn) ServiceProviderAdminClient {
	return &serviceProviderAdminClient{cc}
}

func (c *serviceProviderAdminClient) GetSSOUrls(ctx context.Context, in *GetSSOUrlsRequest, opts ...grpc.CallOption) (*GetSSOUrlsResponse, error) {
	out := new(GetSSOUrlsResponse)
	err := grpc.Invoke(ctx, "/sso.v1.ServiceProviderAdmin/GetSSOUrls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderAdminClient) SetSSOUrls(ctx context.Context, in *SetSSOUrlsRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/sso.v1.ServiceProviderAdmin/SetSSOUrls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceProviderAdmin service

type ServiceProviderAdminServer interface {
	// Get the SSO URL's the application is configured for.
	GetSSOUrls(context.Context, *GetSSOUrlsRequest) (*GetSSOUrlsResponse, error)
	// Set the SSO URL's for the application (service provider).
	SetSSOUrls(context.Context, *SetSSOUrlsRequest) (*google_protobuf.Empty, error)
}

func RegisterServiceProviderAdminServer(s *grpc.Server, srv ServiceProviderAdminServer) {
	s.RegisterService(&_ServiceProviderAdmin_serviceDesc, srv)
}

func _ServiceProviderAdmin_GetSSOUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSOUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdminServer).GetSSOUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.ServiceProviderAdmin/GetSSOUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdminServer).GetSSOUrls(ctx, req.(*GetSSOUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderAdmin_SetSSOUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSSOUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderAdminServer).SetSSOUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.ServiceProviderAdmin/SetSSOUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderAdminServer).SetSSOUrls(ctx, req.(*SetSSOUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceProviderAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sso.v1.ServiceProviderAdmin",
	HandlerType: (*ServiceProviderAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSSOUrls",
			Handler:    _ServiceProviderAdmin_GetSSOUrls_Handler,
		},
		{
			MethodName: "SetSSOUrls",
			Handler:    _ServiceProviderAdmin_SetSSOUrls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/v1/api.proto",
}

// Client API for ServiceProvider service

type ServiceProviderClient interface {
	// Get the session transfer URL for a given context.
	GetSessionTransferURL(ctx context.Context, in *GetSessionTransferURLRequest, opts ...grpc.CallOption) (*GetSessionTransferURLResponse, error)
}

type serviceProviderClient struct {
	cc *grpc.ClientConn
}

func NewServiceProviderClient(cc *grpc.ClientConn) ServiceProviderClient {
	return &serviceProviderClient{cc}
}

func (c *serviceProviderClient) GetSessionTransferURL(ctx context.Context, in *GetSessionTransferURLRequest, opts ...grpc.CallOption) (*GetSessionTransferURLResponse, error) {
	out := new(GetSessionTransferURLResponse)
	err := grpc.Invoke(ctx, "/sso.v1.ServiceProvider/GetSessionTransferURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceProvider service

type ServiceProviderServer interface {
	// Get the session transfer URL for a given context.
	GetSessionTransferURL(context.Context, *GetSessionTransferURLRequest) (*GetSessionTransferURLResponse, error)
}

func RegisterServiceProviderServer(s *grpc.Server, srv ServiceProviderServer) {
	s.RegisterService(&_ServiceProvider_serviceDesc, srv)
}

func _ServiceProvider_GetSessionTransferURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionTransferURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderServer).GetSessionTransferURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.ServiceProvider/GetSessionTransferURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderServer).GetSessionTransferURL(ctx, req.(*GetSessionTransferURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sso.v1.ServiceProvider",
	HandlerType: (*ServiceProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessionTransferURL",
			Handler:    _ServiceProvider_GetSessionTransferURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/v1/api.proto",
}

func init() { proto.RegisterFile("sso/v1/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x4f, 0xea, 0x40,
	0x10, 0x87, 0xf7, 0x12, 0x0e, 0xf3, 0x0e, 0x8f, 0x2c, 0x62, 0x62, 0x09, 0x1e, 0x50, 0x6f, 0xba,
	0x0d, 0x78, 0xf2, 0x08, 0x86, 0xa0, 0x09, 0x09, 0x86, 0x85, 0x78, 0xd4, 0x42, 0x87, 0xba, 0x09,
	0xdd, 0xad, 0xbb, 0x4b, 0x93, 0x5e, 0x8c, 0x1f, 0xc5, 0xaf, 0xe9, 0xcd, 0x40, 0xbb, 0x04, 0xb1,
	0x02, 0xc7, 0x9d, 0xdf, 0x9f, 0xf9, 0xed, 0xcc, 0x40, 0x59, 0x6b, 0xe9, 0xc6, 0x4d, 0xd7, 0x8b,
	0x38, 0x8d, 0x94, 0x34, 0x92, 0x94, 0xb4, 0x96, 0x34, 0x6e, 0x3a, 0xb5, 0x40, 0xca, 0x60, 0x8e,
	0xee, 0xaa, 0x3a, 0x59, 0xcc, 0x5c, 0x0c, 0x23, 0x93, 0xa4, 0x24, 0xe7, 0x34, 0x93, 0x71, 0x1f,
	0x85, 0xe1, 0x26, 0x79, 0x8a, 0x94, 0x8c, 0xb9, 0x8f, 0x2a, 0xc3, 0xeb, 0x19, 0xae, 0x51, 0xc5,
	0x7c, 0x8a, 0x5b, 0x70, 0xeb, 0xfd, 0x0f, 0x54, 0xef, 0x33, 0xe9, 0x43, 0x06, 0xb5, 0xfd, 0x90,
	0x0b, 0xf2, 0x06, 0xf5, 0x1e, 0x1a, 0x86, 0x5a, 0x73, 0x29, 0x46, 0xca, 0x13, 0x7a, 0x86, 0x6a,
	0x3c, 0xec, 0x8f, 0x30, 0x8c, 0xe6, 0x9e, 0x41, 0x72, 0x49, 0xd3, 0x7c, 0x74, 0x27, 0x6d, 0x88,
	0xaf, 0x0b, 0xd4, 0xc6, 0xb9, 0x3a, 0x90, 0xad, 0x23, 0x29, 0x34, 0x36, 0x0a, 0x24, 0x80, 0x3a,
	0x3b, 0xac, 0x3f, 0x3b, 0xa4, 0xff, 0x31, 0x4d, 0xa7, 0x48, 0xed, 0x14, 0x69, 0x77, 0x39, 0xc5,
	0x46, 0xa1, 0xf5, 0x59, 0x84, 0xf2, 0xf6, 0x08, 0xc8, 0x1d, 0xfc, 0xeb, 0xa1, 0xe9, 0x0a, 0xa3,
	0x92, 0xf1, 0xb0, 0x4f, 0x9c, 0x8d, 0xf4, 0xb6, 0x68, 0x9d, 0x6b, 0xb9, 0xd8, 0xfa, 0x1f, 0xcf,
	0x50, 0xd9, 0x00, 0x1e, 0xb9, 0x79, 0xb9, 0x95, 0x3e, 0x92, 0x46, 0x8e, 0xca, 0x82, 0xd6, 0xf9,
	0x6c, 0x27, 0x67, 0xdd, 0xe1, 0x06, 0x4a, 0x7d, 0x19, 0xc8, 0x85, 0x21, 0x55, 0x2b, 0x48, 0xdf,
	0xfb, 0xff, 0xfe, 0x51, 0x84, 0x23, 0x96, 0x5e, 0xc6, 0xf7, 0xed, 0x77, 0x01, 0x96, 0x8b, 0x62,
	0x83, 0xb1, 0x9a, 0x6b, 0x72, 0xb2, 0xb9, 0xbc, 0xb4, 0x66, 0xbd, 0x9d, 0x3c, 0x68, 0x1d, 0xad,
	0x0d, 0xc0, 0x72, 0x6c, 0xd8, 0x0f, 0x9b, 0xdf, 0x23, 0x26, 0xf0, 0x7f, 0x2b, 0x21, 0x99, 0x41,
	0x35, 0xf7, 0x8a, 0xc8, 0xf9, 0xce, 0x23, 0xb3, 0xbd, 0x2e, 0xf6, 0xb0, 0x6c, 0xfa, 0x8e, 0x03,
	0x95, 0xa9, 0x0c, 0x69, 0x8c, 0xc2, 0xf7, 0xb4, 0xf1, 0x32, 0x59, 0xe7, 0x2f, 0x63, 0x83, 0x49,
	0x69, 0x15, 0xf4, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x4e, 0x75, 0x35, 0xb7, 0x03, 0x00,
	0x00,
}
