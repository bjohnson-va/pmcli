// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heimdall/v1/api.proto

/*
Package heimdall_v1 is a generated protocol buffer package.

It is generated from these files:
	heimdall/v1/api.proto
	heimdall/v1/error_reporting.proto
	heimdall/v1/rpc_logging.proto

It has these top-level messages:
	CreateErrorReportRequest
	CreateRPCLogsRequest
	User
	Request
	Exception
	Stacktrace
	Breadcrumb
	ErrorReport
	RPCLog
*/
package heimdall_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request to create a new ErrorReport
type CreateErrorReportRequest struct {
	// The ErrorReport object to create
	Report *ErrorReport `protobuf:"bytes,1,opt,name=report" json:"report,omitempty"`
}

func (m *CreateErrorReportRequest) Reset()                    { *m = CreateErrorReportRequest{} }
func (m *CreateErrorReportRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateErrorReportRequest) ProtoMessage()               {}
func (*CreateErrorReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateErrorReportRequest) GetReport() *ErrorReport {
	if m != nil {
		return m.Report
	}
	return nil
}

// Request to create new RPCLogs
type CreateRPCLogsRequest struct {
	// A list of RPCLog objects to create
	RpcLogs []*RPCLog `protobuf:"bytes,1,rep,name=rpc_logs,json=rpcLogs" json:"rpc_logs,omitempty"`
}

func (m *CreateRPCLogsRequest) Reset()                    { *m = CreateRPCLogsRequest{} }
func (m *CreateRPCLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRPCLogsRequest) ProtoMessage()               {}
func (*CreateRPCLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRPCLogsRequest) GetRpcLogs() []*RPCLog {
	if m != nil {
		return m.RpcLogs
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateErrorReportRequest)(nil), "heimdall.v1.CreateErrorReportRequest")
	proto.RegisterType((*CreateRPCLogsRequest)(nil), "heimdall.v1.CreateRPCLogsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Heimdall service

type HeimdallClient interface {
	// Create a new error report
	CreateErrorReport(ctx context.Context, in *CreateErrorReportRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Create new rpc logs
	CreateRPCLogs(ctx context.Context, in *CreateRPCLogsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type heimdallClient struct {
	cc *grpc.ClientConn
}

func NewHeimdallClient(cc *grpc.ClientConn) HeimdallClient {
	return &heimdallClient{cc}
}

func (c *heimdallClient) CreateErrorReport(ctx context.Context, in *CreateErrorReportRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/heimdall.v1.Heimdall/CreateErrorReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heimdallClient) CreateRPCLogs(ctx context.Context, in *CreateRPCLogsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/heimdall.v1.Heimdall/CreateRPCLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Heimdall service

type HeimdallServer interface {
	// Create a new error report
	CreateErrorReport(context.Context, *CreateErrorReportRequest) (*google_protobuf1.Empty, error)
	// Create new rpc logs
	CreateRPCLogs(context.Context, *CreateRPCLogsRequest) (*google_protobuf1.Empty, error)
}

func RegisterHeimdallServer(s *grpc.Server, srv HeimdallServer) {
	s.RegisterService(&_Heimdall_serviceDesc, srv)
}

func _Heimdall_CreateErrorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateErrorReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeimdallServer).CreateErrorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.v1.Heimdall/CreateErrorReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeimdallServer).CreateErrorReport(ctx, req.(*CreateErrorReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heimdall_CreateRPCLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRPCLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeimdallServer).CreateRPCLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdall.v1.Heimdall/CreateRPCLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeimdallServer).CreateRPCLogs(ctx, req.(*CreateRPCLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heimdall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdall.v1.Heimdall",
	HandlerType: (*HeimdallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateErrorReport",
			Handler:    _Heimdall_CreateErrorReport_Handler,
		},
		{
			MethodName: "CreateRPCLogs",
			Handler:    _Heimdall_CreateRPCLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdall/v1/api.proto",
}

func init() { proto.RegisterFile("heimdall/v1/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x8f, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x0d, 0x42, 0x2d, 0x13, 0x3c, 0xb8, 0xfe, 0x21, 0x44, 0x84, 0x36, 0x20, 0xf4, 0x34,
	0xb1, 0xf1, 0x23, 0x94, 0x8a, 0x87, 0x1c, 0x24, 0x78, 0x2f, 0x69, 0x1d, 0xd7, 0x40, 0xea, 0xac,
	0x93, 0x6d, 0xc1, 0x2f, 0xe5, 0x67, 0x94, 0x64, 0x13, 0x4c, 0xb0, 0x3d, 0xce, 0xbc, 0xf7, 0x7e,
	0xbc, 0x07, 0xd7, 0x1f, 0x54, 0x6c, 0xdf, 0xf2, 0xb2, 0x8c, 0xf7, 0xf3, 0x38, 0x37, 0x05, 0x1a,
	0x61, 0xcb, 0xca, 0xef, 0xde, 0xb8, 0x9f, 0x87, 0x77, 0x7d, 0x8f, 0x98, 0xcd, 0xaa, 0x64, 0xad,
	0x8b, 0x4f, 0xed, 0xbc, 0xe1, 0xb4, 0x2f, 0x93, 0x08, 0xcb, 0x4a, 0xc8, 0xb0, 0xd8, 0x3f, 0xcb,
	0xad, 0x66, 0xd6, 0x25, 0xc5, 0xcd, 0xb5, 0xde, 0xbd, 0xc7, 0xb4, 0x35, 0xf6, 0xdb, 0x89, 0x51,
	0x0a, 0xc1, 0x42, 0x28, 0xb7, 0xb4, 0xac, 0xb3, 0x59, 0x13, 0xcd, 0xe8, 0x6b, 0x47, 0x95, 0x55,
	0x0f, 0x30, 0x72, 0xac, 0xc0, 0x9b, 0x78, 0x33, 0x3f, 0x09, 0xb0, 0x57, 0x0c, 0xfb, 0x81, 0xd6,
	0x17, 0x3d, 0xc1, 0x95, 0xa3, 0x65, 0x2f, 0x8b, 0x94, 0x75, 0xd5, 0x91, 0x10, 0xc6, 0x6d, 0xf5,
	0x2a, 0xf0, 0x26, 0xa7, 0x33, 0x3f, 0xb9, 0x1c, 0xb0, 0x9c, 0x3d, 0x3b, 0x13, 0xb3, 0xa9, 0x63,
	0xc9, 0x8f, 0x07, 0xe3, 0xe7, 0x56, 0x57, 0xaf, 0x70, 0xf1, 0xaf, 0xa2, 0xba, 0x1f, 0xe4, 0x8f,
	0x4d, 0x08, 0x6f, 0xd0, 0x8d, 0xc7, 0x6e, 0x3c, 0x2e, 0xeb, 0xf1, 0xd1, 0x89, 0x4a, 0xe1, 0x7c,
	0x50, 0x55, 0x4d, 0x0f, 0x10, 0x87, 0x33, 0x8e, 0xd3, 0xd6, 0xa3, 0xe6, 0xf3, 0xf8, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0xf1, 0x9f, 0x13, 0xf1, 0xd2, 0x01, 0x00, 0x00,
}
