// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heimdall/v1/rpc_logging.proto

package heimdall_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HTTPMethod int32

const (
	HTTPMethod_GET     HTTPMethod = 0
	HTTPMethod_HEAD    HTTPMethod = 1
	HTTPMethod_POST    HTTPMethod = 2
	HTTPMethod_PUT     HTTPMethod = 3
	HTTPMethod_DELETE  HTTPMethod = 4
	HTTPMethod_CONNECT HTTPMethod = 5
	HTTPMethod_OPTIONS HTTPMethod = 6
	HTTPMethod_PATCH   HTTPMethod = 7
)

var HTTPMethod_name = map[int32]string{
	0: "GET",
	1: "HEAD",
	2: "POST",
	3: "PUT",
	4: "DELETE",
	5: "CONNECT",
	6: "OPTIONS",
	7: "PATCH",
}
var HTTPMethod_value = map[string]int32{
	"GET":     0,
	"HEAD":    1,
	"POST":    2,
	"PUT":     3,
	"DELETE":  4,
	"CONNECT": 5,
	"OPTIONS": 6,
	"PATCH":   7,
}

func (x HTTPMethod) String() string {
	return proto.EnumName(HTTPMethod_name, int32(x))
}
func (HTTPMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type RPCLog struct {
	// The RPC or endpoint being called
	RequestPath string `protobuf:"bytes,1,opt,name=request_path,json=requestPath" json:"request_path,omitempty"`
	// The host of the RPC or endpoint being called
	RequestHost string `protobuf:"bytes,2,opt,name=request_host,json=requestHost" json:"request_host,omitempty"`
	// The http method being used to call the request_path
	HttpMethod HTTPMethod `protobuf:"varint,3,opt,name=http_method,json=httpMethod,enum=heimdall.v1.HTTPMethod" json:"http_method,omitempty"`
	// The http status of the response of the call
	HttpStatus int64 `protobuf:"varint,4,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	// The project calling the rpc
	Project string `protobuf:"bytes,5,opt,name=project" json:"project,omitempty"`
	// The environment of the project
	Environment string `protobuf:"bytes,6,opt,name=environment" json:"environment,omitempty"`
	// The deployment id of the project
	DeploymentId string `protobuf:"bytes,7,opt,name=deployment_id,json=deploymentId" json:"deployment_id,omitempty"`
	// When the request was made
	StartTime *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// How long until the response was recieved in milliseconds
	DurationMillis int64 `protobuf:"varint,9,opt,name=duration_millis,json=durationMillis" json:"duration_millis,omitempty"`
	// How large the response was in bytes
	ResponseSize int64 `protobuf:"varint,10,opt,name=response_size,json=responseSize" json:"response_size,omitempty"`
	// The source of the invoked request, i.e. The current page
	SourcePath string `protobuf:"bytes,11,opt,name=source_path,json=sourcePath" json:"source_path,omitempty"`
	// Optional: The full response body of the request
	ResponseBody string `protobuf:"bytes,12,opt,name=response_body,json=responseBody" json:"response_body,omitempty"`
}

func (m *RPCLog) Reset()                    { *m = RPCLog{} }
func (m *RPCLog) String() string            { return proto.CompactTextString(m) }
func (*RPCLog) ProtoMessage()               {}
func (*RPCLog) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RPCLog) GetRequestPath() string {
	if m != nil {
		return m.RequestPath
	}
	return ""
}

func (m *RPCLog) GetRequestHost() string {
	if m != nil {
		return m.RequestHost
	}
	return ""
}

func (m *RPCLog) GetHttpMethod() HTTPMethod {
	if m != nil {
		return m.HttpMethod
	}
	return HTTPMethod_GET
}

func (m *RPCLog) GetHttpStatus() int64 {
	if m != nil {
		return m.HttpStatus
	}
	return 0
}

func (m *RPCLog) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *RPCLog) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *RPCLog) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *RPCLog) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *RPCLog) GetDurationMillis() int64 {
	if m != nil {
		return m.DurationMillis
	}
	return 0
}

func (m *RPCLog) GetResponseSize() int64 {
	if m != nil {
		return m.ResponseSize
	}
	return 0
}

func (m *RPCLog) GetSourcePath() string {
	if m != nil {
		return m.SourcePath
	}
	return ""
}

func (m *RPCLog) GetResponseBody() string {
	if m != nil {
		return m.ResponseBody
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCLog)(nil), "heimdall.v1.RPCLog")
	proto.RegisterEnum("heimdall.v1.HTTPMethod", HTTPMethod_name, HTTPMethod_value)
}

func init() { proto.RegisterFile("heimdall/v1/rpc_logging.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x91, 0x41, 0x6f, 0x9b, 0x30,
	0x14, 0xc7, 0x47, 0x49, 0xa0, 0x79, 0x64, 0x1d, 0xf2, 0x65, 0x56, 0xa5, 0xa9, 0x6c, 0x3b, 0x2c,
	0xda, 0x81, 0xa8, 0xdd, 0x65, 0x3b, 0x76, 0x29, 0x5a, 0x2a, 0xb5, 0x09, 0x4a, 0xbc, 0x33, 0x22,
	0xc1, 0x03, 0x4f, 0x80, 0x19, 0x7e, 0x44, 0x4a, 0xbf, 0xe9, 0xbe, 0xcd, 0x64, 0x53, 0xd4, 0xec,
	0xe6, 0xf7, 0x7b, 0x3f, 0xf0, 0xf3, 0xff, 0xc1, 0xbb, 0x82, 0x8b, 0x2a, 0x4b, 0xcb, 0x72, 0x7e,
	0xb8, 0x9e, 0xb7, 0xcd, 0x3e, 0x29, 0x65, 0x9e, 0x8b, 0x3a, 0x0f, 0x9b, 0x56, 0xa2, 0x24, 0xde,
	0xd0, 0x0e, 0x0f, 0xd7, 0x97, 0x57, 0xb9, 0x94, 0x79, 0xc9, 0xe7, 0xa6, 0xb5, 0xeb, 0x7e, 0xcd,
	0x51, 0x54, 0x5c, 0x61, 0x5a, 0x35, 0xbd, 0xfd, 0xe1, 0xaf, 0x0d, 0xce, 0x26, 0x5e, 0x3c, 0xc8,
	0x9c, 0xbc, 0x87, 0x69, 0xcb, 0xff, 0x74, 0x5c, 0x61, 0xd2, 0xa4, 0x58, 0x50, 0x2b, 0xb0, 0x66,
	0x93, 0x8d, 0xf7, 0xcc, 0xe2, 0x14, 0x8b, 0x53, 0xa5, 0x90, 0x0a, 0xe9, 0xd9, 0x7f, 0xca, 0x52,
	0x2a, 0x24, 0x5f, 0xc1, 0x2b, 0x10, 0x9b, 0xa4, 0xe2, 0x58, 0xc8, 0x8c, 0xda, 0x81, 0x35, 0xbb,
	0xb8, 0x79, 0x1b, 0x9e, 0x0c, 0x15, 0x2e, 0x19, 0x8b, 0x1f, 0x4d, 0x7b, 0x03, 0xda, 0xed, 0xcf,
	0xe4, 0xea, 0xf9, 0x4b, 0x85, 0x29, 0x76, 0x8a, 0x8e, 0x02, 0x6b, 0x66, 0xf7, 0xc2, 0xd6, 0x10,
	0x42, 0xc1, 0x6d, 0x5a, 0xf9, 0x9b, 0xef, 0x91, 0x8e, 0xcd, 0xc5, 0x43, 0x49, 0x02, 0xf0, 0x78,
	0x7d, 0x10, 0xad, 0xac, 0x2b, 0x5e, 0x23, 0x75, 0xfa, 0xb1, 0x4e, 0x10, 0xf9, 0x08, 0xaf, 0x33,
	0xde, 0x94, 0xf2, 0xa8, 0xab, 0x44, 0x64, 0xd4, 0x35, 0xce, 0xf4, 0x05, 0xde, 0x67, 0xe4, 0x1b,
	0x80, 0xc2, 0xb4, 0xc5, 0x44, 0xa7, 0x44, 0xcf, 0x03, 0x6b, 0xe6, 0xdd, 0x5c, 0x86, 0x7d, 0x84,
	0xe1, 0x10, 0x61, 0xc8, 0x86, 0x08, 0x37, 0x13, 0x63, 0xeb, 0x9a, 0x7c, 0x82, 0x37, 0x59, 0xd7,
	0xa6, 0x28, 0x64, 0x9d, 0x54, 0xa2, 0x2c, 0x85, 0xa2, 0x13, 0xf3, 0x80, 0x8b, 0x01, 0x3f, 0x1a,
	0xaa, 0x07, 0x69, 0xb9, 0x6a, 0x64, 0xad, 0x78, 0xa2, 0xc4, 0x13, 0xa7, 0x60, 0xb4, 0xe9, 0x00,
	0xb7, 0xe2, 0x89, 0xeb, 0x28, 0x94, 0xec, 0xda, 0x3d, 0xef, 0x37, 0xe1, 0x99, 0x59, 0xa1, 0x47,
	0x66, 0x11, 0xa7, 0x7f, 0xd9, 0xc9, 0xec, 0x48, 0xa7, 0xfd, 0x73, 0x06, 0xf8, 0x5d, 0x66, 0xc7,
	0xcf, 0x7b, 0x80, 0x97, 0xa8, 0x89, 0x0b, 0xf6, 0x8f, 0x88, 0xf9, 0xaf, 0xc8, 0x39, 0x8c, 0x96,
	0xd1, 0xed, 0x9d, 0x6f, 0xe9, 0x53, 0xbc, 0xde, 0x32, 0xff, 0x4c, 0x37, 0xe3, 0x9f, 0xcc, 0xb7,
	0x09, 0x80, 0x73, 0x17, 0x3d, 0x44, 0x2c, 0xf2, 0x47, 0xc4, 0x03, 0x77, 0xb1, 0x5e, 0xad, 0xa2,
	0x05, 0xf3, 0xc7, 0xba, 0x58, 0xc7, 0xec, 0x7e, 0xbd, 0xda, 0xfa, 0x0e, 0x99, 0xc0, 0x38, 0xbe,
	0x65, 0x8b, 0xa5, 0xef, 0xee, 0x1c, 0x93, 0xcb, 0x97, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37,
	0x57, 0x71, 0x17, 0x96, 0x02, 0x00, 0x00,
}
