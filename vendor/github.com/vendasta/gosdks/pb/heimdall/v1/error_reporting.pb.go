// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heimdall/v1/error_reporting.proto

package heimdall_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	// Unique identifier for the user
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Email address of the user
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// Name for the user
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// The users IP address
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

type Request struct {
	// Http headers for the request
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Url of the request
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Request) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Request) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Exception struct {
	// The type of the exception
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// A value for the exception
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// The package or module which the exception belongs to
	Module string `protobuf:"bytes,3,opt,name=module" json:"module,omitempty"`
	// Stacktrace for the exception
	Stacktrace *Stacktrace `protobuf:"bytes,4,opt,name=stacktrace" json:"stacktrace,omitempty"`
}

func (m *Exception) Reset()                    { *m = Exception{} }
func (m *Exception) String() string            { return proto.CompactTextString(m) }
func (*Exception) ProtoMessage()               {}
func (*Exception) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Exception) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Exception) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Exception) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Exception) GetStacktrace() *Stacktrace {
	if m != nil {
		return m.Stacktrace
	}
	return nil
}

type Stacktrace struct {
	// The list of frames that comprise the stack trace
	Frames []*Stacktrace_Frame `protobuf:"bytes,1,rep,name=frames" json:"frames,omitempty"`
}

func (m *Stacktrace) Reset()                    { *m = Stacktrace{} }
func (m *Stacktrace) String() string            { return proto.CompactTextString(m) }
func (*Stacktrace) ProtoMessage()               {}
func (*Stacktrace) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Stacktrace) GetFrames() []*Stacktrace_Frame {
	if m != nil {
		return m.Frames
	}
	return nil
}

type Stacktrace_Frame struct {
	// The relative filepath to the call
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	// The line number in the file
	LineNumber string `protobuf:"bytes,2,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	// The column number in the line of the file
	ColNumber string `protobuf:"bytes,3,opt,name=col_number,json=colNumber" json:"col_number,omitempty"`
	// The name of the function being called
	Function string `protobuf:"bytes,4,opt,name=function" json:"function,omitempty"`
	// Whether this call orginated in applicaiton code and is relevant to the stack trace
	InApp bool `protobuf:"varint,5,opt,name=in_app,json=inApp" json:"in_app,omitempty"`
}

func (m *Stacktrace_Frame) Reset()                    { *m = Stacktrace_Frame{} }
func (m *Stacktrace_Frame) String() string            { return proto.CompactTextString(m) }
func (*Stacktrace_Frame) ProtoMessage()               {}
func (*Stacktrace_Frame) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

func (m *Stacktrace_Frame) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Stacktrace_Frame) GetLineNumber() string {
	if m != nil {
		return m.LineNumber
	}
	return ""
}

func (m *Stacktrace_Frame) GetColNumber() string {
	if m != nil {
		return m.ColNumber
	}
	return ""
}

func (m *Stacktrace_Frame) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *Stacktrace_Frame) GetInApp() bool {
	if m != nil {
		return m.InApp
	}
	return false
}

type Breadcrumb struct {
	// A timestamp representing when the breadcrumb occurred
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The type of event the breadcrumb is for, eg Navigation or Http
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// A message describing the breadcrumb
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// Data associated with this breadcrumb
	Data map[string]string `protobuf:"bytes,4,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Categories are dotted strings that indicate what the crumb is or where it comes from.
	// Typically itâ€™s a module name or a descriptive string. For instance ui.click could be
	// used to indicate that a click happend in the UI or flask could be used to indicate that
	// the event originated in the Flask framework.
	Category string `protobuf:"bytes,5,opt,name=category" json:"category,omitempty"`
}

func (m *Breadcrumb) Reset()                    { *m = Breadcrumb{} }
func (m *Breadcrumb) String() string            { return proto.CompactTextString(m) }
func (*Breadcrumb) ProtoMessage()               {}
func (*Breadcrumb) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Breadcrumb) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Breadcrumb) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Breadcrumb) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Breadcrumb) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Breadcrumb) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type ErrorReport struct {
	// Hexadecimal string representing a uuid4 value
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	// The name of the project this report is created for, eg. business-center-client
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	// The name of the environment that created this report, eg. production
	Environment string `protobuf:"bytes,3,opt,name=environment" json:"environment,omitempty"`
	// The release this error occured in. For projects that use vstatic this would be the deployment id
	Release string `protobuf:"bytes,4,opt,name=release" json:"release,omitempty"`
	// The language of the program that generated this error, eg javascript, go
	Platform string `protobuf:"bytes,5,opt,name=platform" json:"platform,omitempty"`
	// A timestamp representing when the error occured
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// An object containing information relevant for when the error occur during an http request
	Request *Request `protobuf:"bytes,7,opt,name=request" json:"request,omitempty"`
	// Information about the exception that occured
	Exception *Exception `protobuf:"bytes,8,opt,name=exception" json:"exception,omitempty"`
	// A message used to provide details of this error
	Message string `protobuf:"bytes,9,opt,name=message" json:"message,omitempty"`
	// The stacktrace for when this error occured
	StackTrace *Stacktrace `protobuf:"bytes,10,opt,name=stack_trace,json=stackTrace" json:"stack_trace,omitempty"`
	// Breadcrumbs to provide info for what the user was doing prior to the error
	Breadcrumbs []*Breadcrumb `protobuf:"bytes,11,rep,name=breadcrumbs" json:"breadcrumbs,omitempty"`
	// Information about the user that the error occured for
	User *User `protobuf:"bytes,12,opt,name=user" json:"user,omitempty"`
	// Arbitray map of extra information to include with the report
	Extra map[string]string `protobuf:"bytes,13,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ErrorReport) Reset()                    { *m = ErrorReport{} }
func (m *ErrorReport) String() string            { return proto.CompactTextString(m) }
func (*ErrorReport) ProtoMessage()               {}
func (*ErrorReport) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ErrorReport) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *ErrorReport) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ErrorReport) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ErrorReport) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *ErrorReport) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ErrorReport) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ErrorReport) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ErrorReport) GetException() *Exception {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *ErrorReport) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorReport) GetStackTrace() *Stacktrace {
	if m != nil {
		return m.StackTrace
	}
	return nil
}

func (m *ErrorReport) GetBreadcrumbs() []*Breadcrumb {
	if m != nil {
		return m.Breadcrumbs
	}
	return nil
}

func (m *ErrorReport) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ErrorReport) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "heimdall.v1.User")
	proto.RegisterType((*Request)(nil), "heimdall.v1.Request")
	proto.RegisterType((*Exception)(nil), "heimdall.v1.Exception")
	proto.RegisterType((*Stacktrace)(nil), "heimdall.v1.Stacktrace")
	proto.RegisterType((*Stacktrace_Frame)(nil), "heimdall.v1.Stacktrace.Frame")
	proto.RegisterType((*Breadcrumb)(nil), "heimdall.v1.Breadcrumb")
	proto.RegisterType((*ErrorReport)(nil), "heimdall.v1.ErrorReport")
}

func init() { proto.RegisterFile("heimdall/v1/error_reporting.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xdb, 0x38,
	0x10, 0x85, 0x1c, 0xf9, 0x43, 0xa3, 0xec, 0x62, 0x97, 0xc8, 0x26, 0x5a, 0x01, 0x41, 0x1c, 0x17,
	0x05, 0x72, 0x92, 0x91, 0xb4, 0x41, 0x9c, 0xf4, 0x94, 0xa2, 0x2e, 0xda, 0x4b, 0x0f, 0x6a, 0x7a,
	0x36, 0x68, 0x69, 0xec, 0xb0, 0x91, 0x44, 0x95, 0xa2, 0x8c, 0xf8, 0xd6, 0x53, 0x7f, 0x41, 0xd1,
	0x5f, 0xd7, 0x6b, 0xff, 0x47, 0x41, 0x4a, 0x94, 0x65, 0x20, 0x01, 0x9a, 0x9b, 0xde, 0xcc, 0x1b,
	0x9a, 0x8f, 0xef, 0x8d, 0xe1, 0xf8, 0x16, 0x59, 0x1a, 0xd3, 0x24, 0x19, 0xaf, 0x4e, 0xc7, 0x28,
	0x04, 0x17, 0x33, 0x81, 0x39, 0x17, 0x92, 0x65, 0xcb, 0x20, 0x17, 0x5c, 0x72, 0xe2, 0x1a, 0x4a,
	0xb0, 0x3a, 0xf5, 0x8f, 0x96, 0x9c, 0x2f, 0x13, 0x1c, 0xeb, 0xd6, 0xbc, 0x5c, 0x8c, 0x25, 0x4b,
	0xb1, 0x90, 0x34, 0xcd, 0x2b, 0xf6, 0x68, 0x09, 0xf6, 0xa7, 0x02, 0x05, 0xf9, 0x1b, 0x3a, 0x2c,
	0xf6, 0xac, 0xa1, 0x75, 0xe2, 0x84, 0x1d, 0x16, 0x93, 0x3d, 0xe8, 0x62, 0x4a, 0x59, 0xe2, 0x75,
	0x74, 0xa9, 0x02, 0xc4, 0x87, 0x41, 0x59, 0xa0, 0xc8, 0x68, 0x8a, 0xde, 0x8e, 0x6e, 0x34, 0x98,
	0x1c, 0x02, 0xb0, 0x7c, 0x46, 0xe3, 0x58, 0x60, 0x51, 0x78, 0xb6, 0xee, 0x3a, 0x2c, 0xbf, 0xae,
	0x0a, 0xa3, 0xef, 0x16, 0xf4, 0x43, 0xfc, 0x52, 0x62, 0x21, 0xc9, 0x2b, 0xe8, 0xdf, 0x22, 0x8d,
	0x51, 0x14, 0x9e, 0x35, 0xdc, 0x39, 0x71, 0xcf, 0x8e, 0x83, 0xd6, 0xa5, 0x83, 0x9a, 0x16, 0xbc,
	0xab, 0x38, 0xd3, 0x4c, 0x8a, 0x75, 0x68, 0x26, 0xc8, 0x3f, 0xb0, 0x53, 0x0a, 0x73, 0x2f, 0xf5,
	0xe9, 0x5f, 0xc1, 0x6e, 0x9b, 0xaa, 0x18, 0x77, 0xb8, 0xae, 0xc5, 0xa8, 0x4f, 0xa5, 0x66, 0x45,
	0x93, 0x12, 0x8d, 0x1a, 0x0d, 0xae, 0x3a, 0x13, 0x6b, 0xf4, 0xcd, 0x02, 0x67, 0x7a, 0x1f, 0x61,
	0x2e, 0x19, 0xcf, 0x08, 0x01, 0x5b, 0xae, 0x73, 0xac, 0x47, 0xf5, 0xf7, 0xc3, 0xb3, 0x64, 0x1f,
	0x7a, 0x29, 0x8f, 0xcb, 0xc4, 0xbc, 0x43, 0x8d, 0xc8, 0x05, 0x40, 0x21, 0x69, 0x74, 0x27, 0x05,
	0x8d, 0x50, 0xbf, 0x82, 0x7b, 0x76, 0xb0, 0xa5, 0xee, 0x63, 0xd3, 0x0e, 0x5b, 0xd4, 0xd1, 0x4f,
	0x0b, 0x60, 0xd3, 0x22, 0xe7, 0xd0, 0x5b, 0x08, 0x9a, 0xa2, 0x79, 0xa1, 0xc3, 0x47, 0xce, 0x08,
	0xde, 0x2a, 0x56, 0x58, 0x93, 0xfd, 0x1f, 0x16, 0x74, 0x75, 0x45, 0x59, 0xb5, 0x60, 0x09, 0x6a,
	0xab, 0x2a, 0x39, 0x0d, 0x26, 0x47, 0xe0, 0x26, 0x2c, 0xc3, 0x59, 0x56, 0xa6, 0x73, 0x14, 0xb5,
	0x30, 0x50, 0xa5, 0x0f, 0xba, 0xa2, 0xbc, 0x8c, 0x78, 0x62, 0xfa, 0x95, 0x42, 0x27, 0xe2, 0x49,
	0xdd, 0x56, 0x67, 0x97, 0x59, 0xa4, 0x9e, 0xac, 0x36, 0xba, 0xc1, 0xe4, 0x3f, 0xe8, 0xb1, 0x6c,
	0x46, 0xf3, 0xdc, 0xeb, 0x0e, 0xad, 0x93, 0x41, 0xd8, 0x65, 0xd9, 0x75, 0x9e, 0x8f, 0xbe, 0x76,
	0x00, 0x5e, 0x0b, 0xa4, 0x71, 0x24, 0xca, 0x74, 0x4e, 0x26, 0xe0, 0x34, 0x49, 0xd4, 0xd7, 0x73,
	0xcf, 0xfc, 0xa0, 0xca, 0x6a, 0x60, 0xb2, 0x1a, 0xdc, 0x18, 0x46, 0xb8, 0x21, 0x37, 0x16, 0x75,
	0x5a, 0x16, 0x79, 0xd0, 0x4f, 0xb1, 0x28, 0xe8, 0xd2, 0xb8, 0x61, 0x20, 0x39, 0x07, 0x3b, 0xa6,
	0x92, 0x7a, 0xf6, 0x03, 0x31, 0xdb, 0x5c, 0x27, 0x78, 0x43, 0x25, 0xad, 0x62, 0xa6, 0xe9, 0x4a,
	0x60, 0x44, 0x25, 0x2e, 0xb9, 0x58, 0x6b, 0x19, 0x4e, 0xd8, 0x60, 0xff, 0x02, 0x9c, 0x86, 0xfe,
	0xa4, 0xa8, 0xfd, 0xb2, 0xc1, 0x9d, 0xaa, 0x95, 0x0d, 0xf5, 0xc6, 0x92, 0xff, 0x61, 0x80, 0x2b,
	0xcc, 0xe4, 0xac, 0x59, 0xbc, 0xbe, 0xc6, 0xef, 0x63, 0x25, 0x28, 0x17, 0xfc, 0x33, 0x46, 0xb2,
	0x3e, 0xc6, 0x40, 0x32, 0x04, 0x17, 0xb3, 0x15, 0x13, 0x3c, 0x4b, 0x31, 0x93, 0xb5, 0xdc, 0x76,
	0x49, 0xcd, 0x0a, 0x4c, 0x90, 0x16, 0x58, 0x7b, 0x63, 0xa0, 0x52, 0x95, 0x27, 0x54, 0x2e, 0xb8,
	0x48, 0x8d, 0x2a, 0x83, 0xb7, 0x0d, 0xe9, 0x3d, 0xc5, 0x90, 0x40, 0xfd, 0x9e, 0x5e, 0x58, 0xaf,
	0xaf, 0xe7, 0xf6, 0x1e, 0x5a, 0xe6, 0xd0, 0x90, 0xc8, 0x4b, 0x70, 0xd0, 0x2c, 0x9c, 0x37, 0xd0,
	0x13, 0xfb, 0x5b, 0x13, 0xcd, 0x3a, 0x86, 0x1b, 0x62, 0xdb, 0x62, 0x67, 0xdb, 0xe2, 0x09, 0xb8,
	0x7a, 0x8d, 0x66, 0xd5, 0xca, 0xc1, 0x9f, 0xac, 0xdc, 0x8d, 0xde, 0xb1, 0x4b, 0x70, 0xe7, 0x4d,
	0x06, 0x0a, 0xcf, 0xd5, 0x19, 0x39, 0x78, 0x24, 0x23, 0x61, 0x9b, 0x4b, 0x9e, 0x83, 0xad, 0xfe,
	0xf8, 0xbc, 0x5d, 0xfd, 0x6b, 0xff, 0x6e, 0xcd, 0xa8, 0xff, 0xd3, 0x50, 0xb7, 0xc9, 0x25, 0x74,
	0xf1, 0x5e, 0x0a, 0xea, 0xfd, 0xa5, 0xcf, 0x7e, 0xb6, 0xad, 0x73, 0x93, 0x85, 0x60, 0xaa, 0x58,
	0x55, 0x02, 0xab, 0x09, 0x7f, 0x02, 0xb0, 0x29, 0x3e, 0x25, 0x67, 0xf3, 0x9e, 0xf6, 0xeb, 0xc5,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x4c, 0x75, 0xb1, 0x2c, 0x06, 0x00, 0x00,
}
