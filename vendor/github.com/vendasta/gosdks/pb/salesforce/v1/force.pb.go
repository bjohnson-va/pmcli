// Code generated by protoc-gen-go.
// source: force.proto
// DO NOT EDIT!

package salesforce_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The installation key of a particular Vendasta application install (on customer's salesforce instance)
type InstallationKey struct {
	// Application key, which identifies which application installation instance
	ConsumerKey string `protobuf:"bytes,1,opt,name=consumer_key,json=consumerKey" json:"consumer_key,omitempty"`
	// Application secret, which is used to verify ownership of the application
	ConsumerSecret string `protobuf:"bytes,2,opt,name=consumer_secret,json=consumerSecret" json:"consumer_secret,omitempty"`
	// The Salesforce instance to sync
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// Indicates that this installation is to a sandbox org
	IsSandbox bool `protobuf:"varint,4,opt,name=is_sandbox,json=isSandbox" json:"is_sandbox,omitempty"`
}

func (m *InstallationKey) Reset()                    { *m = InstallationKey{} }
func (m *InstallationKey) String() string            { return proto.CompactTextString(m) }
func (*InstallationKey) ProtoMessage()               {}
func (*InstallationKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *InstallationKey) GetConsumerKey() string {
	if m != nil {
		return m.ConsumerKey
	}
	return ""
}

func (m *InstallationKey) GetConsumerSecret() string {
	if m != nil {
		return m.ConsumerSecret
	}
	return ""
}

func (m *InstallationKey) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *InstallationKey) GetIsSandbox() bool {
	if m != nil {
		return m.IsSandbox
	}
	return false
}

// Stores details about synchronization of a single object
type SyncSetting struct {
	// The name of the Salesforce entity
	EntityName string `protobuf:"bytes,1,opt,name=entity_name,json=entityName" json:"entity_name,omitempty"`
	// When set updates to Vendasta platform are synced to Salesforce
	SyncSalesforce bool `protobuf:"varint,2,opt,name=sync_salesforce,json=syncSalesforce" json:"sync_salesforce,omitempty"`
	// Shen set updates to Salesforce platform are synced to Vendasta
	SyncVendasta bool `protobuf:"varint,3,opt,name=sync_vendasta,json=syncVendasta" json:"sync_vendasta,omitempty"`
}

func (m *SyncSetting) Reset()                    { *m = SyncSetting{} }
func (m *SyncSetting) String() string            { return proto.CompactTextString(m) }
func (*SyncSetting) ProtoMessage()               {}
func (*SyncSetting) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SyncSetting) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

func (m *SyncSetting) GetSyncSalesforce() bool {
	if m != nil {
		return m.SyncSalesforce
	}
	return false
}

func (m *SyncSetting) GetSyncVendasta() bool {
	if m != nil {
		return m.SyncVendasta
	}
	return false
}

// Stores details about a single market's Salesforce Integration
type Integration struct {
	// Unique id of this particular integration
	IntegrationId string `protobuf:"bytes,1,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	// The Vendasta partner this integration is built for
	PartnerId string `protobuf:"bytes,2,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The Vendasta market to sync
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// Salesforce installation key
	SalesforceInstallationKey *InstallationKey `protobuf:"bytes,4,opt,name=salesforce_installation_key,json=salesforceInstallationKey" json:"salesforce_installation_key,omitempty"`
	// The set of entities being synced and the associated details
	SyncSettings []*SyncSetting `protobuf:"bytes,5,rep,name=sync_settings,json=syncSettings" json:"sync_settings,omitempty"`
	// Salesforce access token (ephemeral)
	AccessToken string `protobuf:"bytes,6,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	// Salesforce refresh token (long lived)
	RefreshToken string `protobuf:"bytes,7,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *Integration) Reset()                    { *m = Integration{} }
func (m *Integration) String() string            { return proto.CompactTextString(m) }
func (*Integration) ProtoMessage()               {}
func (*Integration) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Integration) GetIntegrationId() string {
	if m != nil {
		return m.IntegrationId
	}
	return ""
}

func (m *Integration) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *Integration) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *Integration) GetSalesforceInstallationKey() *InstallationKey {
	if m != nil {
		return m.SalesforceInstallationKey
	}
	return nil
}

func (m *Integration) GetSyncSettings() []*SyncSetting {
	if m != nil {
		return m.SyncSettings
	}
	return nil
}

func (m *Integration) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Integration) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type CreateRequest struct {
	// The details of the integration to create
	Integration *Integration `protobuf:"bytes,1,opt,name=integration" json:"integration,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CreateRequest) GetIntegration() *Integration {
	if m != nil {
		return m.Integration
	}
	return nil
}

type CreateResponse struct {
	// ID of the created Integration
	IntegrationId string `protobuf:"bytes,1,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CreateResponse) GetIntegrationId() string {
	if m != nil {
		return m.IntegrationId
	}
	return ""
}

type DeleteRequest struct {
	// The Vendasta partner corresponding to the integration of interest
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The Vendasta market corresponding to the integration of interest
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DeleteRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *DeleteRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type GetRequest struct {
	// The Vendasta partner corresponding to the integration of interest
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The Vendasta market corresponding to the integration of interest
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GetRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *GetRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type IntegrationSummary struct {
	// The integration id
	IntegrationId string `protobuf:"bytes,1,opt,name=integration_id,json=integrationId" json:"integration_id,omitempty"`
	// The Vendasta partner ID
	PartnerId string `protobuf:"bytes,2,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The Vendasta market bing synchronized
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// The Salesforce instance being synchronized
	SalesforceInstanceId string `protobuf:"bytes,4,opt,name=salesforce_instance_id,json=salesforceInstanceId" json:"salesforce_instance_id,omitempty"`
	// Indicates whether this is a sandbox org
	IsSandbox bool `protobuf:"varint,5,opt,name=is_sandbox,json=isSandbox" json:"is_sandbox,omitempty"`
}

func (m *IntegrationSummary) Reset()                    { *m = IntegrationSummary{} }
func (m *IntegrationSummary) String() string            { return proto.CompactTextString(m) }
func (*IntegrationSummary) ProtoMessage()               {}
func (*IntegrationSummary) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *IntegrationSummary) GetIntegrationId() string {
	if m != nil {
		return m.IntegrationId
	}
	return ""
}

func (m *IntegrationSummary) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *IntegrationSummary) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *IntegrationSummary) GetSalesforceInstanceId() string {
	if m != nil {
		return m.SalesforceInstanceId
	}
	return ""
}

func (m *IntegrationSummary) GetIsSandbox() bool {
	if m != nil {
		return m.IsSandbox
	}
	return false
}

type ListRequest struct {
	// The maximum number of results to return in a single response
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Optional cursor for handling large lists
	Cursor string `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type ListResponse struct {
	// A list of integration summaries (no tokens or keys)
	Results []*IntegrationSummary `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	// If more results exist, this cursor can be used to retrieve them
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Whether or not more results exist
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ListResponse) GetResults() []*IntegrationSummary {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type UpdateAccessTokenRequest struct {
	// The Vendasta partner corresponding to the integration of interest
	PartnerId string `protobuf:"bytes,1,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The Vendasta market corresponding to the integration of interest
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// The new AccessToken
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (m *UpdateAccessTokenRequest) Reset()                    { *m = UpdateAccessTokenRequest{} }
func (m *UpdateAccessTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccessTokenRequest) ProtoMessage()               {}
func (*UpdateAccessTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *UpdateAccessTokenRequest) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *UpdateAccessTokenRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *UpdateAccessTokenRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func init() {
	proto.RegisterType((*InstallationKey)(nil), "salesforce.v1.InstallationKey")
	proto.RegisterType((*SyncSetting)(nil), "salesforce.v1.SyncSetting")
	proto.RegisterType((*Integration)(nil), "salesforce.v1.Integration")
	proto.RegisterType((*CreateRequest)(nil), "salesforce.v1.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "salesforce.v1.CreateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "salesforce.v1.DeleteRequest")
	proto.RegisterType((*GetRequest)(nil), "salesforce.v1.GetRequest")
	proto.RegisterType((*IntegrationSummary)(nil), "salesforce.v1.IntegrationSummary")
	proto.RegisterType((*ListRequest)(nil), "salesforce.v1.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "salesforce.v1.ListResponse")
	proto.RegisterType((*UpdateAccessTokenRequest)(nil), "salesforce.v1.UpdateAccessTokenRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SalesforceIntegration service

type SalesforceIntegrationClient interface {
	// Adds a new Salesforce integration to a Parnter or Partner-Market
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Removes an existing Salesforce integration by ID
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Retrieves a specific integration
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Integration, error)
	// Lists all existing integrations (Vendasta internal only)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Updates the current Access Token for an integration
	UpdateAccessToken(ctx context.Context, in *UpdateAccessTokenRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type salesforceIntegrationClient struct {
	cc *grpc.ClientConn
}

func NewSalesforceIntegrationClient(cc *grpc.ClientConn) SalesforceIntegrationClient {
	return &salesforceIntegrationClient{cc}
}

func (c *salesforceIntegrationClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/salesforce.v1.SalesforceIntegration/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceIntegrationClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/salesforce.v1.SalesforceIntegration/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceIntegrationClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := grpc.Invoke(ctx, "/salesforce.v1.SalesforceIntegration/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceIntegrationClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/salesforce.v1.SalesforceIntegration/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesforceIntegrationClient) UpdateAccessToken(ctx context.Context, in *UpdateAccessTokenRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/salesforce.v1.SalesforceIntegration/UpdateAccessToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SalesforceIntegration service

type SalesforceIntegrationServer interface {
	// Adds a new Salesforce integration to a Parnter or Partner-Market
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Removes an existing Salesforce integration by ID
	Delete(context.Context, *DeleteRequest) (*google_protobuf.Empty, error)
	// Retrieves a specific integration
	Get(context.Context, *GetRequest) (*Integration, error)
	// Lists all existing integrations (Vendasta internal only)
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Updates the current Access Token for an integration
	UpdateAccessToken(context.Context, *UpdateAccessTokenRequest) (*google_protobuf.Empty, error)
}

func RegisterSalesforceIntegrationServer(s *grpc.Server, srv SalesforceIntegrationServer) {
	s.RegisterService(&_SalesforceIntegration_serviceDesc, srv)
}

func _SalesforceIntegration_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceIntegrationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/salesforce.v1.SalesforceIntegration/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceIntegrationServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceIntegration_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceIntegrationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/salesforce.v1.SalesforceIntegration/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceIntegrationServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceIntegration_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceIntegrationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/salesforce.v1.SalesforceIntegration/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceIntegrationServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceIntegration_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceIntegrationServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/salesforce.v1.SalesforceIntegration/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceIntegrationServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalesforceIntegration_UpdateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesforceIntegrationServer).UpdateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/salesforce.v1.SalesforceIntegration/UpdateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesforceIntegrationServer).UpdateAccessToken(ctx, req.(*UpdateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SalesforceIntegration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "salesforce.v1.SalesforceIntegration",
	HandlerType: (*SalesforceIntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SalesforceIntegration_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SalesforceIntegration_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SalesforceIntegration_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SalesforceIntegration_List_Handler,
		},
		{
			MethodName: "UpdateAccessToken",
			Handler:    _SalesforceIntegration_UpdateAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "force.proto",
}

func init() { proto.RegisterFile("force.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 730 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x55, 0xd1, 0x4e, 0xdb, 0x48,
	0x14, 0xc5, 0x09, 0x84, 0xe4, 0x3a, 0x09, 0xda, 0xd1, 0x2e, 0x32, 0xc9, 0xb2, 0x0b, 0x5e, 0xad,
	0xe0, 0x29, 0x68, 0xd9, 0x95, 0xf6, 0x61, 0x57, 0xbb, 0xa5, 0xb4, 0xa2, 0x11, 0xa5, 0x0f, 0x76,
	0xcb, 0x63, 0xad, 0xc1, 0xb9, 0x04, 0x8b, 0x78, 0x9c, 0xce, 0x4c, 0x10, 0x46, 0x7d, 0xef, 0x57,
	0xf4, 0x8f, 0xfa, 0x03, 0xfd, 0x98, 0x4a, 0xd5, 0xcc, 0x38, 0xb1, 0xe3, 0x10, 0xd4, 0x07, 0xd4,
	0x47, 0x9f, 0x39, 0xbe, 0xbe, 0xf7, 0x9c, 0x7b, 0x3c, 0x60, 0x5f, 0x26, 0x3c, 0xc4, 0xde, 0x98,
	0x27, 0x32, 0x21, 0x2d, 0x41, 0x47, 0x28, 0x0c, 0x72, 0xf3, 0x47, 0xa7, 0x3b, 0x4c, 0x92, 0xe1,
	0x08, 0x0f, 0xf4, 0xe1, 0xc5, 0xe4, 0xf2, 0x00, 0xe3, 0xb1, 0x4c, 0x0d, 0xd7, 0xfd, 0x68, 0xc1,
	0x46, 0x9f, 0x09, 0x49, 0x47, 0x23, 0x2a, 0xa3, 0x84, 0x9d, 0x62, 0x4a, 0x76, 0xa1, 0x19, 0x26,
	0x4c, 0x4c, 0x62, 0xe4, 0xc1, 0x35, 0xa6, 0x8e, 0xb5, 0x63, 0xed, 0x37, 0x3c, 0x7b, 0x8a, 0x29,
	0xca, 0x1e, 0x6c, 0xcc, 0x28, 0x02, 0x43, 0x8e, 0xd2, 0xa9, 0x68, 0x56, 0x7b, 0x0a, 0xfb, 0x1a,
	0x25, 0xbf, 0x82, 0x1d, 0xa9, 0xf2, 0x2c, 0xc4, 0x20, 0x1a, 0x38, 0x55, 0x4d, 0x82, 0x29, 0xd4,
	0x1f, 0x90, 0x6d, 0x80, 0x48, 0x04, 0x82, 0xb2, 0xc1, 0x45, 0x72, 0xeb, 0xac, 0xee, 0x58, 0xfb,
	0x75, 0xaf, 0x11, 0x09, 0xdf, 0x00, 0xee, 0x7b, 0xb0, 0xfd, 0x94, 0x85, 0x3e, 0x4a, 0x19, 0xb1,
	0xa1, 0x2a, 0x87, 0x4c, 0x46, 0x32, 0x0d, 0x18, 0x8d, 0x31, 0xeb, 0x0c, 0x0c, 0xf4, 0x8a, 0xc6,
	0xa8, 0x1a, 0x13, 0x29, 0x0b, 0x83, 0x5c, 0x02, 0xdd, 0x58, 0xdd, 0x6b, 0x2b, 0xd8, 0x9f, 0xa1,
	0xe4, 0x37, 0x68, 0x69, 0xe2, 0x0d, 0xb2, 0x01, 0x15, 0x92, 0xea, 0xd6, 0xea, 0x5e, 0x53, 0x81,
	0xe7, 0x19, 0xe6, 0x7e, 0xae, 0x80, 0xdd, 0x67, 0x12, 0x87, 0x5c, 0x8b, 0x43, 0x7e, 0x87, 0x76,
	0x94, 0x3f, 0xaa, 0x81, 0x4c, 0x07, 0xad, 0x02, 0x6a, 0x66, 0x1a, 0x53, 0x2e, 0x19, 0x72, 0x45,
	0x31, 0xc2, 0x34, 0x32, 0xa4, 0x3f, 0x20, 0x5d, 0x68, 0xc4, 0x94, 0x5f, 0xa3, 0xcc, 0x15, 0xa9,
	0x1b, 0xa0, 0x3f, 0x20, 0x6f, 0xa1, 0x9b, 0xf7, 0x1e, 0x44, 0x05, 0x6b, 0xb4, 0x17, 0x4a, 0x20,
	0xfb, 0xf0, 0x97, 0xde, 0x9c, 0xc5, 0xbd, 0x92, 0x83, 0xde, 0x56, 0x7e, 0x5c, 0x36, 0xf7, 0xff,
	0x6c, 0x6e, 0x61, 0x14, 0x15, 0xce, 0xda, 0x4e, 0x75, 0xdf, 0x3e, 0xec, 0x94, 0x2a, 0x16, 0x44,
	0x37, 0x9a, 0x64, 0x0f, 0x42, 0x6d, 0x07, 0x0d, 0x43, 0x14, 0x22, 0x90, 0xc9, 0x35, 0x32, 0xa7,
	0x66, 0xb6, 0xc3, 0x60, 0xaf, 0x15, 0xa4, 0xb4, 0xe5, 0x78, 0xc9, 0x51, 0x5c, 0x65, 0x9c, 0x75,
	0xcd, 0x69, 0x66, 0xa0, 0x26, 0xb9, 0x67, 0xd0, 0x3a, 0xe6, 0x48, 0x25, 0x7a, 0xf8, 0x6e, 0x82,
	0x42, 0x92, 0x7f, 0xd5, 0xaa, 0xcc, 0x64, 0xd4, 0xca, 0x2e, 0xf6, 0x55, 0x70, 0xc3, 0x2b, 0xd2,
	0xdd, 0xbf, 0xa1, 0x3d, 0x2d, 0x27, 0xc6, 0x09, 0x13, 0xf8, 0x8d, 0x66, 0xb9, 0xa7, 0xd0, 0x7a,
	0x86, 0x23, 0xcc, 0xfb, 0x98, 0x77, 0xcf, 0x7a, 0xd0, 0xbd, 0xca, 0xbc, 0x7b, 0xee, 0x0b, 0x80,
	0x13, 0x94, 0x8f, 0x51, 0xe9, 0x93, 0x05, 0xa4, 0x30, 0xac, 0x3f, 0x89, 0x63, 0xca, 0xd3, 0xef,
	0xb1, 0x81, 0x7f, 0xc1, 0x66, 0x79, 0x03, 0xb3, 0xf4, 0xae, 0x6a, 0xe6, 0x8f, 0xa5, 0xe5, 0xba,
	0x2f, 0xc7, 0x6b, 0xe5, 0x1c, 0x3f, 0x05, 0xfb, 0x65, 0x24, 0x66, 0xca, 0x74, 0xa1, 0x31, 0xa6,
	0x43, 0x0c, 0x44, 0x74, 0x67, 0x52, 0xbc, 0xe6, 0xd5, 0x15, 0xe0, 0x47, 0x77, 0x48, 0x36, 0xa1,
	0x16, 0x4e, 0xb8, 0x48, 0x78, 0xd6, 0x78, 0xf6, 0xe4, 0x7e, 0xb0, 0xa0, 0x69, 0x8a, 0x64, 0x0e,
	0xff, 0x03, 0xeb, 0x1c, 0xc5, 0x64, 0x24, 0x85, 0x63, 0xe9, 0x2d, 0xde, 0x5d, 0xbe, 0x2d, 0x99,
	0x80, 0xde, 0xf4, 0x0d, 0xf5, 0x2b, 0x61, 0x78, 0x2b, 0x83, 0xb9, 0x4f, 0x81, 0x82, 0x8e, 0x35,
	0x42, 0xb6, 0xa0, 0x7e, 0x45, 0x45, 0x10, 0x27, 0x1c, 0xb3, 0x9f, 0xc3, 0xfa, 0x15, 0x15, 0x67,
	0x09, 0x47, 0x37, 0x05, 0xe7, 0xcd, 0x78, 0x40, 0x25, 0x1e, 0xe5, 0x5b, 0xff, 0x08, 0xa6, 0x2f,
	0x64, 0xab, 0xba, 0x90, 0xad, 0xc3, 0x2f, 0x15, 0xf8, 0xc9, 0x2f, 0x18, 0x90, 0xff, 0x9c, 0x4e,
	0xa0, 0x66, 0x12, 0x40, 0x7e, 0x2e, 0xc9, 0x30, 0x97, 0xb3, 0xce, 0xf6, 0x92, 0x53, 0x23, 0xaa,
	0xbb, 0x42, 0x9e, 0x40, 0xcd, 0x24, 0x62, 0xa1, 0xd0, 0x5c, 0x50, 0x3a, 0x9b, 0x3d, 0x73, 0xb3,
	0xf4, 0xa6, 0x37, 0x4b, 0xef, 0xb9, 0xba, 0x59, 0xdc, 0x15, 0xf2, 0x1f, 0x54, 0x4f, 0x50, 0x92,
	0xad, 0xd2, 0xeb, 0x79, 0x34, 0x3a, 0x0f, 0xe4, 0xda, 0x5d, 0x21, 0x47, 0xb0, 0xaa, 0x8c, 0x26,
	0x65, 0x56, 0x61, 0x85, 0x3a, 0xdd, 0x7b, 0xcf, 0x66, 0x43, 0x9c, 0xc3, 0x0f, 0x0b, 0x16, 0x91,
	0xbd, 0xd2, 0x3b, 0xcb, 0x4c, 0x5c, 0x3e, 0xda, 0x45, 0x4d, 0x23, 0x7f, 0x7e, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x25, 0x01, 0xee, 0x72, 0x07, 0x00, 0x00,
}
