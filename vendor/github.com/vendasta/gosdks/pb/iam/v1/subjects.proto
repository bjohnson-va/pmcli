syntax = "proto3";

package iam.v1;

import "google/protobuf/timestamp.proto";

// Indicates the sort order for IAM.SearchSubject
enum OrderByDirection {
    ASCENDING = 0;
    DESCENDING = 1;
}

// A subject represents a specific persona for a specified context.
message Subject {
    // A subject ID is a globally unique id across all personas and contexts.
    string subject_id = 1;

    // Email of the subject.
    string email = 2;

    // Deprecated: use struct_attributes instead
    // The set of attributes that belongs to the subject persona.
    repeated MultiValueAttribute attributes = 4 [deprecated=true];

    // The time when the subject persona was crated
    google.protobuf.Timestamp created = 5;

    // The time when the subject peronsa was last updated.
    google.protobuf.Timestamp updated = 6;

    // The time when the subject peronsa last authenticated with IAM.AuthenticateSubject
    google.protobuf.Timestamp last_login = 7;

    // Public keys that are able to validate tokens issued by the subject.
    repeated PublicKey public_keys = 8;

    // The set of struct attributes that belong to the subject persona.
    StructAttribute struct_attributes = 9;
}

// A SubjectResult wraps a subject since nil values are not allowed in a repeated set. Therefore subject can be nil.
message SubjectResult {
    Subject subject = 1;
}

// Represents a key-value pair for adding/removing values in mutate, as well as filtering results in IAM.SearchSubject.
message SingleValueAttribute {
    string key = 1;
    string value = 2;
}

// Represents a key-[]value pair used for representing the known attributes on a subject, as well as replace
// in IAM.MutateSubject.
message MultiValueAttribute {
    string key = 1;
    repeated string values = 2;
}

message StructAttribute {
    map<string, Attribute> attributes = 1;
}

message ListAttribute {
    repeated Attribute attributes = 1;
}

message GeoPointAttribute {
    double latitude = 1;
    double longitude = 2;
}

message Attribute {
    oneof kind {
        // Represents a int64 attribute.
        int64 int_attribute = 1;

        // Represents a double attribute.
        double double_attribute = 2;

        // Represents a string attribute.
        string string_attribute = 3;

        // Represents a boolean attribute.
        bool bool_attribute = 4;

        // Represents a structured `Attribute`.
        StructAttribute struct_attribute = 5;

        // Represents a repeated `Attribute`.
        ListAttribute list_attribute = 6;

        // Represents a timestamp attribute.
        google.protobuf.Timestamp timestamp_attribute = 7;

        // Represents a geopoint attribute.
        GeoPointAttribute geopoint_attribute = 8;
    }
}

// Query allows callers of IAM.SearchSubject to do full text search against the attributes of a scoped set of subjects.
// search_term will be queried against the supplied set of attribute keys.
message Query {
    string search_term = 1;
    repeated string attribute_keys = 2;
}

// Mutation mutates a subject in a MutateSubject request.
message Mutation {
    oneof operation {
        // Deprecated: use add_attributes instead
        // Will add the value to the list of values at that key or if it doesnt exist will set the attribute
        // to the given value.
        SingleValueAttribute add = 1 [deprecated=true];

        // Deprecated: use replace_attributes instead
        // Replace will delete the values at the given key and use the given list of values in its place.
        MultiValueAttribute replace = 2 [deprecated=true];

        // Deprecated: use remove_attributes instead
        // Remove will delete the values at the given key
        SingleValueAttribute remove = 3 [deprecated=true];

        // Will drop the key specified. Use periods to drop inner keys (name.inner_name)
        string drop_key = 4;

        // Will set and replace the keys in the struct to the corresponding attributes
        StructAttribute replace_attributes = 5;

        // Will add values to the corresponding attributes
        StructAttribute add_attributes = 6;

        // Will remove values from the corresponding attributes
        StructAttribute remove_attributes = 7;
    }
}

// Indicates a context that is scoped to a type/namespace pair.
message NamespacedContext {
    string namespace = 1;
    string type = 2;
}

// Indicates a context that is scoped to a type.
message TypedContext {
    string type = 1;
}

// Context scopes a request to a specific persona.  A persona can either be a typed or a typed/namespace unique pair.
// A typed context scopes a persona to a specific type, such as a partner user.
// A namespaced context scopes a persona to a specific type and a given namespace, such as an SMB that belongs to a
// specific partner.
message Context {
    oneof context {
        NamespacedContext namespaced = 1;
        TypedContext typed = 2;
    }
}

// PublicKey is a key capable of validating a JWT that has been signed with a private key by someone else.
message PublicKey {
    // key is the public key
    string key = 1;

    // Identifier for a public key. The `kid` claim in a JWT specifies this field, telling us which key to verify the JWT with.
    string id = 2;
}

// Request message for IAM.RegisterSubject
message RegisterSubjectRequest {
    // Context of the persona
    Context context = 1;

    // The email of the persona
    string email = 2;

    // The plain text password to set for the persona
    string password = 3;

    // Deprecated: use struct_attributes instead
    // The set of attributes that belong to the subject persona.
    repeated MultiValueAttribute attributes = 4 [deprecated=true];

    // The set of struct attributes that belong to the subject persona.
    StructAttribute struct_attributes = 5;
}

// Request message for IAM.GetSubjects
message GetSubjectsRequest {
    Context context = 1;
    repeated string subject_ids = 2;
}

// Request message for IAM.GetSubjectsByEmail
message GetSubjectsByEmailRequest {
    Context context = 1;
    repeated string emails = 2;
}

// Request message for IAM.GetSubjectBySession
message GetSubjectBySessionRequest {
    string session = 1;
    Context context = 2;
}

// A Persona is a Subject and Context combination that provides the ability for cross context usage for a single subject.
message Persona {
    Subject subject = 1;
    Context context = 2;
}

// Request message for IAM.ListPersonas
message ListPersonasRequest {
    // Session is required and is an IAM session for the current subject.
    string session = 1;

    // Cursor allows paging of results, the next_cursor returned by the last response is expected.
    string cursor = 2;

    // The number of results to return.
    int64 page_size = 3;

    // Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will
    // allow retrieving Personas across all types.
    string type = 4;
}

// Request message for IAM.GetTokenRequest
message GetTokenRequest {

}

// Request message for IAM.AuthenticateSubject
message AuthenticateSubjectRequest {
    Context context = 1;
    string email = 2;
    string password = 3;
}

// Request message for IAM.DeleteSubject
message DeleteSubjectRequest {

    // Context is required which indicates the specific persona of a given subject.
    Context context = 1;

    // The subject id that will be deleted.
    string subject_id = 2;
}

// Request message for IAM.ResetSubjectPassword
message ResetSubjectPasswordRequest {

    // Context is required which indicates the specific persona of a given subject.
    Context context = 1;

    // The subject id to update.
    string subject_id = 2;

    // The new password to set on the subject persona.
    string new_password = 3;
}

// Request message for IAM.SearchSubject
message SearchSubjectRequest {
    // Context is required, which scopes the search to a specific set of personas.
    Context context = 1;

    // Query will be used as a full text search query with partial matching.
    Query query = 2;

    // Filters will be applied as a boolean filter with no partial matching.
    repeated SingleValueAttribute filters = 3;

    // Indicates the attribute to order by.
    string order_by = 4;

    // Indicates to sort by ascending or descending.
    OrderByDirection order_by_direction = 5;

    // Cursor allows paging of results, the next_cursor returned by the last response is expected.
    string cursor = 6;

    // The number of results to return.
    int64 page_size = 7;
}

// Request message for IAM.GetSubjectContext
message GetSubjectContextRequest {
    string subject_id = 1;
}

// Request message for IAM.MutateAttributes
message MutateAttributesRequest {
    // Context is required which indicates the specific persona of a given subject.
    Context context = 1;

    // The subject id to mutate.
    string subject_id = 2;

    // A list of mutations that will be applied atomically.
    repeated Mutation mutations = 3;
}

// Request message for IAM.ChangeSubjectEmail
message ChangeSubjectEmailRequest {
    Context context = 1;
    string subject_id = 2;
    string new_email = 3;
}


// Response message for IAM.RegisterSubject
message RegisterSubjectResponse {
    // The newly generated subject persona ID.
    string subject_id = 1;
}

// Response message for IAM.GetSubjects and IAM.GetSubjectsByEmail
message GetSubjectsResponse {
    repeated SubjectResult subjects = 1;
}

// Response message for IAM.GetSubjectBySession
message GetSubjectResponse {
    SubjectResult subject = 1;
}

// Response message for IAM.GetToken
message GetTokenResponse {
    // token is a session token that has been signed by IAM. It can be used as a bearer token on subsequent calls to IAM.
    string token = 1;
}

// Response message for IAM.SearchSubject
message SearchSubjectResponse {

    // A list of results that matched the given search criteria.
    repeated SubjectResult result = 1;

    // A string indicating the starting position of the next set of results. The client should pass this in the
    // the next request.
    string next_cursor = 2;

    // A bool indicating if there are more results to be paged through.
    bool has_more = 3;

    // An int64 indicating the total number of results returned by the query.
    int64 total_results = 4;
}

// Response message for IAM.ListPersonas
message ListPersonasResponse {

    // A list of personas
    repeated Persona personas = 1;

    // A string indicating the starting position of the next set of results. The client should pass this in the
    // the next request.
    string next_cursor = 2;

    // A bool indicating if there are more results to be paged through.
    bool has_more = 3;

}

// Response message for IAM.GetSubjectContext
message GetSubjectContextResponse {
    Context context = 1;
}

// Request message for IAM.GetShortLivedToken
message GetShortLivedTokenRequest {
    option deprecated = true;
 
    Context context = 1;
    string email = 2;
}

// Request message from IAM.GetSessionToken
message GetSessionTokenRequest {
    // token is a JWT provided by a subject registered with IAM. The token contains the context of which subject they want a session for.
    //
    // Example claims:
    // {
    //      iss: my-app-id-or-pid
    //      aud: vendasta.com
    //      sub: my-subject@service-account.vendasta.com
    //      vendasta.com/subject-type: partner-app
    //      /* other claims like exp, iat, as normal */
    // }
    string token = 1;
}

// Request message from IAM.AddKey
message AddKeyRequest {
    // The email of the subject to add a key for.
    string email = 1;

    Context context = 2;
}

// Response message from IAM.AddKey
message AddKeyResponse {
    // The matching private key for the public key generated by IAM. This key is not stored by IAM and can not be retrieved again.
    string private_key = 1;

    // The identifier of the matching public key.
    string key_id = 2;
}

// Request message from IAM.RemoveKey
message RemoveKeyRequest {
    // The email of the subject to remove a key from.
    string email = 1;

    Context context = 2;

    // The id of the public key to delete. Tokens signed by the corresponding private key will no longer be considered valid by IAM.
    string key_id = 3;
}
