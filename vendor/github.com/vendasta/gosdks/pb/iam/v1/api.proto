syntax = "proto3";

package iam.v1;

import "google/protobuf/empty.proto";
import "iam/v1/subjects.proto";
import "iam/v1/resources.proto";

// Creates and manages Subject objects.
//
// A Subject is a multi persona object keyed by the email.  A subject can contain many personas that are namespaced
// by either a type/namespace or a type context.  Examples are:
// 1) A typed context is a persona that is scoped to a Partner user. Example: {type: partner}
// 2) A type/namespace context is a persona that is scoped to a SMB user. Example: {type: smb, namespace:VMF}
//
// Since emails are the unique identifier, each persona has an identifier that is globally unique across
// all personas.  This allows getting a specific persona without knowing the context.  It also allows each persona
// to have its own set of metadata such as names as well as its own passwords.  This ensures that namespaced
// personas with the same type can be used across several namespaces with different passwords and different metadata.
// Specifically, this ensures that partners can NOT affect personas that are not associated to their partner id.

service IAM {
    // Registers a subject with IAM, if the supplied context is already used, an already exists error will be returned.
    rpc RegisterSubject (RegisterSubjectRequest) returns (RegisterSubjectResponse){
    };

    // Authenticate subject takes a context, email and password and validates the password is correct. No response
    // is returned but an OK status indicates a successful authentication, while an Unauthenticated response will
    // be returned on a missing subject/persona, the persona is locked, or the password is not correct.
    //
    // Multiple authentication attempts with the incorrect password will lock the persona for a short time period.
    // This is to prevent a brute-force attempt at authenticating a user.
    rpc AuthenticateSubject (AuthenticateSubjectRequest) returns (google.protobuf.Empty){
    };

    // Returns a list of subject personas by their subject IDs. The request is scoped to a specific context.
    rpc GetSubjects(GetSubjectsRequest) returns (GetSubjectsResponse){
    };

    // Returns a list of subject personas by their emails. The request is scoped to a specific context.
    rpc GetSubjectsByEmail(GetSubjectsByEmailRequest) returns (GetSubjectsResponse){
    };

    // Will update/set/delete a subject personas attributes by its subject ID. Will return a not found error if the
    // subject persona doesn't exist.
    rpc MutateAttributes (MutateAttributesRequest) returns (google.protobuf.Empty){
    };

    // Will set a given subject personas password.
    rpc ResetSubjectPassword (ResetSubjectPasswordRequest) returns (google.protobuf.Empty){
    };

    // Will change the email of a given subject persona.
    rpc ChangeSubjectEmail (ChangeSubjectEmailRequest) returns (google.protobuf.Empty){
    };

    // Will delete the persona from a given subject.
    rpc DeleteSubject (DeleteSubjectRequest) returns (google.protobuf.Empty){
    };

    // Will search across a specified context. Cross context searching is not supported.
    rpc SearchSubject (SearchSubjectRequest) returns (SearchSubjectResponse){
    };

    // Given a subject ID, will return the context that is associated to this persona.
    // Specifically, this is useful for getting the partner id from a user ID, if the user is in a type/namespace
    // context.
    rpc GetSubjectContext (GetSubjectContextRequest) returns (GetSubjectContextResponse){
    };

    // Registers a resource owner with IAM. This sets an application up for integration with IAM access control system.
    rpc RegisterResourceOwner (RegisterResourceOwnerRequest) returns (google.protobuf.Empty){
    };

    // Registers a specific resource with IAM. This allows IAM to ask the resource owner about its resources.
    rpc RegisterResource (RegisterResourceRequest) returns (google.protobuf.Empty){
    };

    //Registers a policy associated with a resource with IAM that is evaluated whenever a subject requests access to that type of resource.
    rpc RegisterPolicy (RegisterPolicyRequest) returns (google.protobuf.Empty){
    };

    //Asks IAM whether a certain subject has access to a certain resource
    rpc AccessResource (AccessResourceRequest) returns(google.protobuf.Empty){
    };
    
    // Asks IAM for a short lived token for a specific user.
    // This is a temporary endpoint until we back VBC, Marketplace, and SSC sessions by IAM.
    rpc GetShortLivedToken (GetShortLivedTokenRequest) returns(GetTokenResponse){
        option deprecated = true;
    };

    // Asks IAM to exchange the caller-provided token for a IAM session token.
    rpc GetSessionToken (GetSessionTokenRequest) returns(GetTokenResponse){
    };

    // Add a public/private key pair to a subject. The private key is returned on the response, but is not stored in IAM.
    rpc AddKey (AddKeyRequest) returns(AddKeyResponse){
    };

    // Remove a public key pair from a subject. Tokens signed by the corresponding private key will no longer be valid.
    rpc RemoveKey (RemoveKeyRequest) returns(google.protobuf.Empty){
    };
}

// UserIAM are methods that are callable by users from the frontend without a service account.  These methods require that the subject is authenticated and has 
// a valid session/cookie with IAM.
service UserIAM {
    // Gets the subject from the given session
    rpc GetSubjectBySession(GetSubjectBySessionRequest) returns (GetSubjectResponse) {
    };

    // List Personas given a session id will return a paged set of results of all the available personas across all contexts for a specific Subject.
    rpc ListPersonas(ListPersonasRequest) returns (ListPersonasResponse) {
    };

    // Returns a short lived token that can be used to issue requests to other vendasta APIs.
    rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
    };
}
