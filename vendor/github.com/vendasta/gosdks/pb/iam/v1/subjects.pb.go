// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iam/v1/subjects.proto

/*
Package iam_v1 is a generated protocol buffer package.

It is generated from these files:
	iam/v1/subjects.proto
	iam/v1/api.proto
	iam/v1/resources.proto

It has these top-level messages:
	Subject
	SubjectResult
	SingleValueAttribute
	MultiValueAttribute
	StructAttribute
	ListAttribute
	GeoPointAttribute
	Attribute
	Query
	Mutation
	NamespacedContext
	TypedContext
	Context
	PublicKey
	RegisterSubjectRequest
	GetSubjectsRequest
	GetSubjectsByEmailRequest
	GetSubjectBySessionRequest
	Persona
	ListPersonasRequest
	GetTokenRequest
	AuthenticateSubjectRequest
	DeleteSubjectRequest
	ResetSubjectPasswordRequest
	SearchSubjectRequest
	GetSubjectContextRequest
	MutateAttributesRequest
	ChangeSubjectEmailRequest
	RegisterSubjectResponse
	GetSubjectsResponse
	GetSubjectResponse
	GetTokenResponse
	SearchSubjectResponse
	ListPersonasResponse
	GetSubjectContextResponse
	GetShortLivedTokenRequest
	GetSessionTokenRequest
	AddKeyRequest
	AddKeyResponse
	RemoveKeyRequest
	ResourceOwner
	RegisterResourceRequest
	RegisterResourceOwnerRequest
	RegisterPolicyRequest
	SubjectResourceIntersectionClause
	SubjectResourceSubsetClause
	SubjectValueIntersectionClause
	SubjectMissingValueClause
	SubjectResourceForClause
	Operator
	PolicyNode
	Policy
	ResourceIdentifier
	AccessResourceRequest
	ValueList
*/
package iam_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Indicates the sort order for IAM.SearchSubject
type OrderByDirection int32

const (
	OrderByDirection_ASCENDING  OrderByDirection = 0
	OrderByDirection_DESCENDING OrderByDirection = 1
)

var OrderByDirection_name = map[int32]string{
	0: "ASCENDING",
	1: "DESCENDING",
}
var OrderByDirection_value = map[string]int32{
	"ASCENDING":  0,
	"DESCENDING": 1,
}

func (x OrderByDirection) String() string {
	return proto.EnumName(OrderByDirection_name, int32(x))
}
func (OrderByDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A subject represents a specific persona for a specified context.
type Subject struct {
	// A subject ID is a globally unique id across all personas and contexts.
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	// Email of the subject.
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// Deprecated: use struct_attributes instead
	// The set of attributes that belongs to the subject persona.
	Attributes []*MultiValueAttribute `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	// The time when the subject persona was crated
	Created *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	// The time when the subject peronsa was last updated.
	Updated *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=updated" json:"updated,omitempty"`
	// The time when the subject peronsa last authenticated with IAM.AuthenticateSubject
	LastLogin *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=last_login,json=lastLogin" json:"last_login,omitempty"`
	// Public keys that are able to validate tokens issued by the subject.
	PublicKeys []*PublicKey `protobuf:"bytes,8,rep,name=public_keys,json=publicKeys" json:"public_keys,omitempty"`
	// The set of struct attributes that belong to the subject persona.
	StructAttributes *StructAttribute `protobuf:"bytes,9,opt,name=struct_attributes,json=structAttributes" json:"struct_attributes,omitempty"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Subject) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *Subject) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Subject) GetAttributes() []*MultiValueAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Subject) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Subject) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *Subject) GetLastLogin() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastLogin
	}
	return nil
}

func (m *Subject) GetPublicKeys() []*PublicKey {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func (m *Subject) GetStructAttributes() *StructAttribute {
	if m != nil {
		return m.StructAttributes
	}
	return nil
}

// A SubjectResult wraps a subject since nil values are not allowed in a repeated set. Therefore subject can be nil.
type SubjectResult struct {
	Subject *Subject `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
}

func (m *SubjectResult) Reset()                    { *m = SubjectResult{} }
func (m *SubjectResult) String() string            { return proto.CompactTextString(m) }
func (*SubjectResult) ProtoMessage()               {}
func (*SubjectResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubjectResult) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

// Represents a key-value pair for adding/removing values in mutate, as well as filtering results in IAM.SearchSubject.
type SingleValueAttribute struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SingleValueAttribute) Reset()                    { *m = SingleValueAttribute{} }
func (m *SingleValueAttribute) String() string            { return proto.CompactTextString(m) }
func (*SingleValueAttribute) ProtoMessage()               {}
func (*SingleValueAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SingleValueAttribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SingleValueAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Represents a key-[]value pair used for representing the known attributes on a subject, as well as replace
// in IAM.MutateSubject.
type MultiValueAttribute struct {
	Key    string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *MultiValueAttribute) Reset()                    { *m = MultiValueAttribute{} }
func (m *MultiValueAttribute) String() string            { return proto.CompactTextString(m) }
func (*MultiValueAttribute) ProtoMessage()               {}
func (*MultiValueAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MultiValueAttribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MultiValueAttribute) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type StructAttribute struct {
	Attributes map[string]*Attribute `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StructAttribute) Reset()                    { *m = StructAttribute{} }
func (m *StructAttribute) String() string            { return proto.CompactTextString(m) }
func (*StructAttribute) ProtoMessage()               {}
func (*StructAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StructAttribute) GetAttributes() map[string]*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ListAttribute struct {
	Attributes []*Attribute `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *ListAttribute) Reset()                    { *m = ListAttribute{} }
func (m *ListAttribute) String() string            { return proto.CompactTextString(m) }
func (*ListAttribute) ProtoMessage()               {}
func (*ListAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListAttribute) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type GeoPointAttribute struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *GeoPointAttribute) Reset()                    { *m = GeoPointAttribute{} }
func (m *GeoPointAttribute) String() string            { return proto.CompactTextString(m) }
func (*GeoPointAttribute) ProtoMessage()               {}
func (*GeoPointAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GeoPointAttribute) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoPointAttribute) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Attribute struct {
	// Types that are valid to be assigned to Kind:
	//	*Attribute_IntAttribute
	//	*Attribute_DoubleAttribute
	//	*Attribute_StringAttribute
	//	*Attribute_BoolAttribute
	//	*Attribute_StructAttribute
	//	*Attribute_ListAttribute
	//	*Attribute_TimestampAttribute
	//	*Attribute_GeopointAttribute
	Kind isAttribute_Kind `protobuf_oneof:"kind"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isAttribute_Kind interface {
	isAttribute_Kind()
}

type Attribute_IntAttribute struct {
	IntAttribute int64 `protobuf:"varint,1,opt,name=int_attribute,json=intAttribute,oneof"`
}
type Attribute_DoubleAttribute struct {
	DoubleAttribute float64 `protobuf:"fixed64,2,opt,name=double_attribute,json=doubleAttribute,oneof"`
}
type Attribute_StringAttribute struct {
	StringAttribute string `protobuf:"bytes,3,opt,name=string_attribute,json=stringAttribute,oneof"`
}
type Attribute_BoolAttribute struct {
	BoolAttribute bool `protobuf:"varint,4,opt,name=bool_attribute,json=boolAttribute,oneof"`
}
type Attribute_StructAttribute struct {
	StructAttribute *StructAttribute `protobuf:"bytes,5,opt,name=struct_attribute,json=structAttribute,oneof"`
}
type Attribute_ListAttribute struct {
	ListAttribute *ListAttribute `protobuf:"bytes,6,opt,name=list_attribute,json=listAttribute,oneof"`
}
type Attribute_TimestampAttribute struct {
	TimestampAttribute *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=timestamp_attribute,json=timestampAttribute,oneof"`
}
type Attribute_GeopointAttribute struct {
	GeopointAttribute *GeoPointAttribute `protobuf:"bytes,8,opt,name=geopoint_attribute,json=geopointAttribute,oneof"`
}

func (*Attribute_IntAttribute) isAttribute_Kind()       {}
func (*Attribute_DoubleAttribute) isAttribute_Kind()    {}
func (*Attribute_StringAttribute) isAttribute_Kind()    {}
func (*Attribute_BoolAttribute) isAttribute_Kind()      {}
func (*Attribute_StructAttribute) isAttribute_Kind()    {}
func (*Attribute_ListAttribute) isAttribute_Kind()      {}
func (*Attribute_TimestampAttribute) isAttribute_Kind() {}
func (*Attribute_GeopointAttribute) isAttribute_Kind()  {}

func (m *Attribute) GetKind() isAttribute_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Attribute) GetIntAttribute() int64 {
	if x, ok := m.GetKind().(*Attribute_IntAttribute); ok {
		return x.IntAttribute
	}
	return 0
}

func (m *Attribute) GetDoubleAttribute() float64 {
	if x, ok := m.GetKind().(*Attribute_DoubleAttribute); ok {
		return x.DoubleAttribute
	}
	return 0
}

func (m *Attribute) GetStringAttribute() string {
	if x, ok := m.GetKind().(*Attribute_StringAttribute); ok {
		return x.StringAttribute
	}
	return ""
}

func (m *Attribute) GetBoolAttribute() bool {
	if x, ok := m.GetKind().(*Attribute_BoolAttribute); ok {
		return x.BoolAttribute
	}
	return false
}

func (m *Attribute) GetStructAttribute() *StructAttribute {
	if x, ok := m.GetKind().(*Attribute_StructAttribute); ok {
		return x.StructAttribute
	}
	return nil
}

func (m *Attribute) GetListAttribute() *ListAttribute {
	if x, ok := m.GetKind().(*Attribute_ListAttribute); ok {
		return x.ListAttribute
	}
	return nil
}

func (m *Attribute) GetTimestampAttribute() *google_protobuf.Timestamp {
	if x, ok := m.GetKind().(*Attribute_TimestampAttribute); ok {
		return x.TimestampAttribute
	}
	return nil
}

func (m *Attribute) GetGeopointAttribute() *GeoPointAttribute {
	if x, ok := m.GetKind().(*Attribute_GeopointAttribute); ok {
		return x.GeopointAttribute
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Attribute) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Attribute_OneofMarshaler, _Attribute_OneofUnmarshaler, _Attribute_OneofSizer, []interface{}{
		(*Attribute_IntAttribute)(nil),
		(*Attribute_DoubleAttribute)(nil),
		(*Attribute_StringAttribute)(nil),
		(*Attribute_BoolAttribute)(nil),
		(*Attribute_StructAttribute)(nil),
		(*Attribute_ListAttribute)(nil),
		(*Attribute_TimestampAttribute)(nil),
		(*Attribute_GeopointAttribute)(nil),
	}
}

func _Attribute_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Attribute)
	// kind
	switch x := m.Kind.(type) {
	case *Attribute_IntAttribute:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntAttribute))
	case *Attribute_DoubleAttribute:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleAttribute))
	case *Attribute_StringAttribute:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringAttribute)
	case *Attribute_BoolAttribute:
		t := uint64(0)
		if x.BoolAttribute {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Attribute_StructAttribute:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructAttribute); err != nil {
			return err
		}
	case *Attribute_ListAttribute:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListAttribute); err != nil {
			return err
		}
	case *Attribute_TimestampAttribute:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TimestampAttribute); err != nil {
			return err
		}
	case *Attribute_GeopointAttribute:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GeopointAttribute); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Attribute.Kind has unexpected type %T", x)
	}
	return nil
}

func _Attribute_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Attribute)
	switch tag {
	case 1: // kind.int_attribute
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Attribute_IntAttribute{int64(x)}
		return true, err
	case 2: // kind.double_attribute
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Kind = &Attribute_DoubleAttribute{math.Float64frombits(x)}
		return true, err
	case 3: // kind.string_attribute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &Attribute_StringAttribute{x}
		return true, err
	case 4: // kind.bool_attribute
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Attribute_BoolAttribute{x != 0}
		return true, err
	case 5: // kind.struct_attribute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructAttribute)
		err := b.DecodeMessage(msg)
		m.Kind = &Attribute_StructAttribute{msg}
		return true, err
	case 6: // kind.list_attribute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListAttribute)
		err := b.DecodeMessage(msg)
		m.Kind = &Attribute_ListAttribute{msg}
		return true, err
	case 7: // kind.timestamp_attribute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Timestamp)
		err := b.DecodeMessage(msg)
		m.Kind = &Attribute_TimestampAttribute{msg}
		return true, err
	case 8: // kind.geopoint_attribute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GeoPointAttribute)
		err := b.DecodeMessage(msg)
		m.Kind = &Attribute_GeopointAttribute{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Attribute_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Attribute)
	// kind
	switch x := m.Kind.(type) {
	case *Attribute_IntAttribute:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntAttribute))
	case *Attribute_DoubleAttribute:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Attribute_StringAttribute:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringAttribute)))
		n += len(x.StringAttribute)
	case *Attribute_BoolAttribute:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *Attribute_StructAttribute:
		s := proto.Size(x.StructAttribute)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attribute_ListAttribute:
		s := proto.Size(x.ListAttribute)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attribute_TimestampAttribute:
		s := proto.Size(x.TimestampAttribute)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attribute_GeopointAttribute:
		s := proto.Size(x.GeopointAttribute)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Query allows callers of IAM.SearchSubject to do full text search against the attributes of a scoped set of subjects.
// search_term will be queried against the supplied set of attribute keys.
type Query struct {
	SearchTerm    string   `protobuf:"bytes,1,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	AttributeKeys []string `protobuf:"bytes,2,rep,name=attribute_keys,json=attributeKeys" json:"attribute_keys,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Query) GetSearchTerm() string {
	if m != nil {
		return m.SearchTerm
	}
	return ""
}

func (m *Query) GetAttributeKeys() []string {
	if m != nil {
		return m.AttributeKeys
	}
	return nil
}

// Mutation mutates a subject in a MutateSubject request.
type Mutation struct {
	// Types that are valid to be assigned to Operation:
	//	*Mutation_Add
	//	*Mutation_Replace
	//	*Mutation_Remove
	//	*Mutation_DropKey
	//	*Mutation_ReplaceAttributes
	//	*Mutation_AddAttributes
	//	*Mutation_RemoveAttributes
	Operation isMutation_Operation `protobuf_oneof:"operation"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isMutation_Operation interface {
	isMutation_Operation()
}

type Mutation_Add struct {
	Add *SingleValueAttribute `protobuf:"bytes,1,opt,name=add,oneof"`
}
type Mutation_Replace struct {
	Replace *MultiValueAttribute `protobuf:"bytes,2,opt,name=replace,oneof"`
}
type Mutation_Remove struct {
	Remove *SingleValueAttribute `protobuf:"bytes,3,opt,name=remove,oneof"`
}
type Mutation_DropKey struct {
	DropKey string `protobuf:"bytes,4,opt,name=drop_key,json=dropKey,oneof"`
}
type Mutation_ReplaceAttributes struct {
	ReplaceAttributes *StructAttribute `protobuf:"bytes,5,opt,name=replace_attributes,json=replaceAttributes,oneof"`
}
type Mutation_AddAttributes struct {
	AddAttributes *StructAttribute `protobuf:"bytes,6,opt,name=add_attributes,json=addAttributes,oneof"`
}
type Mutation_RemoveAttributes struct {
	RemoveAttributes *StructAttribute `protobuf:"bytes,7,opt,name=remove_attributes,json=removeAttributes,oneof"`
}

func (*Mutation_Add) isMutation_Operation()               {}
func (*Mutation_Replace) isMutation_Operation()           {}
func (*Mutation_Remove) isMutation_Operation()            {}
func (*Mutation_DropKey) isMutation_Operation()           {}
func (*Mutation_ReplaceAttributes) isMutation_Operation() {}
func (*Mutation_AddAttributes) isMutation_Operation()     {}
func (*Mutation_RemoveAttributes) isMutation_Operation()  {}

func (m *Mutation) GetOperation() isMutation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *Mutation) GetAdd() *SingleValueAttribute {
	if x, ok := m.GetOperation().(*Mutation_Add); ok {
		return x.Add
	}
	return nil
}

func (m *Mutation) GetReplace() *MultiValueAttribute {
	if x, ok := m.GetOperation().(*Mutation_Replace); ok {
		return x.Replace
	}
	return nil
}

func (m *Mutation) GetRemove() *SingleValueAttribute {
	if x, ok := m.GetOperation().(*Mutation_Remove); ok {
		return x.Remove
	}
	return nil
}

func (m *Mutation) GetDropKey() string {
	if x, ok := m.GetOperation().(*Mutation_DropKey); ok {
		return x.DropKey
	}
	return ""
}

func (m *Mutation) GetReplaceAttributes() *StructAttribute {
	if x, ok := m.GetOperation().(*Mutation_ReplaceAttributes); ok {
		return x.ReplaceAttributes
	}
	return nil
}

func (m *Mutation) GetAddAttributes() *StructAttribute {
	if x, ok := m.GetOperation().(*Mutation_AddAttributes); ok {
		return x.AddAttributes
	}
	return nil
}

func (m *Mutation) GetRemoveAttributes() *StructAttribute {
	if x, ok := m.GetOperation().(*Mutation_RemoveAttributes); ok {
		return x.RemoveAttributes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Mutation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Mutation_OneofMarshaler, _Mutation_OneofUnmarshaler, _Mutation_OneofSizer, []interface{}{
		(*Mutation_Add)(nil),
		(*Mutation_Replace)(nil),
		(*Mutation_Remove)(nil),
		(*Mutation_DropKey)(nil),
		(*Mutation_ReplaceAttributes)(nil),
		(*Mutation_AddAttributes)(nil),
		(*Mutation_RemoveAttributes)(nil),
	}
}

func _Mutation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Mutation)
	// operation
	switch x := m.Operation.(type) {
	case *Mutation_Add:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Add); err != nil {
			return err
		}
	case *Mutation_Replace:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Replace); err != nil {
			return err
		}
	case *Mutation_Remove:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Remove); err != nil {
			return err
		}
	case *Mutation_DropKey:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.DropKey)
	case *Mutation_ReplaceAttributes:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplaceAttributes); err != nil {
			return err
		}
	case *Mutation_AddAttributes:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddAttributes); err != nil {
			return err
		}
	case *Mutation_RemoveAttributes:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveAttributes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Mutation.Operation has unexpected type %T", x)
	}
	return nil
}

func _Mutation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Mutation)
	switch tag {
	case 1: // operation.add
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleValueAttribute)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Add{msg}
		return true, err
	case 2: // operation.replace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiValueAttribute)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Replace{msg}
		return true, err
	case 3: // operation.remove
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleValueAttribute)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Remove{msg}
		return true, err
	case 4: // operation.drop_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Operation = &Mutation_DropKey{x}
		return true, err
	case 5: // operation.replace_attributes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructAttribute)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_ReplaceAttributes{msg}
		return true, err
	case 6: // operation.add_attributes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructAttribute)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_AddAttributes{msg}
		return true, err
	case 7: // operation.remove_attributes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructAttribute)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_RemoveAttributes{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Mutation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Mutation)
	// operation
	switch x := m.Operation.(type) {
	case *Mutation_Add:
		s := proto.Size(x.Add)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_Replace:
		s := proto.Size(x.Replace)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_Remove:
		s := proto.Size(x.Remove)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_DropKey:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DropKey)))
		n += len(x.DropKey)
	case *Mutation_ReplaceAttributes:
		s := proto.Size(x.ReplaceAttributes)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_AddAttributes:
		s := proto.Size(x.AddAttributes)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_RemoveAttributes:
		s := proto.Size(x.RemoveAttributes)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Indicates a context that is scoped to a type/namespace pair.
type NamespacedContext struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *NamespacedContext) Reset()                    { *m = NamespacedContext{} }
func (m *NamespacedContext) String() string            { return proto.CompactTextString(m) }
func (*NamespacedContext) ProtoMessage()               {}
func (*NamespacedContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NamespacedContext) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NamespacedContext) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// Indicates a context that is scoped to a type.
type TypedContext struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *TypedContext) Reset()                    { *m = TypedContext{} }
func (m *TypedContext) String() string            { return proto.CompactTextString(m) }
func (*TypedContext) ProtoMessage()               {}
func (*TypedContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TypedContext) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// Context scopes a request to a specific persona.  A persona can either be a typed or a typed/namespace unique pair.
// A typed context scopes a persona to a specific type, such as a partner user.
// A namespaced context scopes a persona to a specific type and a given namespace, such as an SMB that belongs to a
// specific partner.
type Context struct {
	// Types that are valid to be assigned to Context:
	//	*Context_Namespaced
	//	*Context_Typed
	Context isContext_Context `protobuf_oneof:"context"`
}

func (m *Context) Reset()                    { *m = Context{} }
func (m *Context) String() string            { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()               {}
func (*Context) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isContext_Context interface {
	isContext_Context()
}

type Context_Namespaced struct {
	Namespaced *NamespacedContext `protobuf:"bytes,1,opt,name=namespaced,oneof"`
}
type Context_Typed struct {
	Typed *TypedContext `protobuf:"bytes,2,opt,name=typed,oneof"`
}

func (*Context_Namespaced) isContext_Context() {}
func (*Context_Typed) isContext_Context()      {}

func (m *Context) GetContext() isContext_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Context) GetNamespaced() *NamespacedContext {
	if x, ok := m.GetContext().(*Context_Namespaced); ok {
		return x.Namespaced
	}
	return nil
}

func (m *Context) GetTyped() *TypedContext {
	if x, ok := m.GetContext().(*Context_Typed); ok {
		return x.Typed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Context) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Context_OneofMarshaler, _Context_OneofUnmarshaler, _Context_OneofSizer, []interface{}{
		(*Context_Namespaced)(nil),
		(*Context_Typed)(nil),
	}
}

func _Context_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Context)
	// context
	switch x := m.Context.(type) {
	case *Context_Namespaced:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Namespaced); err != nil {
			return err
		}
	case *Context_Typed:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Typed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Context.Context has unexpected type %T", x)
	}
	return nil
}

func _Context_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Context)
	switch tag {
	case 1: // context.namespaced
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NamespacedContext)
		err := b.DecodeMessage(msg)
		m.Context = &Context_Namespaced{msg}
		return true, err
	case 2: // context.typed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypedContext)
		err := b.DecodeMessage(msg)
		m.Context = &Context_Typed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Context_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Context)
	// context
	switch x := m.Context.(type) {
	case *Context_Namespaced:
		s := proto.Size(x.Namespaced)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Context_Typed:
		s := proto.Size(x.Typed)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// PublicKey is a key capable of validating a JWT that has been signed with a private key by someone else.
type PublicKey struct {
	// key is the public key
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Identifier for a public key. The `kid` claim in a JWT specifies this field, telling us which key to verify the JWT with.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PublicKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PublicKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Request message for IAM.RegisterSubject
type RegisterSubjectRequest struct {
	// Context of the persona
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// The email of the persona
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// The plain text password to set for the persona
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	// Deprecated: use struct_attributes instead
	// The set of attributes that belong to the subject persona.
	Attributes []*MultiValueAttribute `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	// The set of struct attributes that belong to the subject persona.
	StructAttributes *StructAttribute `protobuf:"bytes,5,opt,name=struct_attributes,json=structAttributes" json:"struct_attributes,omitempty"`
}

func (m *RegisterSubjectRequest) Reset()                    { *m = RegisterSubjectRequest{} }
func (m *RegisterSubjectRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterSubjectRequest) ProtoMessage()               {}
func (*RegisterSubjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RegisterSubjectRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RegisterSubjectRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterSubjectRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterSubjectRequest) GetAttributes() []*MultiValueAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RegisterSubjectRequest) GetStructAttributes() *StructAttribute {
	if m != nil {
		return m.StructAttributes
	}
	return nil
}

// Request message for IAM.GetSubjects
type GetSubjectsRequest struct {
	Context    *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	SubjectIds []string `protobuf:"bytes,2,rep,name=subject_ids,json=subjectIds" json:"subject_ids,omitempty"`
}

func (m *GetSubjectsRequest) Reset()                    { *m = GetSubjectsRequest{} }
func (m *GetSubjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSubjectsRequest) ProtoMessage()               {}
func (*GetSubjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetSubjectsRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *GetSubjectsRequest) GetSubjectIds() []string {
	if m != nil {
		return m.SubjectIds
	}
	return nil
}

// Request message for IAM.GetSubjectsByEmail
type GetSubjectsByEmailRequest struct {
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Emails  []string `protobuf:"bytes,2,rep,name=emails" json:"emails,omitempty"`
}

func (m *GetSubjectsByEmailRequest) Reset()                    { *m = GetSubjectsByEmailRequest{} }
func (m *GetSubjectsByEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSubjectsByEmailRequest) ProtoMessage()               {}
func (*GetSubjectsByEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetSubjectsByEmailRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *GetSubjectsByEmailRequest) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

// Request message for IAM.GetSubjectBySession
type GetSubjectBySessionRequest struct {
	Session string   `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *GetSubjectBySessionRequest) Reset()                    { *m = GetSubjectBySessionRequest{} }
func (m *GetSubjectBySessionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSubjectBySessionRequest) ProtoMessage()               {}
func (*GetSubjectBySessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetSubjectBySessionRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *GetSubjectBySessionRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

// A Persona is a Subject and Context combination that provides the ability for cross context usage for a single subject.
type Persona struct {
	Subject *Subject `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *Persona) Reset()                    { *m = Persona{} }
func (m *Persona) String() string            { return proto.CompactTextString(m) }
func (*Persona) ProtoMessage()               {}
func (*Persona) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Persona) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *Persona) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

// Request message for IAM.ListPersonas
type ListPersonasRequest struct {
	// Session is required and is an IAM session for the current subject.
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	// Cursor allows paging of results, the next_cursor returned by the last response is expected.
	Cursor string `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
	// The number of results to return.
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Type allows filtering the Personas to a specific Subject type. This is an optional field, leaving it blank will
	// allow retrieving Personas across all types.
	Type string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
}

func (m *ListPersonasRequest) Reset()                    { *m = ListPersonasRequest{} }
func (m *ListPersonasRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPersonasRequest) ProtoMessage()               {}
func (*ListPersonasRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ListPersonasRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *ListPersonasRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListPersonasRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPersonasRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// Request message for IAM.GetTokenRequest
type GetTokenRequest struct {
}

func (m *GetTokenRequest) Reset()                    { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()               {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

// Request message for IAM.AuthenticateSubject
type AuthenticateSubjectRequest struct {
	Context  *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Email    string   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string   `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *AuthenticateSubjectRequest) Reset()                    { *m = AuthenticateSubjectRequest{} }
func (m *AuthenticateSubjectRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateSubjectRequest) ProtoMessage()               {}
func (*AuthenticateSubjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AuthenticateSubjectRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AuthenticateSubjectRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthenticateSubjectRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Request message for IAM.DeleteSubject
type DeleteSubjectRequest struct {
	// Context is required which indicates the specific persona of a given subject.
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// The subject id that will be deleted.
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
}

func (m *DeleteSubjectRequest) Reset()                    { *m = DeleteSubjectRequest{} }
func (m *DeleteSubjectRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSubjectRequest) ProtoMessage()               {}
func (*DeleteSubjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeleteSubjectRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *DeleteSubjectRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

// Request message for IAM.ResetSubjectPassword
type ResetSubjectPasswordRequest struct {
	// Context is required which indicates the specific persona of a given subject.
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// The subject id to update.
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	// The new password to set on the subject persona.
	NewPassword string `protobuf:"bytes,3,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
}

func (m *ResetSubjectPasswordRequest) Reset()                    { *m = ResetSubjectPasswordRequest{} }
func (m *ResetSubjectPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetSubjectPasswordRequest) ProtoMessage()               {}
func (*ResetSubjectPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ResetSubjectPasswordRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ResetSubjectPasswordRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *ResetSubjectPasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

// Request message for IAM.SearchSubject
type SearchSubjectRequest struct {
	// Context is required, which scopes the search to a specific set of personas.
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// Query will be used as a full text search query with partial matching.
	Query *Query `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	// Filters will be applied as a boolean filter with no partial matching.
	Filters []*SingleValueAttribute `protobuf:"bytes,3,rep,name=filters" json:"filters,omitempty"`
	// Indicates the attribute to order by.
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	// Indicates to sort by ascending or descending.
	OrderByDirection OrderByDirection `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,enum=iam.v1.OrderByDirection" json:"order_by_direction,omitempty"`
	// Cursor allows paging of results, the next_cursor returned by the last response is expected.
	Cursor string `protobuf:"bytes,6,opt,name=cursor" json:"cursor,omitempty"`
	// The number of results to return.
	PageSize int64 `protobuf:"varint,7,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *SearchSubjectRequest) Reset()                    { *m = SearchSubjectRequest{} }
func (m *SearchSubjectRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchSubjectRequest) ProtoMessage()               {}
func (*SearchSubjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SearchSubjectRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SearchSubjectRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchSubjectRequest) GetFilters() []*SingleValueAttribute {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *SearchSubjectRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *SearchSubjectRequest) GetOrderByDirection() OrderByDirection {
	if m != nil {
		return m.OrderByDirection
	}
	return OrderByDirection_ASCENDING
}

func (m *SearchSubjectRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *SearchSubjectRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// Request message for IAM.GetSubjectContext
type GetSubjectContextRequest struct {
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
}

func (m *GetSubjectContextRequest) Reset()                    { *m = GetSubjectContextRequest{} }
func (m *GetSubjectContextRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSubjectContextRequest) ProtoMessage()               {}
func (*GetSubjectContextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetSubjectContextRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

// Request message for IAM.MutateAttributes
type MutateAttributesRequest struct {
	// Context is required which indicates the specific persona of a given subject.
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// The subject id to mutate.
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	// A list of mutations that will be applied atomically.
	Mutations []*Mutation `protobuf:"bytes,3,rep,name=mutations" json:"mutations,omitempty"`
}

func (m *MutateAttributesRequest) Reset()                    { *m = MutateAttributesRequest{} }
func (m *MutateAttributesRequest) String() string            { return proto.CompactTextString(m) }
func (*MutateAttributesRequest) ProtoMessage()               {}
func (*MutateAttributesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *MutateAttributesRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *MutateAttributesRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *MutateAttributesRequest) GetMutations() []*Mutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

// Request message for IAM.ChangeSubjectEmail
type ChangeSubjectEmailRequest struct {
	Context   *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	SubjectId string   `protobuf:"bytes,2,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	NewEmail  string   `protobuf:"bytes,3,opt,name=new_email,json=newEmail" json:"new_email,omitempty"`
}

func (m *ChangeSubjectEmailRequest) Reset()                    { *m = ChangeSubjectEmailRequest{} }
func (m *ChangeSubjectEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeSubjectEmailRequest) ProtoMessage()               {}
func (*ChangeSubjectEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ChangeSubjectEmailRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ChangeSubjectEmailRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *ChangeSubjectEmailRequest) GetNewEmail() string {
	if m != nil {
		return m.NewEmail
	}
	return ""
}

// Response message for IAM.RegisterSubject
type RegisterSubjectResponse struct {
	// The newly generated subject persona ID.
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
}

func (m *RegisterSubjectResponse) Reset()                    { *m = RegisterSubjectResponse{} }
func (m *RegisterSubjectResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterSubjectResponse) ProtoMessage()               {}
func (*RegisterSubjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RegisterSubjectResponse) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

// Response message for IAM.GetSubjects and IAM.GetSubjectsByEmail
type GetSubjectsResponse struct {
	Subjects []*SubjectResult `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
}

func (m *GetSubjectsResponse) Reset()                    { *m = GetSubjectsResponse{} }
func (m *GetSubjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSubjectsResponse) ProtoMessage()               {}
func (*GetSubjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetSubjectsResponse) GetSubjects() []*SubjectResult {
	if m != nil {
		return m.Subjects
	}
	return nil
}

// Response message for IAM.GetSubjectBySession
type GetSubjectResponse struct {
	Subject *SubjectResult `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
}

func (m *GetSubjectResponse) Reset()                    { *m = GetSubjectResponse{} }
func (m *GetSubjectResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSubjectResponse) ProtoMessage()               {}
func (*GetSubjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetSubjectResponse) GetSubject() *SubjectResult {
	if m != nil {
		return m.Subject
	}
	return nil
}

// Response message for IAM.GetToken
type GetTokenResponse struct {
	// token is a session token that has been signed by IAM. It can be used as a bearer token on subsequent calls to IAM.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetTokenResponse) Reset()                    { *m = GetTokenResponse{} }
func (m *GetTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTokenResponse) ProtoMessage()               {}
func (*GetTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Response message for IAM.SearchSubject
type SearchSubjectResponse struct {
	// A list of results that matched the given search criteria.
	Result []*SubjectResult `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
	// A string indicating the starting position of the next set of results. The client should pass this in the
	// the next request.
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// A bool indicating if there are more results to be paged through.
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
	// An int64 indicating the total number of results returned by the query.
	TotalResults int64 `protobuf:"varint,4,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

func (m *SearchSubjectResponse) Reset()                    { *m = SearchSubjectResponse{} }
func (m *SearchSubjectResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchSubjectResponse) ProtoMessage()               {}
func (*SearchSubjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SearchSubjectResponse) GetResult() []*SubjectResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SearchSubjectResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *SearchSubjectResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *SearchSubjectResponse) GetTotalResults() int64 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

// Response message for IAM.ListPersonas
type ListPersonasResponse struct {
	// A list of personas
	Personas []*Persona `protobuf:"bytes,1,rep,name=personas" json:"personas,omitempty"`
	// A string indicating the starting position of the next set of results. The client should pass this in the
	// the next request.
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// A bool indicating if there are more results to be paged through.
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
}

func (m *ListPersonasResponse) Reset()                    { *m = ListPersonasResponse{} }
func (m *ListPersonasResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPersonasResponse) ProtoMessage()               {}
func (*ListPersonasResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListPersonasResponse) GetPersonas() []*Persona {
	if m != nil {
		return m.Personas
	}
	return nil
}

func (m *ListPersonasResponse) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ListPersonasResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// Response message for IAM.GetSubjectContext
type GetSubjectContextResponse struct {
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
}

func (m *GetSubjectContextResponse) Reset()                    { *m = GetSubjectContextResponse{} }
func (m *GetSubjectContextResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSubjectContextResponse) ProtoMessage()               {}
func (*GetSubjectContextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetSubjectContextResponse) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

// Request message for IAM.GetShortLivedToken
type GetShortLivedTokenRequest struct {
	Context *Context `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Email   string   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *GetShortLivedTokenRequest) Reset()                    { *m = GetShortLivedTokenRequest{} }
func (m *GetShortLivedTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetShortLivedTokenRequest) ProtoMessage()               {}
func (*GetShortLivedTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetShortLivedTokenRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *GetShortLivedTokenRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// Request message from IAM.GetSessionToken
type GetSessionTokenRequest struct {
	// token is a JWT provided by a subject registered with IAM. The token contains the context of which subject they want a session for.
	//
	// Example claims:
	// {
	//      iss: my-app-id-or-pid
	//      aud: vendasta.com
	//      sub: my-subject@service-account.vendasta.com
	//      vendasta.com/subject-type: partner-app
	//      /* other claims like exp, iat, as normal */
	// }
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetSessionTokenRequest) Reset()                    { *m = GetSessionTokenRequest{} }
func (m *GetSessionTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSessionTokenRequest) ProtoMessage()               {}
func (*GetSessionTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *GetSessionTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Request message from IAM.AddKey
type AddKeyRequest struct {
	// The email of the subject to add a key for.
	Email   string   `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (m *AddKeyRequest) Reset()                    { *m = AddKeyRequest{} }
func (m *AddKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*AddKeyRequest) ProtoMessage()               {}
func (*AddKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *AddKeyRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AddKeyRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

// Response message from IAM.AddKey
type AddKeyResponse struct {
	// The matching private key for the public key generated by IAM. This key is not stored by IAM and can not be retrieved again.
	PrivateKey string `protobuf:"bytes,1,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// The identifier of the matching public key.
	KeyId string `protobuf:"bytes,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
}

func (m *AddKeyResponse) Reset()                    { *m = AddKeyResponse{} }
func (m *AddKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*AddKeyResponse) ProtoMessage()               {}
func (*AddKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *AddKeyResponse) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *AddKeyResponse) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

// Request message from IAM.RemoveKey
type RemoveKeyRequest struct {
	// The email of the subject to remove a key from.
	Email   string   `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	// The id of the public key to delete. Tokens signed by the corresponding private key will no longer be considered valid by IAM.
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
}

func (m *RemoveKeyRequest) Reset()                    { *m = RemoveKeyRequest{} }
func (m *RemoveKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveKeyRequest) ProtoMessage()               {}
func (*RemoveKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *RemoveKeyRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RemoveKeyRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RemoveKeyRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func init() {
	proto.RegisterType((*Subject)(nil), "iam.v1.Subject")
	proto.RegisterType((*SubjectResult)(nil), "iam.v1.SubjectResult")
	proto.RegisterType((*SingleValueAttribute)(nil), "iam.v1.SingleValueAttribute")
	proto.RegisterType((*MultiValueAttribute)(nil), "iam.v1.MultiValueAttribute")
	proto.RegisterType((*StructAttribute)(nil), "iam.v1.StructAttribute")
	proto.RegisterType((*ListAttribute)(nil), "iam.v1.ListAttribute")
	proto.RegisterType((*GeoPointAttribute)(nil), "iam.v1.GeoPointAttribute")
	proto.RegisterType((*Attribute)(nil), "iam.v1.Attribute")
	proto.RegisterType((*Query)(nil), "iam.v1.Query")
	proto.RegisterType((*Mutation)(nil), "iam.v1.Mutation")
	proto.RegisterType((*NamespacedContext)(nil), "iam.v1.NamespacedContext")
	proto.RegisterType((*TypedContext)(nil), "iam.v1.TypedContext")
	proto.RegisterType((*Context)(nil), "iam.v1.Context")
	proto.RegisterType((*PublicKey)(nil), "iam.v1.PublicKey")
	proto.RegisterType((*RegisterSubjectRequest)(nil), "iam.v1.RegisterSubjectRequest")
	proto.RegisterType((*GetSubjectsRequest)(nil), "iam.v1.GetSubjectsRequest")
	proto.RegisterType((*GetSubjectsByEmailRequest)(nil), "iam.v1.GetSubjectsByEmailRequest")
	proto.RegisterType((*GetSubjectBySessionRequest)(nil), "iam.v1.GetSubjectBySessionRequest")
	proto.RegisterType((*Persona)(nil), "iam.v1.Persona")
	proto.RegisterType((*ListPersonasRequest)(nil), "iam.v1.ListPersonasRequest")
	proto.RegisterType((*GetTokenRequest)(nil), "iam.v1.GetTokenRequest")
	proto.RegisterType((*AuthenticateSubjectRequest)(nil), "iam.v1.AuthenticateSubjectRequest")
	proto.RegisterType((*DeleteSubjectRequest)(nil), "iam.v1.DeleteSubjectRequest")
	proto.RegisterType((*ResetSubjectPasswordRequest)(nil), "iam.v1.ResetSubjectPasswordRequest")
	proto.RegisterType((*SearchSubjectRequest)(nil), "iam.v1.SearchSubjectRequest")
	proto.RegisterType((*GetSubjectContextRequest)(nil), "iam.v1.GetSubjectContextRequest")
	proto.RegisterType((*MutateAttributesRequest)(nil), "iam.v1.MutateAttributesRequest")
	proto.RegisterType((*ChangeSubjectEmailRequest)(nil), "iam.v1.ChangeSubjectEmailRequest")
	proto.RegisterType((*RegisterSubjectResponse)(nil), "iam.v1.RegisterSubjectResponse")
	proto.RegisterType((*GetSubjectsResponse)(nil), "iam.v1.GetSubjectsResponse")
	proto.RegisterType((*GetSubjectResponse)(nil), "iam.v1.GetSubjectResponse")
	proto.RegisterType((*GetTokenResponse)(nil), "iam.v1.GetTokenResponse")
	proto.RegisterType((*SearchSubjectResponse)(nil), "iam.v1.SearchSubjectResponse")
	proto.RegisterType((*ListPersonasResponse)(nil), "iam.v1.ListPersonasResponse")
	proto.RegisterType((*GetSubjectContextResponse)(nil), "iam.v1.GetSubjectContextResponse")
	proto.RegisterType((*GetShortLivedTokenRequest)(nil), "iam.v1.GetShortLivedTokenRequest")
	proto.RegisterType((*GetSessionTokenRequest)(nil), "iam.v1.GetSessionTokenRequest")
	proto.RegisterType((*AddKeyRequest)(nil), "iam.v1.AddKeyRequest")
	proto.RegisterType((*AddKeyResponse)(nil), "iam.v1.AddKeyResponse")
	proto.RegisterType((*RemoveKeyRequest)(nil), "iam.v1.RemoveKeyRequest")
	proto.RegisterEnum("iam.v1.OrderByDirection", OrderByDirection_name, OrderByDirection_value)
}

func init() { proto.RegisterFile("iam/v1/subjects.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x73, 0xe3, 0xc6,
	0x11, 0x26, 0x48, 0xf1, 0xd5, 0x5c, 0x52, 0xe4, 0xe8, 0xb1, 0x94, 0xe4, 0xd4, 0x2a, 0xe3, 0x72,
	0xad, 0x12, 0xc7, 0x54, 0x49, 0x71, 0xa5, 0x6c, 0xb9, 0xca, 0x8e, 0x5e, 0x2b, 0x6e, 0x76, 0xb5,
	0x56, 0x20, 0x55, 0x8e, 0xe1, 0x82, 0xc4, 0x98, 0x82, 0x05, 0x02, 0x30, 0x66, 0x20, 0x2d, 0x7d,
	0x71, 0x55, 0x8e, 0xb9, 0xe6, 0x0f, 0xe4, 0x96, 0x4b, 0xce, 0xc9, 0xbf, 0xc9, 0x2f, 0xc9, 0x21,
	0x35, 0x2f, 0x60, 0xc8, 0xa5, 0x44, 0x4b, 0xda, 0xca, 0x8d, 0xd3, 0xf3, 0xf5, 0xd7, 0x3d, 0x3d,
	0xfd, 0x18, 0x10, 0x56, 0x3c, 0x67, 0xb4, 0x7d, 0xbd, 0xb3, 0x4d, 0x93, 0xfe, 0xf7, 0x64, 0xc0,
	0x68, 0x27, 0x8a, 0x43, 0x16, 0xa2, 0x92, 0xe7, 0x8c, 0x3a, 0xd7, 0x3b, 0xeb, 0xcf, 0x86, 0x61,
	0x38, 0xf4, 0xc9, 0xb6, 0x90, 0xf6, 0x93, 0xef, 0xb6, 0x99, 0x37, 0x22, 0x94, 0x39, 0xa3, 0x48,
	0x02, 0xf1, 0xdf, 0x0b, 0x50, 0x3e, 0x97, 0xba, 0xe8, 0x17, 0x00, 0x8a, 0xa6, 0xe7, 0xb9, 0x6d,
	0x6b, 0xd3, 0xda, 0xaa, 0xda, 0x55, 0x25, 0x79, 0xe9, 0xa2, 0x65, 0x28, 0x92, 0x91, 0xe3, 0xf9,
	0xed, 0xbc, 0xd8, 0x91, 0x0b, 0xf4, 0x0d, 0x80, 0xc3, 0x58, 0xec, 0xf5, 0x13, 0x46, 0x68, 0x7b,
	0x61, 0xb3, 0xb0, 0x55, 0xdb, 0xdd, 0xe8, 0x48, 0xf3, 0x9d, 0xd3, 0xc4, 0x67, 0xde, 0x9f, 0x1c,
	0x3f, 0x21, 0xfb, 0x1a, 0x73, 0x90, 0x6f, 0x5b, 0xb6, 0xa1, 0x82, 0x3e, 0x87, 0xf2, 0x20, 0x26,
	0x0e, 0x23, 0x6e, 0xbb, 0xb8, 0x69, 0x6d, 0xd5, 0x76, 0xd7, 0x3b, 0xd2, 0xe9, 0x8e, 0x76, 0xba,
	0x73, 0xa1, 0x9d, 0xb6, 0x35, 0x94, 0x6b, 0x25, 0x91, 0x2b, 0xb4, 0x4a, 0xf3, 0xb5, 0x14, 0x14,
	0x7d, 0x09, 0xe0, 0x3b, 0x94, 0xf5, 0xfc, 0x70, 0xe8, 0x05, 0xed, 0xf2, 0x5c, 0xc5, 0x2a, 0x47,
	0xbf, 0xe6, 0x60, 0xb4, 0x0b, 0xb5, 0x28, 0xe9, 0xfb, 0xde, 0xa0, 0x77, 0x45, 0xc6, 0xb4, 0x5d,
	0x11, 0x07, 0x6d, 0xe9, 0x83, 0x9e, 0x89, 0xad, 0x57, 0x64, 0x6c, 0x43, 0xa4, 0x7f, 0x52, 0x74,
	0x04, 0x2d, 0xca, 0xe2, 0x64, 0xc0, 0x7a, 0x46, 0x88, 0xaa, 0xc2, 0xea, 0x53, 0xad, 0x79, 0x2e,
	0x00, 0x69, 0x78, 0xec, 0x26, 0x9d, 0x14, 0x50, 0xbc, 0x07, 0x75, 0x75, 0x43, 0x36, 0xa1, 0x89,
	0xcf, 0xd0, 0xaf, 0xa0, 0xac, 0x6e, 0x45, 0x5c, 0x52, 0x6d, 0x77, 0x31, 0x25, 0x53, 0x38, 0xbd,
	0x8f, 0xbf, 0x86, 0xe5, 0x73, 0x2f, 0x18, 0xfa, 0x64, 0xf2, 0x12, 0x50, 0x13, 0x0a, 0x57, 0x64,
	0xac, 0xee, 0x98, 0xff, 0xe4, 0xb7, 0x7b, 0xcd, 0x31, 0xfa, 0x76, 0xc5, 0x02, 0x7f, 0x03, 0x4b,
	0x33, 0xee, 0x70, 0x86, 0xfa, 0x2a, 0x94, 0x84, 0x06, 0x6d, 0xe7, 0x37, 0x0b, 0x5b, 0x55, 0x5b,
	0xad, 0xf0, 0x3f, 0x2d, 0x58, 0x9c, 0x3a, 0x22, 0x3a, 0x99, 0x48, 0x19, 0x4b, 0x44, 0xf2, 0xf9,
	0x2d, 0xf1, 0xe8, 0x64, 0x81, 0x38, 0x0e, 0x58, 0x3c, 0x36, 0x53, 0x67, 0xfd, 0x0c, 0x16, 0xa7,
	0xb6, 0x67, 0x78, 0xf6, 0xdc, 0x3c, 0x98, 0x71, 0x65, 0x59, 0xc8, 0xe5, 0xfe, 0x5e, 0xfe, 0x0b,
	0x0b, 0x1f, 0x40, 0xfd, 0xb5, 0x47, 0x0d, 0x5f, 0x77, 0x66, 0xf8, 0x3a, 0x83, 0xc2, 0x00, 0xe1,
	0x53, 0x68, 0x9d, 0x90, 0xf0, 0x2c, 0xf4, 0x02, 0x83, 0x67, 0x1d, 0x2a, 0xbe, 0xc3, 0x3c, 0x96,
	0xb8, 0x44, 0x38, 0x67, 0xd9, 0xe9, 0x1a, 0x7d, 0x04, 0x55, 0x3f, 0x0c, 0x86, 0x72, 0x33, 0x2f,
	0x36, 0x33, 0x01, 0xfe, 0x4f, 0x01, 0xaa, 0x19, 0xcf, 0x27, 0x50, 0xf7, 0x02, 0x23, 0x9f, 0x04,
	0x59, 0xa1, 0x9b, 0xb3, 0x9f, 0x4c, 0x98, 0xfb, 0x14, 0x9a, 0x6e, 0x98, 0xf4, 0x7d, 0x62, 0x20,
	0x05, 0x73, 0x37, 0x67, 0x2f, 0xca, 0x9d, 0x09, 0x30, 0x65, 0xb1, 0x17, 0x0c, 0x0d, 0x70, 0x81,
	0x07, 0x90, 0x83, 0xe5, 0x4e, 0x06, 0x7e, 0x0e, 0x8d, 0x7e, 0x18, 0xfa, 0x06, 0x74, 0x61, 0xd3,
	0xda, 0xaa, 0x74, 0x73, 0x76, 0x9d, 0xcb, 0x33, 0xe0, 0x11, 0x34, 0xa7, 0x93, 0x5f, 0x15, 0xf8,
	0x6d, 0xb9, 0xaf, 0xcc, 0x4d, 0xe4, 0xca, 0xd7, 0xd0, 0xf0, 0x3d, 0x6a, 0x72, 0xc8, 0x72, 0x5f,
	0xd1, 0x1c, 0x13, 0xd7, 0xc5, 0xbd, 0xf0, 0x27, 0xee, 0xef, 0x14, 0x96, 0xd2, 0x96, 0x67, 0x90,
	0xcc, 0x2d, 0xfd, 0x6e, 0xce, 0x46, 0xa9, 0x62, 0x46, 0xf7, 0x07, 0x40, 0x43, 0x12, 0x46, 0xe1,
	0xe4, 0x1d, 0x54, 0x04, 0xdb, 0x9a, 0x76, 0xe9, 0xbd, 0xdb, 0xef, 0xe6, 0xec, 0x96, 0x56, 0xcb,
	0x1a, 0x61, 0x09, 0x16, 0xae, 0xbc, 0xc0, 0xc5, 0xdf, 0x42, 0xf1, 0x8f, 0x09, 0x89, 0xc7, 0xe8,
	0x19, 0xd4, 0x28, 0x71, 0xe2, 0xc1, 0x65, 0x8f, 0x91, 0x78, 0xa4, 0x72, 0x18, 0xa4, 0xe8, 0x82,
	0xc4, 0x23, 0xf4, 0x09, 0x34, 0x52, 0xa3, 0xb2, 0x0d, 0xc9, 0x62, 0xab, 0xa7, 0x52, 0xde, 0x76,
	0xf0, 0xbf, 0x0b, 0x50, 0x39, 0x4d, 0x98, 0xc3, 0xbc, 0x30, 0x40, 0x9f, 0x43, 0xc1, 0x71, 0x5d,
	0xd5, 0x28, 0x3e, 0x4a, 0x23, 0x3f, 0xa3, 0x29, 0xf0, 0xce, 0xdc, 0xcd, 0xd9, 0x1c, 0x8e, 0xbe,
	0x82, 0x72, 0x4c, 0x22, 0xdf, 0x19, 0xe8, 0xb2, 0x99, 0xd7, 0xd2, 0xbb, 0x39, 0x5b, 0x6b, 0xa0,
	0x3d, 0x28, 0xc5, 0x64, 0x14, 0x5e, 0xcb, 0x2c, 0xfa, 0x79, 0x56, 0x95, 0x06, 0xda, 0x80, 0x8a,
	0x1b, 0x87, 0x11, 0x3f, 0x9d, 0x48, 0x2c, 0x9e, 0x83, 0x65, 0x2e, 0x79, 0x45, 0xc6, 0xa8, 0x0b,
	0x48, 0xd9, 0x30, 0x1b, 0xea, 0xdc, 0xa4, 0x6a, 0x29, 0xa5, 0xac, 0x57, 0xa0, 0xdf, 0x43, 0xc3,
	0x71, 0x5d, 0x93, 0xa5, 0x34, 0x8f, 0xa5, 0xee, 0xb8, 0xae, 0xc1, 0xf0, 0x02, 0x5a, 0xd2, 0x65,
	0x93, 0xa4, 0x3c, 0x8f, 0xa4, 0x29, 0x75, 0x32, 0x9e, 0x83, 0x1a, 0x54, 0xc3, 0x88, 0xc4, 0xe2,
	0xb2, 0xf0, 0x31, 0xb4, 0xde, 0x38, 0x23, 0x42, 0x23, 0x67, 0x40, 0xdc, 0xc3, 0x30, 0x60, 0xe4,
	0x1d, 0xe3, 0xed, 0x21, 0xd0, 0x42, 0x3d, 0x95, 0x53, 0x01, 0x42, 0xb0, 0xc0, 0xc6, 0x91, 0x6e,
	0xdb, 0xe2, 0x37, 0xc6, 0xf0, 0xe4, 0x62, 0x1c, 0x65, 0x0c, 0x1a, 0x63, 0x19, 0x98, 0x9f, 0xa0,
	0xac, 0xb7, 0xbf, 0x02, 0x48, 0xf9, 0x74, 0xa6, 0xa4, 0xc9, 0xfc, 0x9e, 0x3f, 0xdd, 0x9c, 0x6d,
	0xc0, 0xd1, 0x6f, 0xa0, 0xc8, 0xf9, 0x5c, 0x95, 0x27, 0xcb, 0x5a, 0xcf, 0x74, 0xa0, 0x9b, 0xb3,
	0x25, 0xe8, 0xa0, 0x0a, 0xe5, 0x81, 0x94, 0xe1, 0xcf, 0xa0, 0x9a, 0x4e, 0xcd, 0x19, 0x6d, 0xbb,
	0x01, 0x79, 0xcf, 0x55, 0xa7, 0xca, 0x7b, 0x2e, 0xfe, 0xaf, 0x05, 0xab, 0x36, 0x19, 0x7a, 0x94,
	0x91, 0x38, 0x1d, 0x87, 0x3f, 0x24, 0x84, 0x8a, 0x79, 0xa8, 0x48, 0xa7, 0xe7, 0xa1, 0xb2, 0x6f,
	0xeb, 0xfd, 0x5b, 0xde, 0x30, 0xeb, 0x50, 0x89, 0x1c, 0x4a, 0x6f, 0xc2, 0xd8, 0x95, 0x8d, 0xcf,
	0x4e, 0xd7, 0x8f, 0x7f, 0xdf, 0xcc, 0x7c, 0x04, 0x14, 0xef, 0xfb, 0x08, 0x78, 0x0b, 0xe8, 0x84,
	0x30, 0x75, 0x70, 0xfa, 0x80, 0x93, 0xf3, 0xe6, 0x92, 0x3e, 0xee, 0x74, 0xe3, 0x80, 0xf4, 0x75,
	0x47, 0xf1, 0x9f, 0x61, 0xcd, 0xb0, 0x70, 0x30, 0x3e, 0xe6, 0xa1, 0x79, 0x80, 0xa1, 0x55, 0x28,
	0x89, 0xa8, 0xa6, 0x2f, 0x01, 0xb9, 0xc2, 0x0e, 0xac, 0x67, 0xfc, 0x07, 0xe3, 0x73, 0x42, 0xa9,
	0x17, 0x06, 0xda, 0x40, 0x1b, 0xca, 0x54, 0x4a, 0x54, 0x12, 0xe8, 0xa5, 0x69, 0x3a, 0x7f, 0xb7,
	0x69, 0xdc, 0x83, 0xf2, 0x19, 0x89, 0x69, 0x18, 0x38, 0xf7, 0x78, 0x23, 0xdd, 0xc7, 0xc0, 0x3b,
	0x58, 0xe2, 0xf3, 0x46, 0x19, 0xa1, 0xf3, 0x9d, 0x5f, 0x85, 0xd2, 0x20, 0x89, 0x69, 0x18, 0xab,
	0x84, 0x53, 0x2b, 0xb4, 0x01, 0xd5, 0xc8, 0x19, 0x92, 0x1e, 0xf5, 0x7e, 0x94, 0x5d, 0xb2, 0xc0,
	0x53, 0x6e, 0x48, 0xce, 0xbd, 0x1f, 0xb3, 0x92, 0x5e, 0x30, 0xca, 0xb5, 0x05, 0x8b, 0x27, 0x84,
	0x5d, 0x84, 0x57, 0x44, 0x87, 0x0c, 0x8f, 0x61, 0x7d, 0x3f, 0x61, 0x97, 0x24, 0x60, 0xde, 0xc0,
	0x61, 0xe4, 0xff, 0x58, 0x14, 0xf8, 0x2d, 0x2c, 0x1f, 0x11, 0x9f, 0x3c, 0xc6, 0xe8, 0xe4, 0xc7,
	0x46, 0x7e, 0xea, 0x63, 0x03, 0xff, 0xd5, 0x82, 0x0d, 0x9b, 0xd0, 0x34, 0x61, 0xce, 0x94, 0xe9,
	0x0f, 0x6e, 0x09, 0xfd, 0x12, 0x9e, 0x04, 0xe4, 0xa6, 0x37, 0x75, 0xd6, 0x5a, 0x40, 0x6e, 0xb4,
	0x4d, 0xfc, 0xaf, 0x3c, 0x2c, 0x9f, 0x8b, 0x31, 0xfc, 0xf0, 0xf3, 0x7e, 0x0c, 0xc5, 0x1f, 0xf8,
	0x94, 0x57, 0x39, 0x56, 0xd7, 0x40, 0x31, 0xfa, 0x6d, 0xb9, 0x87, 0x7e, 0x07, 0xe5, 0xef, 0x3c,
	0x9f, 0x91, 0x98, 0xb6, 0x0b, 0xa2, 0xd3, 0xdc, 0x39, 0x3a, 0x6d, 0x0d, 0x46, 0x6b, 0x50, 0x09,
	0x63, 0x97, 0xc4, 0xbd, 0xbe, 0x9a, 0x9a, 0x76, 0x59, 0xac, 0x0f, 0xc6, 0xe8, 0x05, 0x20, 0xbd,
	0xd5, 0x73, 0xbd, 0x98, 0x0c, 0xf8, 0xa0, 0x11, 0xfd, 0xa7, 0xb1, 0xdb, 0xd6, 0xec, 0xdf, 0x4a,
	0xf0, 0x91, 0xde, 0xb7, 0x9b, 0xe1, 0x94, 0xc4, 0xc8, 0xe4, 0xd2, 0xed, 0x99, 0x5c, 0x9e, 0xcc,
	0x64, 0xfc, 0x25, 0xb4, 0xb3, 0x9a, 0xd7, 0x21, 0x51, 0xb1, 0xbb, 0xfb, 0x6b, 0x13, 0xff, 0xcd,
	0x82, 0xa7, 0xe2, 0x11, 0x63, 0x0c, 0xcb, 0x0f, 0x7f, 0xf9, 0x1d, 0xa8, 0x8e, 0xd4, 0x4b, 0x49,
	0x87, 0xbc, 0x99, 0x35, 0x77, 0xb9, 0x61, 0x67, 0x10, 0xfc, 0x17, 0x0b, 0xd6, 0x0e, 0x2f, 0x9d,
	0x60, 0xa8, 0x33, 0xff, 0xa1, 0x5d, 0x72, 0x8e, 0x5f, 0x1b, 0x50, 0xe5, 0x49, 0x29, 0xcb, 0x52,
	0x55, 0x5f, 0x40, 0x6e, 0x84, 0x35, 0xfc, 0x05, 0x3c, 0x7d, 0x6f, 0x12, 0xd2, 0x28, 0x0c, 0x28,
	0x99, 0x17, 0xd4, 0x2e, 0x2c, 0x4d, 0x4c, 0x11, 0xa5, 0xb5, 0x03, 0x15, 0xfd, 0xff, 0x81, 0xfa,
	0xc4, 0x59, 0x99, 0xee, 0x96, 0xe2, 0xcb, 0xd3, 0x4e, 0x61, 0xf8, 0xd8, 0x9c, 0x47, 0x29, 0xd1,
	0xf6, 0x74, 0xd7, 0xbd, 0x85, 0x27, 0xfd, 0x3e, 0xdd, 0x82, 0x66, 0xd6, 0xd6, 0x14, 0xc9, 0x32,
	0x14, 0x19, 0x17, 0x28, 0xf7, 0xe5, 0x02, 0xff, 0xc3, 0x82, 0x95, 0xa9, 0x1a, 0x54, 0xf8, 0xcf,
	0xf8, 0x73, 0x93, 0xd3, 0xde, 0xed, 0xbb, 0x02, 0xf1, 0x41, 0x18, 0x90, 0x77, 0xac, 0x37, 0xd1,
	0x97, 0x81, 0x8b, 0x0e, 0x65, 0x46, 0xaf, 0x41, 0xe5, 0xd2, 0xa1, 0xbd, 0x51, 0x18, 0xcb, 0xd6,
	0x5c, 0xb1, 0xcb, 0x97, 0x0e, 0x3d, 0x0d, 0x63, 0x82, 0x3e, 0x86, 0x3a, 0x0b, 0x99, 0xe3, 0xf7,
	0x24, 0x17, 0x15, 0xc5, 0x56, 0xb0, 0x9f, 0x08, 0xa1, 0xb4, 0x43, 0xf1, 0x4f, 0xb0, 0x3c, 0x39,
	0x24, 0x94, 0x9f, 0x9f, 0x42, 0x25, 0x52, 0x32, 0xe5, 0x69, 0x9a, 0x1e, 0x0a, 0x6b, 0xa7, 0x80,
	0xc7, 0x78, 0x89, 0x5f, 0x98, 0x93, 0x3c, 0xad, 0x3a, 0xe5, 0xc5, 0xcf, 0xcf, 0x51, 0xfc, 0x56,
	0xf2, 0x5c, 0x86, 0x31, 0x7b, 0xed, 0x5d, 0x13, 0xd7, 0x9c, 0x3e, 0x8f, 0x9e, 0x2f, 0x7b, 0xf9,
	0xb6, 0x85, 0x3b, 0xb0, 0xca, 0x2d, 0xc8, 0x61, 0x39, 0x41, 0x3f, 0x3b, 0x09, 0xce, 0xa0, 0xbe,
	0xef, 0xba, 0xaf, 0xc8, 0xd8, 0x80, 0x49, 0x6a, 0xcb, 0x1c, 0x5d, 0xf7, 0x98, 0xe8, 0x5d, 0x68,
	0x68, 0x46, 0x15, 0xa0, 0x67, 0x50, 0x8b, 0x62, 0xef, 0xda, 0x91, 0x9f, 0x58, 0xfa, 0x2b, 0x4c,
	0x89, 0xf8, 0x5b, 0x75, 0x05, 0x4a, 0x57, 0x64, 0x9c, 0x95, 0x6d, 0xf1, 0x8a, 0x8c, 0x5f, 0xba,
	0xf8, 0x7b, 0x68, 0xda, 0xe2, 0x71, 0xff, 0x01, 0xdd, 0x33, 0x6c, 0x15, 0x0c, 0x5b, 0xbf, 0xde,
	0x81, 0xe6, 0x74, 0xcb, 0x46, 0x75, 0xa8, 0xee, 0x9f, 0x1f, 0x1e, 0xbf, 0x39, 0x7a, 0xf9, 0xe6,
	0xa4, 0x99, 0x43, 0x0d, 0x80, 0xa3, 0xe3, 0x74, 0x6d, 0xf5, 0x4b, 0xe2, 0x1b, 0xf7, 0xb7, 0xff,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xd8, 0x2b, 0x4d, 0x31, 0x14, 0x00, 0x00,
}
