// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iam/v1/api.proto

package iam_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IAM service

type IAMClient interface {
	// Registers a subject with IAM, if the supplied context is already used, an already exists error will be returned.
	RegisterSubject(ctx context.Context, in *RegisterSubjectRequest, opts ...grpc.CallOption) (*RegisterSubjectResponse, error)
	// Authenticate subject takes a context, email and password and validates the password is correct. No response
	// is returned but an OK status indicates a successful authentication, while an Unauthenticated response will
	// be returned on a missing subject/persona, the persona is locked, or the password is not correct.
	//
	// Multiple authentication attempts with the incorrect password will lock the persona for a short time period.
	// This is to prevent a brute-force attempt at authenticating a user.
	AuthenticateSubject(ctx context.Context, in *AuthenticateSubjectRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Returns a list of subject personas by their subject IDs. The request is scoped to a specific context.
	GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...grpc.CallOption) (*GetSubjectsResponse, error)
	// Returns a list of subject personas by their emails. The request is scoped to a specific context.
	GetSubjectsByEmail(ctx context.Context, in *GetSubjectsByEmailRequest, opts ...grpc.CallOption) (*GetSubjectsResponse, error)
	// Will update/set/delete a subject personas attributes by its subject ID. Will return a not found error if the
	// subject persona doesn't exist.
	MutateAttributes(ctx context.Context, in *MutateAttributesRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Will set a given subject personas password.
	ResetSubjectPassword(ctx context.Context, in *ResetSubjectPasswordRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Will change the email of a given subject persona.
	ChangeSubjectEmail(ctx context.Context, in *ChangeSubjectEmailRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Will delete the persona from a given subject.
	DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Will search across a specified context. Cross context searching is not supported.
	SearchSubject(ctx context.Context, in *SearchSubjectRequest, opts ...grpc.CallOption) (*SearchSubjectResponse, error)
	// Given a subject ID, will return the context that is associated to this persona.
	// Specifically, this is useful for getting the partner id from a user ID, if the user is in a type/namespace
	// context.
	GetSubjectContext(ctx context.Context, in *GetSubjectContextRequest, opts ...grpc.CallOption) (*GetSubjectContextResponse, error)
	// Registers a resource owner with IAM. This sets an application up for integration with IAM access control system.
	RegisterResourceOwner(ctx context.Context, in *RegisterResourceOwnerRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Registers a specific resource with IAM. This allows IAM to ask the resource owner about its resources.
	RegisterResource(ctx context.Context, in *RegisterResourceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Registers a policy associated with a resource with IAM that is evaluated whenever a subject requests access to that type of resource.
	RegisterPolicy(ctx context.Context, in *RegisterPolicyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Asks IAM whether a certain subject has access to a certain resource
	AccessResource(ctx context.Context, in *AccessResourceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Asks IAM for a short lived token for a specific user.
	// This is a temporary endpoint until we back VBC, Marketplace, and SSC sessions by IAM.
	GetShortLivedToken(ctx context.Context, in *GetShortLivedTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// Asks IAM to exchange the caller-provided token for a IAM session token.
	GetSessionToken(ctx context.Context, in *GetSessionTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// Add a public/private key pair to a subject. The private key is returned on the response, but is not stored in IAM.
	AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error)
	// Remove a public key pair from a subject. Tokens signed by the corresponding private key will no longer be valid.
	RemoveKey(ctx context.Context, in *RemoveKeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type iAMClient struct {
	cc *grpc.ClientConn
}

func NewIAMClient(cc *grpc.ClientConn) IAMClient {
	return &iAMClient{cc}
}

func (c *iAMClient) RegisterSubject(ctx context.Context, in *RegisterSubjectRequest, opts ...grpc.CallOption) (*RegisterSubjectResponse, error) {
	out := new(RegisterSubjectResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/RegisterSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) AuthenticateSubject(ctx context.Context, in *AuthenticateSubjectRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/AuthenticateSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...grpc.CallOption) (*GetSubjectsResponse, error) {
	out := new(GetSubjectsResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/GetSubjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetSubjectsByEmail(ctx context.Context, in *GetSubjectsByEmailRequest, opts ...grpc.CallOption) (*GetSubjectsResponse, error) {
	out := new(GetSubjectsResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/GetSubjectsByEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) MutateAttributes(ctx context.Context, in *MutateAttributesRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/MutateAttributes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) ResetSubjectPassword(ctx context.Context, in *ResetSubjectPasswordRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/ResetSubjectPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) ChangeSubjectEmail(ctx context.Context, in *ChangeSubjectEmailRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/ChangeSubjectEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/DeleteSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) SearchSubject(ctx context.Context, in *SearchSubjectRequest, opts ...grpc.CallOption) (*SearchSubjectResponse, error) {
	out := new(SearchSubjectResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/SearchSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetSubjectContext(ctx context.Context, in *GetSubjectContextRequest, opts ...grpc.CallOption) (*GetSubjectContextResponse, error) {
	out := new(GetSubjectContextResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/GetSubjectContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) RegisterResourceOwner(ctx context.Context, in *RegisterResourceOwnerRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/RegisterResourceOwner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) RegisterResource(ctx context.Context, in *RegisterResourceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/RegisterResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) RegisterPolicy(ctx context.Context, in *RegisterPolicyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/RegisterPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) AccessResource(ctx context.Context, in *AccessResourceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/AccessResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetShortLivedToken(ctx context.Context, in *GetShortLivedTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/GetShortLivedToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetSessionToken(ctx context.Context, in *GetSessionTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/GetSessionToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error) {
	out := new(AddKeyResponse)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/AddKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) RemoveKey(ctx context.Context, in *RemoveKeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/iam.v1.IAM/RemoveKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IAM service

type IAMServer interface {
	// Registers a subject with IAM, if the supplied context is already used, an already exists error will be returned.
	RegisterSubject(context.Context, *RegisterSubjectRequest) (*RegisterSubjectResponse, error)
	// Authenticate subject takes a context, email and password and validates the password is correct. No response
	// is returned but an OK status indicates a successful authentication, while an Unauthenticated response will
	// be returned on a missing subject/persona, the persona is locked, or the password is not correct.
	//
	// Multiple authentication attempts with the incorrect password will lock the persona for a short time period.
	// This is to prevent a brute-force attempt at authenticating a user.
	AuthenticateSubject(context.Context, *AuthenticateSubjectRequest) (*google_protobuf1.Empty, error)
	// Returns a list of subject personas by their subject IDs. The request is scoped to a specific context.
	GetSubjects(context.Context, *GetSubjectsRequest) (*GetSubjectsResponse, error)
	// Returns a list of subject personas by their emails. The request is scoped to a specific context.
	GetSubjectsByEmail(context.Context, *GetSubjectsByEmailRequest) (*GetSubjectsResponse, error)
	// Will update/set/delete a subject personas attributes by its subject ID. Will return a not found error if the
	// subject persona doesn't exist.
	MutateAttributes(context.Context, *MutateAttributesRequest) (*google_protobuf1.Empty, error)
	// Will set a given subject personas password.
	ResetSubjectPassword(context.Context, *ResetSubjectPasswordRequest) (*google_protobuf1.Empty, error)
	// Will change the email of a given subject persona.
	ChangeSubjectEmail(context.Context, *ChangeSubjectEmailRequest) (*google_protobuf1.Empty, error)
	// Will delete the persona from a given subject.
	DeleteSubject(context.Context, *DeleteSubjectRequest) (*google_protobuf1.Empty, error)
	// Will search across a specified context. Cross context searching is not supported.
	SearchSubject(context.Context, *SearchSubjectRequest) (*SearchSubjectResponse, error)
	// Given a subject ID, will return the context that is associated to this persona.
	// Specifically, this is useful for getting the partner id from a user ID, if the user is in a type/namespace
	// context.
	GetSubjectContext(context.Context, *GetSubjectContextRequest) (*GetSubjectContextResponse, error)
	// Registers a resource owner with IAM. This sets an application up for integration with IAM access control system.
	RegisterResourceOwner(context.Context, *RegisterResourceOwnerRequest) (*google_protobuf1.Empty, error)
	// Registers a specific resource with IAM. This allows IAM to ask the resource owner about its resources.
	RegisterResource(context.Context, *RegisterResourceRequest) (*google_protobuf1.Empty, error)
	// Registers a policy associated with a resource with IAM that is evaluated whenever a subject requests access to that type of resource.
	RegisterPolicy(context.Context, *RegisterPolicyRequest) (*google_protobuf1.Empty, error)
	// Asks IAM whether a certain subject has access to a certain resource
	AccessResource(context.Context, *AccessResourceRequest) (*google_protobuf1.Empty, error)
	// Asks IAM for a short lived token for a specific user.
	// This is a temporary endpoint until we back VBC, Marketplace, and SSC sessions by IAM.
	GetShortLivedToken(context.Context, *GetShortLivedTokenRequest) (*GetTokenResponse, error)
	// Asks IAM to exchange the caller-provided token for a IAM session token.
	GetSessionToken(context.Context, *GetSessionTokenRequest) (*GetTokenResponse, error)
	// Add a public/private key pair to a subject. The private key is returned on the response, but is not stored in IAM.
	AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error)
	// Remove a public key pair from a subject. Tokens signed by the corresponding private key will no longer be valid.
	RemoveKey(context.Context, *RemoveKeyRequest) (*google_protobuf1.Empty, error)
}

func RegisterIAMServer(s *grpc.Server, srv IAMServer) {
	s.RegisterService(&_IAM_serviceDesc, srv)
}

func _IAM_RegisterSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).RegisterSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/RegisterSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).RegisterSubject(ctx, req.(*RegisterSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_AuthenticateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).AuthenticateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/AuthenticateSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).AuthenticateSubject(ctx, req.(*AuthenticateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/GetSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetSubjects(ctx, req.(*GetSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetSubjectsByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectsByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetSubjectsByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/GetSubjectsByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetSubjectsByEmail(ctx, req.(*GetSubjectsByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_MutateAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).MutateAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/MutateAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).MutateAttributes(ctx, req.(*MutateAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_ResetSubjectPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSubjectPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).ResetSubjectPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/ResetSubjectPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).ResetSubjectPassword(ctx, req.(*ResetSubjectPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_ChangeSubjectEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSubjectEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).ChangeSubjectEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/ChangeSubjectEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).ChangeSubjectEmail(ctx, req.(*ChangeSubjectEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/DeleteSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).DeleteSubject(ctx, req.(*DeleteSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_SearchSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).SearchSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/SearchSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).SearchSubject(ctx, req.(*SearchSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetSubjectContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetSubjectContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/GetSubjectContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetSubjectContext(ctx, req.(*GetSubjectContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_RegisterResourceOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResourceOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).RegisterResourceOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/RegisterResourceOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).RegisterResourceOwner(ctx, req.(*RegisterResourceOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_RegisterResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).RegisterResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/RegisterResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).RegisterResource(ctx, req.(*RegisterResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_RegisterPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).RegisterPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/RegisterPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).RegisterPolicy(ctx, req.(*RegisterPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_AccessResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).AccessResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/AccessResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).AccessResource(ctx, req.(*AccessResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetShortLivedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortLivedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetShortLivedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/GetShortLivedToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetShortLivedToken(ctx, req.(*GetShortLivedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/GetSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetSessionToken(ctx, req.(*GetSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/AddKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).AddKey(ctx, req.(*AddKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_RemoveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).RemoveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.IAM/RemoveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).RemoveKey(ctx, req.(*RemoveKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iam.v1.IAM",
	HandlerType: (*IAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSubject",
			Handler:    _IAM_RegisterSubject_Handler,
		},
		{
			MethodName: "AuthenticateSubject",
			Handler:    _IAM_AuthenticateSubject_Handler,
		},
		{
			MethodName: "GetSubjects",
			Handler:    _IAM_GetSubjects_Handler,
		},
		{
			MethodName: "GetSubjectsByEmail",
			Handler:    _IAM_GetSubjectsByEmail_Handler,
		},
		{
			MethodName: "MutateAttributes",
			Handler:    _IAM_MutateAttributes_Handler,
		},
		{
			MethodName: "ResetSubjectPassword",
			Handler:    _IAM_ResetSubjectPassword_Handler,
		},
		{
			MethodName: "ChangeSubjectEmail",
			Handler:    _IAM_ChangeSubjectEmail_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _IAM_DeleteSubject_Handler,
		},
		{
			MethodName: "SearchSubject",
			Handler:    _IAM_SearchSubject_Handler,
		},
		{
			MethodName: "GetSubjectContext",
			Handler:    _IAM_GetSubjectContext_Handler,
		},
		{
			MethodName: "RegisterResourceOwner",
			Handler:    _IAM_RegisterResourceOwner_Handler,
		},
		{
			MethodName: "RegisterResource",
			Handler:    _IAM_RegisterResource_Handler,
		},
		{
			MethodName: "RegisterPolicy",
			Handler:    _IAM_RegisterPolicy_Handler,
		},
		{
			MethodName: "AccessResource",
			Handler:    _IAM_AccessResource_Handler,
		},
		{
			MethodName: "GetShortLivedToken",
			Handler:    _IAM_GetShortLivedToken_Handler,
		},
		{
			MethodName: "GetSessionToken",
			Handler:    _IAM_GetSessionToken_Handler,
		},
		{
			MethodName: "AddKey",
			Handler:    _IAM_AddKey_Handler,
		},
		{
			MethodName: "RemoveKey",
			Handler:    _IAM_RemoveKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/v1/api.proto",
}

// Client API for UserIAM service

type UserIAMClient interface {
	// Gets the subject from the given session
	GetSubjectBySession(ctx context.Context, in *GetSubjectBySessionRequest, opts ...grpc.CallOption) (*GetSubjectResponse, error)
	// List Personas given a session id will return a paged set of results of all the available personas across all contexts for a specific Subject.
	ListPersonas(ctx context.Context, in *ListPersonasRequest, opts ...grpc.CallOption) (*ListPersonasResponse, error)
	// Returns a short lived token that can be used to issue requests to other vendasta APIs.
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
}

type userIAMClient struct {
	cc *grpc.ClientConn
}

func NewUserIAMClient(cc *grpc.ClientConn) UserIAMClient {
	return &userIAMClient{cc}
}

func (c *userIAMClient) GetSubjectBySession(ctx context.Context, in *GetSubjectBySessionRequest, opts ...grpc.CallOption) (*GetSubjectResponse, error) {
	out := new(GetSubjectResponse)
	err := grpc.Invoke(ctx, "/iam.v1.UserIAM/GetSubjectBySession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userIAMClient) ListPersonas(ctx context.Context, in *ListPersonasRequest, opts ...grpc.CallOption) (*ListPersonasResponse, error) {
	out := new(ListPersonasResponse)
	err := grpc.Invoke(ctx, "/iam.v1.UserIAM/ListPersonas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userIAMClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := grpc.Invoke(ctx, "/iam.v1.UserIAM/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserIAM service

type UserIAMServer interface {
	// Gets the subject from the given session
	GetSubjectBySession(context.Context, *GetSubjectBySessionRequest) (*GetSubjectResponse, error)
	// List Personas given a session id will return a paged set of results of all the available personas across all contexts for a specific Subject.
	ListPersonas(context.Context, *ListPersonasRequest) (*ListPersonasResponse, error)
	// Returns a short lived token that can be used to issue requests to other vendasta APIs.
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
}

func RegisterUserIAMServer(s *grpc.Server, srv UserIAMServer) {
	s.RegisterService(&_UserIAM_serviceDesc, srv)
}

func _UserIAM_GetSubjectBySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectBySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIAMServer).GetSubjectBySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.UserIAM/GetSubjectBySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIAMServer).GetSubjectBySession(ctx, req.(*GetSubjectBySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserIAM_ListPersonas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIAMServer).ListPersonas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.UserIAM/ListPersonas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIAMServer).ListPersonas(ctx, req.(*ListPersonasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserIAM_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserIAMServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.v1.UserIAM/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserIAMServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserIAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iam.v1.UserIAM",
	HandlerType: (*UserIAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubjectBySession",
			Handler:    _UserIAM_GetSubjectBySession_Handler,
		},
		{
			MethodName: "ListPersonas",
			Handler:    _UserIAM_ListPersonas_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _UserIAM_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/v1/api.proto",
}

func init() { proto.RegisterFile("iam/v1/api.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x72, 0x12, 0x41,
	0x10, 0x85, 0x89, 0xa9, 0x42, 0xed, 0x18, 0x83, 0x13, 0x89, 0x29, 0xf2, 0x67, 0xd0, 0xeb, 0xa5,
	0x12, 0xaf, 0xbc, 0xb2, 0x48, 0x4c, 0xc5, 0x54, 0x82, 0x22, 0x24, 0xa6, 0xca, 0xbb, 0x65, 0x69,
	0x61, 0x14, 0x76, 0x70, 0x7a, 0x96, 0xc8, 0x1b, 0xf8, 0x1a, 0xbe, 0xa1, 0x8f, 0x60, 0xc1, 0xce,
	0xec, 0x3f, 0x4e, 0x2e, 0x39, 0x67, 0xfa, 0xdb, 0xe9, 0xd3, 0xf4, 0x40, 0x85, 0xbb, 0xe3, 0xc6,
	0xf4, 0xa8, 0xe1, 0x4e, 0xb8, 0x33, 0x91, 0x42, 0x09, 0x56, 0xe6, 0xee, 0xd8, 0x99, 0x1e, 0xd5,
	0x76, 0x06, 0x42, 0x0c, 0x46, 0xd8, 0x58, 0xa8, 0xbd, 0xe0, 0x5b, 0x03, 0xc7, 0x13, 0x35, 0x0b,
	0x0f, 0xd5, 0xaa, 0xba, 0x8c, 0x82, 0xde, 0x77, 0xf4, 0x14, 0x69, 0x79, 0x4b, 0xcb, 0x12, 0x49,
	0x04, 0xd2, 0x43, 0xad, 0x1f, 0xff, 0x59, 0x83, 0xd5, 0x8b, 0x66, 0x8b, 0x5d, 0xc3, 0x46, 0x07,
	0x07, 0x9c, 0x14, 0xca, 0x6e, 0x58, 0xc9, 0xf6, 0x9d, 0xf0, 0x7b, 0x4e, 0xc6, 0xe8, 0xe0, 0xcf,
	0x00, 0x49, 0xd5, 0x0e, 0x96, 0xfa, 0x34, 0x11, 0x3e, 0x61, 0xbd, 0xc4, 0xba, 0xb0, 0xd9, 0x0c,
	0xd4, 0x10, 0x7d, 0xc5, 0x3d, 0x57, 0xa1, 0x21, 0xd7, 0x4d, 0x65, 0x81, 0x69, 0xe8, 0x5b, 0x4e,
	0xd8, 0xa5, 0x63, 0xba, 0x74, 0xce, 0xe6, 0x5d, 0xd6, 0x4b, 0xec, 0x03, 0xac, 0x9d, 0xa3, 0xd2,
	0xc7, 0x89, 0xd5, 0x0c, 0x2c, 0x21, 0x1a, 0xc8, 0x4e, 0xa1, 0x17, 0x5d, 0xef, 0x0b, 0xb0, 0x84,
	0x71, 0x32, 0x3b, 0x1b, 0xbb, 0x7c, 0xc4, 0x0e, 0x0b, 0x8a, 0xb4, 0x77, 0x4f, 0x6e, 0x0b, 0x2a,
	0xad, 0x40, 0xb9, 0x0a, 0x9b, 0x4a, 0x49, 0xde, 0x0b, 0x14, 0x12, 0x8b, 0xd2, 0xca, 0x3a, 0xf6,
	0x86, 0x6f, 0xe0, 0x79, 0x07, 0x29, 0xfa, 0x52, 0xdb, 0x25, 0xba, 0x13, 0xb2, 0xcf, 0x5e, 0xc5,
	0x03, 0xc8, 0xbb, 0x76, 0xec, 0x67, 0x60, 0xa7, 0x43, 0xd7, 0x1f, 0x98, 0xe4, 0x33, 0xdd, 0xe7,
	0x3d, 0x3b, 0xf2, 0x1c, 0xd6, 0xdf, 0xe3, 0x08, 0xe3, 0x49, 0xef, 0x1a, 0x5a, 0x4a, 0xb6, 0x83,
	0x3e, 0xc2, 0x7a, 0x17, 0x5d, 0xe9, 0x0d, 0x73, 0xa0, 0x94, 0x6c, 0x40, 0x7b, 0x4b, 0xdc, 0x68,
	0x22, 0x5f, 0xe1, 0x59, 0x3c, 0xaa, 0x53, 0xe1, 0x2b, 0xfc, 0xa5, 0xd8, 0xcb, 0xfc, 0x14, 0xb5,
	0x65, 0xb8, 0x87, 0xff, 0x39, 0x11, 0xb1, 0x6f, 0xa1, 0x6a, 0x36, 0xa0, 0xa3, 0xb7, 0xeb, 0xd3,
	0x9d, 0x8f, 0x92, 0xbd, 0xce, 0x2e, 0x48, 0xca, 0xb6, 0x87, 0xd0, 0x82, 0x4a, 0xb6, 0x92, 0x1d,
	0x2c, 0x63, 0xda, 0x71, 0x17, 0xf0, 0xd4, 0x14, 0xb5, 0xc5, 0x88, 0x7b, 0x33, 0xb6, 0x97, 0x85,
	0x85, 0xfa, 0xbd, 0x50, 0x4d, 0xcf, 0x43, 0xa2, 0xe8, 0x5e, 0x11, 0x2a, 0xad, 0xdb, 0x51, 0x7a,
	0x07, 0x87, 0x42, 0xaa, 0x2b, 0x3e, 0xc5, 0xfe, 0xb5, 0xf8, 0x81, 0x7e, 0x7a, 0x07, 0xd3, 0x9e,
	0x41, 0x6e, 0x27, 0x8e, 0x68, 0x43, 0x8f, 0x64, 0xf5, 0xf7, 0x83, 0x15, 0xd6, 0x82, 0x8d, 0x79,
	0x2d, 0x12, 0x71, 0xe1, 0x87, 0xd0, 0xfd, 0x24, 0x34, 0x61, 0xd8, 0x89, 0x25, 0xf6, 0x16, 0xca,
	0xcd, 0x7e, 0xff, 0x12, 0x67, 0xac, 0x1a, 0x75, 0xba, 0xf8, 0x1d, 0x77, 0x98, 0x91, 0xa3, 0xd2,
	0x77, 0xf0, 0xb8, 0x83, 0x63, 0x31, 0xc5, 0x79, 0xf5, 0x76, 0x1c, 0xb9, 0x96, 0xac, 0x11, 0x1d,
	0xff, 0x5d, 0x81, 0x87, 0x37, 0x84, 0x72, 0xfe, 0x4e, 0xdf, 0xc2, 0x66, 0xfc, 0x5f, 0x3c, 0x99,
	0xe9, 0x36, 0xe2, 0x17, 0xb5, 0xc0, 0x34, 0x1f, 0x28, 0x78, 0x28, 0x13, 0xb7, 0xbc, 0x84, 0x27,
	0x57, 0x9c, 0x54, 0x1b, 0x25, 0x09, 0xdf, 0x25, 0x16, 0x3d, 0x71, 0x49, 0xd5, 0xa0, 0x76, 0x8b,
	0xcd, 0x44, 0xcb, 0x8f, 0x4c, 0x86, 0xec, 0x45, 0x3e, 0x55, 0x6b, 0xdc, 0xbd, 0xf2, 0x22, 0x84,
	0x37, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x34, 0xd7, 0x1f, 0x3b, 0x05, 0x07, 0x00, 0x00,
}
