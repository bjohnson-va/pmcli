syntax = "proto3";

package vstatic.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Application represents a piece of software that can have only a single delivered artifact at any given time.
// For example: the Partner Center has a single vStatic application called `partner-center-client`
message Application {
    // unique identifier for the application (example: partner-center-client)
    string app_id = 1;

    // human readable name for the application (example: Partner Center Client)
    string app_name = 2;

    // The Github Repository URL (example: https://github.com/vendasta/IAM)
    string github_repo_url = 3;

    // A entry url to the application which contains the string <depolyment>.
    // This will be used to create a deployment view link in mission control,
    // and <deployment> will be replaced with the specific deployment id.
    string entry_url_template = 4;
}

// Request message for vStatic.CreateApplication
message CreateApplicationRequest {
    Application application = 1;
}

// Metadata for paging through a list/search endpoint.
message PagedResponseMetadata {
    // A cursor that can be provided to retrieve the next page of results
    string next_cursor = 1;
    // Whether or not more results exist
    bool has_more = 2;
}

// Metadata for paging through a list/search endpoint.
message PagedRequestOptions {
    // cursor can be passed to retrieve the next page of results keyed by the cursor
    string cursor = 1;
    // page_size specifies the number of items to return in the next page
    int64 page_size = 2;
}

// Response message for vStatic.ListApplications
message ListApplicationsResponse {
    repeated Application applications = 1;
    PagedResponseMetadata paging_metadata = 2;
}

// Request message for vStatic.ListApplicationsRequest
message ListApplicationsRequest {
    PagedRequestOptions paging_options = 1;
}

// Environment represents a vStatic environment that segments an application into test, demo, and production deliveries.
enum Environment {
    Test = 0;
    Demo = 1;
    Prod = 2;
    All = 3;
}

// Code artifacts used for an application deployment
message Artifacts {
    oneof location {
        string gcs_bucket = 1;
    }
}

// Request message for vStatic.CreateDeployment
message CreateDeploymentRequest {
    Deployment deployment = 1;
}

// Response message for vStatic.CreateDeployment
message CreateDeploymentResponse {
    // The unique identifier for the created deployment
    string deployment_id = 1;

}

// Request message for vStatic.ListDeployments
message ListDeploymentsRequest {
    // The unique identifier of the application
    string application_id = 1;

    // The environment to scope the deployments to
    Environment environment = 2;

    PagedRequestOptions paging_options = 3;
}

message GetDeploymentsResponse {
    message DeploymentContainer {
        Deployment deployment = 1;
    }

    // The list of requested Deployment
    repeated DeploymentContainer deployments = 1;
}

message GetDeploymentsRequest {
    // The unique identifier of the application
    string application_id = 1;

    // The environment to scope the deployments to
    Environment environment = 2;

    // The IDs of the deployments to get
    repeated string deployment_ids = 3;
}

// Strategy controls the delivery mechanism for a specific deployment to the end user.
message Strategy {

    // Default sets the default deploy strategy
    message Default {
    }

    // IAM deploy strategy
    message IAM {
        message Filter {
            map<string, string> filters = 1;
        }
        // Attribute filter allows a version to select specific IAM users to receive this deployment.
        Filter attribute_filters = 1;
    }

    // Allows a delivery strategy to limit the percentage of users that receive the deployment.
    message Percentage {
        int64 percentage = 1;
    }

    oneof type {
        Default default = 2;
        IAM iam = 3;
        Percentage percentage = 4;
    }
}

// Request message for vStatic.CreateDeliveryStrategy
message CreateDeliveryStrategyRequest {
    // The application ID
    string app_id = 1;

    // The deployment ID to deliver
    string deployment_id = 2;

    // The environment to create the delivery strategy for.
    Environment environment = 3;

    // The strategy to use for the delivery
    Strategy strategy = 4;

    // The name of the delivery (Can not be specified if the delivery is the default)
    string name = 5;
}

// Details about the user who committed/authored a specific git commit.
message GithubCommitUser {
    google.protobuf.Timestamp date = 1;
    string name = 2;
    string email = 3;
}

// The details of the git commit (if any)
message GitCommitDetails {
    // The user who created the content
    GithubCommitUser author = 1;

    // The user who committed the content
    GithubCommitUser committer = 2;

    // the content of the git commit message
    string message = 3;
}

// Deployment represents an immutable artifact that can be delivered to the end user.
message Deployment {
    // The application ID
    string app_id = 1;

    // (Ouput Only) The ID of the deployment
    string deployment_id = 2;

    // if applicable, the git hash of this deployment
    string git_hash = 3;

    // The arficacts to be served for this application.
    Artifacts artifacts = 4;

    // Environment to scope this deployment to.
    Environment environment = 5;

    // Output only - Time the deployment was created
    google.protobuf.Timestamp created = 6;

    // Output only - Time the deployment was last updated
    google.protobuf.Timestamp updated = 7;

    // Optional - Google Container Builder ID that built and published this deployment
    string container_builder_id = 8;

    // Output only - Details about the provided git_hash
    GitCommitDetails git_commit_details = 9;

    // Output only - The creator of the deployment
    string author = 10;

    // If deploying a custom artifact, a name is required.
    string name = 11;

    // if applicable, the git branch name of this deployment
    string branch_name = 12;
}

// Response message for vStatic.ListDeployments
message ListDeploymentsResponse {
    repeated Deployment deployments = 1;
    PagedResponseMetadata paging_metadata = 2;
}

// Response message for vStatic.CreateDeliveryStrategy
message CreateDeliveryStrategyResponse {
    // The ID of the delivery strategy
    string delivery_strategy_id = 1;
}

// Request message for vStatic.UpdateDeliveryStrategyRequest
message UpdateDeliveryStrategyRequest {

    // The application ID
    string app_id = 1;

    // The delivery strategy being updated
    string delivery_strategy_id = 2;

    // Updates the delivery strategy
    string deployment_id = 3;

    // Environment to scope this delivery strategy to.
    Environment environment = 4;
}

// Request message for vStatic.ListDeliveryStrategies
message ListDeliveryStrategiesRequest {
    // The application ID
    string app_id = 1;

    // The environment to get
    Environment environment = 2;
}

// The delivery strategy is an active delivery strategy of a deployment for an application
message DeliveryStrategy {

    // The unique id for the delivery strategy
    string delivery_strategy_id = 1;

    // the strategy being used
    Strategy strategy = 2;

    // the deployment being used for this delivery
    string deployment_id = 3;

    // The environment this delivery strategy is active for.
    Environment environment = 4;

    // The date the delivery strategy was created
    google.protobuf.Timestamp created = 5;

    // The date the delivery strategy was last updated
    google.protobuf.Timestamp updated = 6;

    message Delivery {
        // The deployment this delivery is for
        string deployment_id = 1;
    
        // The time this delivery occured
        google.protobuf.Timestamp delivery_time = 2;
    
        // The email of the user who created this delivery
        string user_email = 3;
    }    

    // The history of deliveries for this strategy, limited to the last 15
    repeated Delivery delivery_history = 7;
}


// Response message for vStatic.ListDeliveryStrategiesResponse
message ListDeliveryStrategiesResponse {
    repeated DeliveryStrategy strategies = 1;
}

// Request message for vStatic.DeleteDeliveryStrategy
message DeleteDeliveryStrategyRequest {

    string app_id = 1;

    string delivery_id = 2;

    // Environment that this delivery strategy is for
    Environment environment = 3;
}

// Request message for vStatic.CreateStaticResource
message CreateStaticResourceRequest {
    string mediarepo_id = 1;
}

// Request message for vStatic.GetIndex
message GetIndexRequest {
    // Retrieves this applications index.html
    string app_id = 1;

    Environment environment = 2;

    // Optional: If provided, will run this request through the active delivery strategies
    string iam_token = 3;

    // Optional: Will override the delivery strategies for the application and will use this deployments artifacts, if the deployment belongs to application.
    string deployment_id = 4;

    // Optional: Defaults to en(english), if no index.html exists for provided locale the english version will be returned
    string locale_id = 5;
}

// Response message for vStatic.GetIndex
message GetIndexResponse {
    bytes html = 1;
    // The id of this deployment, if you supplied one in the request it will be the same.
    string deployment_id = 2;
}

// Request message for vStatic.GetAssetURL
message GetAssetURLRequest {
    // Retrieves this applications assets url
    string app_id = 1;
    Environment environment = 2;
    // The id of the deployment of the index file that has already been served to the user
    string deployment_id = 3;
    // The path to the asset (no hostname) i.e. /assets/images/logo.png
    string asset_path = 4;
}

// Response message for vStatic.GetAssetURL
message GetAssetURLResponse {
    // the combination of the hostname and asset path of where the asset is being served from
    string serving_url = 1;
}

service vStatic {

    // Creates a new application, this should match either an existing AppEngine project or a k8s µservice.
    rpc CreateApplication(CreateApplicationRequest) returns (google.protobuf.Empty) {};

    // Lists a page of applications
    rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {};

    // Updates an application
    rpc UpdateApplication(CreateApplicationRequest) returns (google.protobuf.Empty) {};

    // Creates a new deployment that is a child of an application. A deployment contains the artifacts of an
    // application (App Bundles, CSS, etc...)
    rpc CreateDeployment(CreateDeploymentRequest) returns (CreateDeploymentResponse){};

    // List deployments for an application in created order descenging.
    rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse){};

    // Get deployments for an application.
    rpc GetDeployments(GetDeploymentsRequest) returns (GetDeploymentsResponse){};

    // A delivery strategy controls how a deployment of an application is hosted to the end user.
    rpc CreateDeliveryStrategy(CreateDeliveryStrategyRequest) returns (CreateDeliveryStrategyResponse) {};

    // Updates the delivery strategy to a new deployment
    rpc UpdateDeliveryStrategy(UpdateDeliveryStrategyRequest) returns (google.protobuf.Empty) {};

    // Lists all of the active delivery strategies for an application
    rpc ListDeliveryStrategies(ListDeliveryStrategiesRequest) returns (ListDeliveryStrategiesResponse){};

    // Delete an existing delivery strategy
    rpc DeleteDeliveryStrategy(DeleteDeliveryStrategyRequest) returns (google.protobuf.Empty) {};

    // Creates a new static resource object
    rpc CreateStaticResource(CreateStaticResourceRequest) returns (google.protobuf.Empty) {};

    // Retrieves the index.html for the given application
    rpc GetIndex(GetIndexRequest) returns (GetIndexResponse) {};

    // Retrieves the serving url for the given application and asset
    rpc GetAssetURL(GetAssetURLRequest) returns (GetAssetURLResponse) {};

}
