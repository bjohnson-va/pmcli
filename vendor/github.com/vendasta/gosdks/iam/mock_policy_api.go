// Code generated by mockery v1.0.0
package iam

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"
import resources "github.com/vendasta/gosdks/iam/resources"
import subjectcontext "github.com/vendasta/gosdks/iam/subjectcontext"

// MockPolicyAPI is an autogenerated mock type for the PolicyAPI type
type MockPolicyAPI struct {
	mock.Mock
}

// AccessAccountGroup provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, accountGroupID, accessScopes
func (_m *MockPolicyAPI) AccessAccountGroup(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, accountGroupID string, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, accountGroupID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, string, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, accountGroupID, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessAccountGroups provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, accountGroupIDs, accessScopes
func (_m *MockPolicyAPI) AccessAccountGroups(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, accountGroupIDs []string, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, accountGroupIDs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, []string, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, accountGroupIDs, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessAccounts provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, accountIdentifiers, accessScopes
func (_m *MockPolicyAPI) AccessAccounts(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, accountIdentifiers []*resources.AccountIdentifier, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, accountIdentifiers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, []*resources.AccountIdentifier, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, accountIdentifiers, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessPartnerMarket provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, partnerID, marketIDs, accessScopes
func (_m *MockPolicyAPI) AccessPartnerMarket(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, partnerID string, marketIDs []string, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, partnerID, marketIDs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, string, []string, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, partnerID, marketIDs, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessResource provides a mock function with given fields: _a0, _a1
func (_m *MockPolicyAPI) AccessResource(_a0 context.Context, _a1 *AccessResource) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *AccessResource) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
