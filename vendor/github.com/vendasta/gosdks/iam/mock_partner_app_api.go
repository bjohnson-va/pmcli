// Code generated by mockery v1.0.0
package iam

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"
import subject "github.com/vendasta/gosdks/iam/subject"

// MockPartnerAppAPI is an autogenerated mock type for the PartnerAppAPI type
type MockPartnerAppAPI struct {
	mock.Mock
}

// PartnerAppAddKey provides a mock function with given fields: ctx, partnerID, subjectID
func (_m *MockPartnerAppAPI) PartnerAppAddKey(ctx context.Context, partnerID string, subjectID string) (PrivateKey, string, error) {
	ret := _m.Called(ctx, partnerID, subjectID)

	var r0 PrivateKey
	if rf, ok := ret.Get(0).(func(context.Context, string, string) PrivateKey); ok {
		r0 = rf(ctx, partnerID, subjectID)
	} else {
		r0 = ret.Get(0).(PrivateKey)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, partnerID, subjectID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, partnerID, subjectID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PartnerAppByEmail provides a mock function with given fields: ctx, partnerID, email
func (_m *MockPartnerAppAPI) PartnerAppByEmail(ctx context.Context, partnerID string, email string) (*subject.PartnerApp, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *subject.PartnerApp
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.PartnerApp); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.PartnerApp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerAppGenerateClientKey provides a mock function with given fields: ctx, partnerID, email
func (_m *MockPartnerAppAPI) PartnerAppGenerateClientKey(ctx context.Context, partnerID string, email string) (*ClientKey, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *ClientKey
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ClientKey); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClientKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerAppRemoveKey provides a mock function with given fields: ctx, partnerID, email, keyID
func (_m *MockPartnerAppAPI) PartnerAppRemoveKey(ctx context.Context, partnerID string, email string, keyID string) error {
	ret := _m.Called(ctx, partnerID, email, keyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, partnerID, email, keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterPartnerApp provides a mock function with given fields: ctx, partnerID, email
func (_m *MockPartnerAppAPI) RegisterPartnerApp(ctx context.Context, partnerID string, email string) (string, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
