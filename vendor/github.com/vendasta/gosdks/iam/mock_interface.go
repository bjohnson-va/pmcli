// Code generated by mockery v1.0.0
package iam

import context "golang.org/x/net/context"
import iam_v1 "github.com/vendasta/gosdks/pb/iam/v1"
import mock "github.com/stretchr/testify/mock"
import resources "github.com/vendasta/gosdks/iam/resources"
import subject "github.com/vendasta/gosdks/iam/subject"
import subjectcontext "github.com/vendasta/gosdks/iam/subjectcontext"

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// AccessAccountGroup provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, accountGroupID, accessScopes
func (_m *MockInterface) AccessAccountGroup(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, accountGroupID string, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, accountGroupID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, string, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, accountGroupID, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessAccountGroups provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, accountGroupIDs, accessScopes
func (_m *MockInterface) AccessAccountGroups(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, accountGroupIDs []string, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, accountGroupIDs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, []string, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, accountGroupIDs, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessAccounts provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, accountIdentifiers, accessScopes
func (_m *MockInterface) AccessAccounts(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, accountIdentifiers []*resources.AccountIdentifier, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, accountIdentifiers)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, []*resources.AccountIdentifier, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, accountIdentifiers, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessPartnerMarket provides a mock function with given fields: ctx, iamContext, subjectIdentifier, sessionID, partnerID, marketIDs, accessScopes
func (_m *MockInterface) AccessPartnerMarket(ctx context.Context, iamContext *subjectcontext.Context, subjectIdentifier *SubjectIdentifier, sessionID string, partnerID string, marketIDs []string, accessScopes ...AccessScope) error {
	_va := make([]interface{}, len(accessScopes))
	for _i := range accessScopes {
		_va[_i] = accessScopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iamContext, subjectIdentifier, sessionID, partnerID, marketIDs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, *SubjectIdentifier, string, string, []string, ...AccessScope) error); ok {
		r0 = rf(ctx, iamContext, subjectIdentifier, sessionID, partnerID, marketIDs, accessScopes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessResource provides a mock function with given fields: _a0, _a1
func (_m *MockInterface) AccessResource(_a0 context.Context, _a1 *AccessResource) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *AccessResource) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddKey provides a mock function with given fields: ctx, iamContext, email
func (_m *MockInterface) AddKey(ctx context.Context, iamContext *subjectcontext.Context, email string) (PrivateKey, string, error) {
	ret := _m.Called(ctx, iamContext, email)

	var r0 PrivateKey
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) PrivateKey); ok {
		r0 = rf(ctx, iamContext, email)
	} else {
		r0 = ret.Get(0).(PrivateKey)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) string); ok {
		r1 = rf(ctx, iamContext, email)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r2 = rf(ctx, iamContext, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExchangeToken provides a mock function with given fields: ctx, key
func (_m *MockInterface) ExchangeToken(ctx context.Context, key *ClientKey) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *ClientKey) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ClientKey) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateClientKey provides a mock function with given fields: ctx, subCtx, email
func (_m *MockInterface) GenerateClientKey(ctx context.Context, subCtx *subjectcontext.Context, email string) (*ClientKey, error) {
	ret := _m.Called(ctx, subCtx, email)

	var r0 *ClientKey
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) *ClientKey); ok {
		r0 = rf(ctx, subCtx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClientKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, subCtx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, iamContext, email
func (_m *MockInterface) GetByEmail(ctx context.Context, iamContext *subjectcontext.Context, email string) (subject.Subject, error) {
	ret := _m.Called(ctx, iamContext, email)

	var r0 subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) subject.Subject); ok {
		r0 = rf(ctx, iamContext, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subject.Subject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySessionID provides a mock function with given fields: ctx, iamContext, sessionID
func (_m *MockInterface) GetBySessionID(ctx context.Context, iamContext *subjectcontext.Context, sessionID string) (subject.Subject, error) {
	ret := _m.Called(ctx, iamContext, sessionID)

	var r0 subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) subject.Subject); ok {
		r0 = rf(ctx, iamContext, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subject.Subject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySubjectID provides a mock function with given fields: ctx, iamContext, subjectID
func (_m *MockInterface) GetBySubjectID(ctx context.Context, iamContext *subjectcontext.Context, subjectID string) (subject.Subject, error) {
	ret := _m.Called(ctx, iamContext, subjectID)

	var r0 subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) subject.Subject); ok {
		r0 = rf(ctx, iamContext, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subject.Subject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortLivedToken provides a mock function with given fields: ctx, iamContext, email
func (_m *MockInterface) GetShortLivedToken(ctx context.Context, iamContext *subjectcontext.Context, email string) (string, error) {
	ret := _m.Called(ctx, iamContext, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) string); ok {
		r0 = rf(ctx, iamContext, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubjectContext provides a mock function with given fields: ctx, subjectID
func (_m *MockInterface) GetSubjectContext(ctx context.Context, subjectID string) (*subjectcontext.Context, error) {
	ret := _m.Called(ctx, subjectID)

	var r0 *subjectcontext.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) *subjectcontext.Context); ok {
		r0 = rf(ctx, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subjectcontext.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPersonas provides a mock function with given fields: ctx, sessionID, cursor, pageSize, personaType
func (_m *MockInterface) ListPersonas(ctx context.Context, sessionID string, cursor string, pageSize int64, personaType string) ([]subject.Subject, string, bool, error) {
	ret := _m.Called(ctx, sessionID, cursor, pageSize, personaType)

	var r0 []subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, string) []subject.Subject); ok {
		r0 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subject.Subject)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, string) string); ok {
		r1 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, string) bool); ok {
		r2 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, int64, string) error); ok {
		r3 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// PartnerAppAddKey provides a mock function with given fields: ctx, partnerID, subjectID
func (_m *MockInterface) PartnerAppAddKey(ctx context.Context, partnerID string, subjectID string) (PrivateKey, string, error) {
	ret := _m.Called(ctx, partnerID, subjectID)

	var r0 PrivateKey
	if rf, ok := ret.Get(0).(func(context.Context, string, string) PrivateKey); ok {
		r0 = rf(ctx, partnerID, subjectID)
	} else {
		r0 = ret.Get(0).(PrivateKey)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, partnerID, subjectID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, partnerID, subjectID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PartnerAppByEmail provides a mock function with given fields: ctx, partnerID, email
func (_m *MockInterface) PartnerAppByEmail(ctx context.Context, partnerID string, email string) (*subject.PartnerApp, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *subject.PartnerApp
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.PartnerApp); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.PartnerApp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerAppGenerateClientKey provides a mock function with given fields: ctx, partnerID, email
func (_m *MockInterface) PartnerAppGenerateClientKey(ctx context.Context, partnerID string, email string) (*ClientKey, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *ClientKey
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ClientKey); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClientKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerAppRemoveKey provides a mock function with given fields: ctx, partnerID, email, keyID
func (_m *MockInterface) PartnerAppRemoveKey(ctx context.Context, partnerID string, email string, keyID string) error {
	ret := _m.Called(ctx, partnerID, email, keyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, partnerID, email, keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartnerByEmail provides a mock function with given fields: ctx, email
func (_m *MockInterface) PartnerByEmail(ctx context.Context, email string) (*subject.Partner, error) {
	ret := _m.Called(ctx, email)

	var r0 *subject.Partner
	if rf, ok := ret.Get(0).(func(context.Context, string) *subject.Partner); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.Partner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerBySessionID provides a mock function with given fields: ctx, sessionID
func (_m *MockInterface) PartnerBySessionID(ctx context.Context, sessionID string) (*subject.Partner, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *subject.Partner
	if rf, ok := ret.Get(0).(func(context.Context, string) *subject.Partner); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.Partner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerBySubjectID provides a mock function with given fields: ctx, subjectID
func (_m *MockInterface) PartnerBySubjectID(ctx context.Context, subjectID string) (*subject.Partner, error) {
	ret := _m.Called(ctx, subjectID)

	var r0 *subject.Partner
	if rf, ok := ret.Get(0).(func(context.Context, string) *subject.Partner); ok {
		r0 = rf(ctx, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.Partner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, iamContext, email, password, attributes
func (_m *MockInterface) Register(ctx context.Context, iamContext *subjectcontext.Context, email string, password string, attributes *iam_v1.StructAttribute) (string, error) {
	ret := _m.Called(ctx, iamContext, email, password, attributes)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string, string, *iam_v1.StructAttribute) string); ok {
		r0 = rf(ctx, iamContext, email, password, attributes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string, string, *iam_v1.StructAttribute) error); ok {
		r1 = rf(ctx, iamContext, email, password, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPartnerApp provides a mock function with given fields: ctx, partnerID, email
func (_m *MockInterface) RegisterPartnerApp(ctx context.Context, partnerID string, email string) (string, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPolicy provides a mock function with given fields: _a0, _a1
func (_m *MockInterface) RegisterPolicy(_a0 context.Context, _a1 *Policy) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Policy) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterResource provides a mock function with given fields: _a0, _a1
func (_m *MockInterface) RegisterResource(_a0 context.Context, _a1 *Resource) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Resource) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterResourceOwner provides a mock function with given fields: _a0, _a1
func (_m *MockInterface) RegisterResourceOwner(_a0 context.Context, _a1 *ResourceOwner) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ResourceOwner) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterSMBSubject provides a mock function with given fields: ctx, partnerID, email, accountGroupIDs
func (_m *MockInterface) RegisterSMBSubject(ctx context.Context, partnerID string, email string, accountGroupIDs []string) (string, error) {
	ret := _m.Called(ctx, partnerID, email, accountGroupIDs)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) string); ok {
		r0 = rf(ctx, partnerID, email, accountGroupIDs)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, partnerID, email, accountGroupIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveKey provides a mock function with given fields: ctx, iamContext, email, keyID
func (_m *MockInterface) RemoveKey(ctx context.Context, iamContext *subjectcontext.Context, email string, keyID string) error {
	ret := _m.Called(ctx, iamContext, email, keyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string, string) error); ok {
		r0 = rf(ctx, iamContext, email, keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SMBByEmail provides a mock function with given fields: ctx, partnerID, email
func (_m *MockInterface) SMBByEmail(ctx context.Context, partnerID string, email string) (*subject.SMB, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *subject.SMB
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SMB); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SMB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SMBBySessionID provides a mock function with given fields: ctx, partnerID, sessionID
func (_m *MockInterface) SMBBySessionID(ctx context.Context, partnerID string, sessionID string) (*subject.SMB, error) {
	ret := _m.Called(ctx, partnerID, sessionID)

	var r0 *subject.SMB
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SMB); ok {
		r0 = rf(ctx, partnerID, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SMB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SMBBySubjectID provides a mock function with given fields: ctx, partnerID, subjectID
func (_m *MockInterface) SMBBySubjectID(ctx context.Context, partnerID string, subjectID string) (*subject.SMB, error) {
	ret := _m.Called(ctx, partnerID, subjectID)

	var r0 *subject.SMB
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SMB); ok {
		r0 = rf(ctx, partnerID, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SMB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalesPersonByEmail provides a mock function with given fields: ctx, partnerID, email
func (_m *MockInterface) SalesPersonByEmail(ctx context.Context, partnerID string, email string) (*subject.SalesPerson, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *subject.SalesPerson
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SalesPerson); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SalesPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalesPersonBySessionID provides a mock function with given fields: ctx, partnerID, sessionID
func (_m *MockInterface) SalesPersonBySessionID(ctx context.Context, partnerID string, sessionID string) (*subject.SalesPerson, error) {
	ret := _m.Called(ctx, partnerID, sessionID)

	var r0 *subject.SalesPerson
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SalesPerson); ok {
		r0 = rf(ctx, partnerID, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SalesPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalesPersonBySubjectID provides a mock function with given fields: ctx, partnerID, subjectID
func (_m *MockInterface) SalesPersonBySubjectID(ctx context.Context, partnerID string, subjectID string) (*subject.SalesPerson, error) {
	ret := _m.Called(ctx, partnerID, subjectID)

	var r0 *subject.SalesPerson
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SalesPerson); ok {
		r0 = rf(ctx, partnerID, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SalesPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
