// Code generated by mockery v1.0.0
package subject

import mock "github.com/stretchr/testify/mock"
import subjectcontext "github.com/vendasta/gosdks/iam/subjectcontext"
import time "time"

// MockSubject is an autogenerated mock type for the Subject type
type MockSubject struct {
	mock.Mock
}

// Context provides a mock function with given fields:
func (_m *MockSubject) Context() *subjectcontext.Context {
	ret := _m.Called()

	var r0 *subjectcontext.Context
	if rf, ok := ret.Get(0).(func() *subjectcontext.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subjectcontext.Context)
		}
	}

	return r0
}

// Created provides a mock function with given fields:
func (_m *MockSubject) Created() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Email provides a mock function with given fields:
func (_m *MockSubject) Email() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LastLogin provides a mock function with given fields:
func (_m *MockSubject) LastLogin() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// SubjectID provides a mock function with given fields:
func (_m *MockSubject) SubjectID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Updated provides a mock function with given fields:
func (_m *MockSubject) Updated() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}
