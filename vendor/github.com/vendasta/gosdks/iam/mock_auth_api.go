// Code generated by mockery v1.0.0
package iam

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"
import subjectcontext "github.com/vendasta/gosdks/iam/subjectcontext"

// MockAuthAPI is an autogenerated mock type for the AuthAPI type
type MockAuthAPI struct {
	mock.Mock
}

// ExchangeToken provides a mock function with given fields: ctx, key
func (_m *MockAuthAPI) ExchangeToken(ctx context.Context, key *ClientKey) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *ClientKey) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ClientKey) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateClientKey provides a mock function with given fields: ctx, subCtx, email
func (_m *MockAuthAPI) GenerateClientKey(ctx context.Context, subCtx *subjectcontext.Context, email string) (*ClientKey, error) {
	ret := _m.Called(ctx, subCtx, email)

	var r0 *ClientKey
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) *ClientKey); ok {
		r0 = rf(ctx, subCtx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ClientKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, subCtx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortLivedToken provides a mock function with given fields: ctx, iamContext, email
func (_m *MockAuthAPI) GetShortLivedToken(ctx context.Context, iamContext *subjectcontext.Context, email string) (string, error) {
	ret := _m.Called(ctx, iamContext, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) string); ok {
		r0 = rf(ctx, iamContext, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
