// Code generated by mockery v1.0.0
package iam

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"
import subject "github.com/vendasta/gosdks/iam/subject"

// MockSMBAPI is an autogenerated mock type for the SMBAPI type
type MockSMBAPI struct {
	mock.Mock
}

// RegisterSMBSubject provides a mock function with given fields: ctx, partnerID, email, accountGroupIDs
func (_m *MockSMBAPI) RegisterSMBSubject(ctx context.Context, partnerID string, email string, accountGroupIDs []string) (string, error) {
	ret := _m.Called(ctx, partnerID, email, accountGroupIDs)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) string); ok {
		r0 = rf(ctx, partnerID, email, accountGroupIDs)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, partnerID, email, accountGroupIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SMBByEmail provides a mock function with given fields: ctx, partnerID, email
func (_m *MockSMBAPI) SMBByEmail(ctx context.Context, partnerID string, email string) (*subject.SMB, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *subject.SMB
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SMB); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SMB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SMBBySessionID provides a mock function with given fields: ctx, partnerID, sessionID
func (_m *MockSMBAPI) SMBBySessionID(ctx context.Context, partnerID string, sessionID string) (*subject.SMB, error) {
	ret := _m.Called(ctx, partnerID, sessionID)

	var r0 *subject.SMB
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SMB); ok {
		r0 = rf(ctx, partnerID, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SMB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SMBBySubjectID provides a mock function with given fields: ctx, partnerID, subjectID
func (_m *MockSMBAPI) SMBBySubjectID(ctx context.Context, partnerID string, subjectID string) (*subject.SMB, error) {
	ret := _m.Called(ctx, partnerID, subjectID)

	var r0 *subject.SMB
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SMB); ok {
		r0 = rf(ctx, partnerID, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SMB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
