// Code generated by mockery v1.0.0
package iam

import context "golang.org/x/net/context"
import iam_v1 "github.com/vendasta/gosdks/pb/iam/v1"
import mock "github.com/stretchr/testify/mock"
import subject "github.com/vendasta/gosdks/iam/subject"
import subjectcontext "github.com/vendasta/gosdks/iam/subjectcontext"

// MockSubjectAPI is an autogenerated mock type for the SubjectAPI type
type MockSubjectAPI struct {
	mock.Mock
}

// AddKey provides a mock function with given fields: ctx, iamContext, email
func (_m *MockSubjectAPI) AddKey(ctx context.Context, iamContext *subjectcontext.Context, email string) (PrivateKey, string, error) {
	ret := _m.Called(ctx, iamContext, email)

	var r0 PrivateKey
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) PrivateKey); ok {
		r0 = rf(ctx, iamContext, email)
	} else {
		r0 = ret.Get(0).(PrivateKey)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) string); ok {
		r1 = rf(ctx, iamContext, email)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r2 = rf(ctx, iamContext, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByEmail provides a mock function with given fields: ctx, iamContext, email
func (_m *MockSubjectAPI) GetByEmail(ctx context.Context, iamContext *subjectcontext.Context, email string) (subject.Subject, error) {
	ret := _m.Called(ctx, iamContext, email)

	var r0 subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) subject.Subject); ok {
		r0 = rf(ctx, iamContext, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subject.Subject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySessionID provides a mock function with given fields: ctx, iamContext, sessionID
func (_m *MockSubjectAPI) GetBySessionID(ctx context.Context, iamContext *subjectcontext.Context, sessionID string) (subject.Subject, error) {
	ret := _m.Called(ctx, iamContext, sessionID)

	var r0 subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) subject.Subject); ok {
		r0 = rf(ctx, iamContext, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subject.Subject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySubjectID provides a mock function with given fields: ctx, iamContext, subjectID
func (_m *MockSubjectAPI) GetBySubjectID(ctx context.Context, iamContext *subjectcontext.Context, subjectID string) (subject.Subject, error) {
	ret := _m.Called(ctx, iamContext, subjectID)

	var r0 subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string) subject.Subject); ok {
		r0 = rf(ctx, iamContext, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subject.Subject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string) error); ok {
		r1 = rf(ctx, iamContext, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubjectContext provides a mock function with given fields: ctx, subjectID
func (_m *MockSubjectAPI) GetSubjectContext(ctx context.Context, subjectID string) (*subjectcontext.Context, error) {
	ret := _m.Called(ctx, subjectID)

	var r0 *subjectcontext.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) *subjectcontext.Context); ok {
		r0 = rf(ctx, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subjectcontext.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPersonas provides a mock function with given fields: ctx, sessionID, cursor, pageSize, personaType
func (_m *MockSubjectAPI) ListPersonas(ctx context.Context, sessionID string, cursor string, pageSize int64, personaType string) ([]subject.Subject, string, bool, error) {
	ret := _m.Called(ctx, sessionID, cursor, pageSize, personaType)

	var r0 []subject.Subject
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, string) []subject.Subject); ok {
		r0 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]subject.Subject)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, string) string); ok {
		r1 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, string) bool); ok {
		r2 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string, int64, string) error); ok {
		r3 = rf(ctx, sessionID, cursor, pageSize, personaType)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Register provides a mock function with given fields: ctx, iamContext, email, password, attributes
func (_m *MockSubjectAPI) Register(ctx context.Context, iamContext *subjectcontext.Context, email string, password string, attributes *iam_v1.StructAttribute) (string, error) {
	ret := _m.Called(ctx, iamContext, email, password, attributes)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string, string, *iam_v1.StructAttribute) string); ok {
		r0 = rf(ctx, iamContext, email, password, attributes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subjectcontext.Context, string, string, *iam_v1.StructAttribute) error); ok {
		r1 = rf(ctx, iamContext, email, password, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveKey provides a mock function with given fields: ctx, iamContext, email, keyID
func (_m *MockSubjectAPI) RemoveKey(ctx context.Context, iamContext *subjectcontext.Context, email string, keyID string) error {
	ret := _m.Called(ctx, iamContext, email, keyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subjectcontext.Context, string, string) error); ok {
		r0 = rf(ctx, iamContext, email, keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
