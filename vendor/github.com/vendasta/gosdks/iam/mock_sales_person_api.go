// Code generated by mockery v1.0.0
package iam

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"
import subject "github.com/vendasta/gosdks/iam/subject"

// MockSalesPersonAPI is an autogenerated mock type for the SalesPersonAPI type
type MockSalesPersonAPI struct {
	mock.Mock
}

// SalesPersonByEmail provides a mock function with given fields: ctx, partnerID, email
func (_m *MockSalesPersonAPI) SalesPersonByEmail(ctx context.Context, partnerID string, email string) (*subject.SalesPerson, error) {
	ret := _m.Called(ctx, partnerID, email)

	var r0 *subject.SalesPerson
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SalesPerson); ok {
		r0 = rf(ctx, partnerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SalesPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalesPersonBySessionID provides a mock function with given fields: ctx, partnerID, sessionID
func (_m *MockSalesPersonAPI) SalesPersonBySessionID(ctx context.Context, partnerID string, sessionID string) (*subject.SalesPerson, error) {
	ret := _m.Called(ctx, partnerID, sessionID)

	var r0 *subject.SalesPerson
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SalesPerson); ok {
		r0 = rf(ctx, partnerID, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SalesPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SalesPersonBySubjectID provides a mock function with given fields: ctx, partnerID, subjectID
func (_m *MockSalesPersonAPI) SalesPersonBySubjectID(ctx context.Context, partnerID string, subjectID string) (*subject.SalesPerson, error) {
	ret := _m.Called(ctx, partnerID, subjectID)

	var r0 *subject.SalesPerson
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *subject.SalesPerson); ok {
		r0 = rf(ctx, partnerID, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subject.SalesPerson)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, partnerID, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
