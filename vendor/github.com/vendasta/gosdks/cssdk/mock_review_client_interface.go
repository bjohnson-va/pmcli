// Code generated by mockery v1.0.0
package cssdk

import context "golang.org/x/net/context"
import mock "github.com/stretchr/testify/mock"

// MockReviewClientInterface is an autogenerated mock type for the ReviewClientInterface type
type MockReviewClientInterface struct {
	mock.Mock
}

// GetStats provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockReviewClientInterface) GetStats(_a0 context.Context, _a1 string, _a2 string) (*ReviewStats, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *ReviewStats
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ReviewStats); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReviewStats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lookup provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockReviewClientInterface) Lookup(_a0 context.Context, _a1 string, _a2 ...LookupOption) (*ReviewLookupResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ReviewLookupResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...LookupOption) *ReviewLookupResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReviewLookupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...LookupOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
