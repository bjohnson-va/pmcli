package taskqueue

// Code generated by mockery v1.0.0

import context "context"
import mock "github.com/stretchr/testify/mock"
import time "time"

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// AckTask provides a mock function with given fields: ctx, taskID, ackID
func (_m *MockInterface) AckTask(ctx context.Context, taskID string, ackID string) error {
	ret := _m.Called(ctx, taskID, ackID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskID, ackID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaseTask provides a mock function with given fields: ctx, queueID, leaseDuration, maxToLease, filter
func (_m *MockInterface) LeaseTask(ctx context.Context, queueID string, leaseDuration time.Duration, maxToLease int64, filter string) (Task, error) {
	ret := _m.Called(ctx, queueID, leaseDuration, maxToLease, filter)

	var r0 Task
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, int64, string) Task); ok {
		r0 = rf(ctx, queueID, leaseDuration, maxToLease, filter)
	} else {
		r0 = ret.Get(0).(Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, int64, string) error); ok {
		r1 = rf(ctx, queueID, leaseDuration, maxToLease, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseTasks provides a mock function with given fields: ctx, queueID, leaseDuration, maxToLease, filter
func (_m *MockInterface) LeaseTasks(ctx context.Context, queueID string, leaseDuration time.Duration, maxToLease int64, filter string) ([]Task, error) {
	ret := _m.Called(ctx, queueID, leaseDuration, maxToLease, filter)

	var r0 []Task
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, int64, string) []Task); ok {
		r0 = rf(ctx, queueID, leaseDuration, maxToLease, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, int64, string) error); ok {
		r1 = rf(ctx, queueID, leaseDuration, maxToLease, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NackTask provides a mock function with given fields: ctx, taskID, ackID
func (_m *MockInterface) NackTask(ctx context.Context, taskID string, ackID string) error {
	ret := _m.Called(ctx, taskID, ackID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskID, ackID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenewLease provides a mock function with given fields: ctx, t, leaseDuration
func (_m *MockInterface) RenewLease(ctx context.Context, t Task, leaseDuration time.Duration) error {
	ret := _m.Called(ctx, t, leaseDuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Task, time.Duration) error); ok {
		r0 = rf(ctx, t, leaseDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleTask provides a mock function with given fields: ctx, queueID, payload, opts
func (_m *MockInterface) ScheduleTask(ctx context.Context, queueID string, payload PayloadDefinition, opts ...TaskSchedulingOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, queueID, payload)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, PayloadDefinition, ...TaskSchedulingOption) error); ok {
		r0 = rf(ctx, queueID, payload, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
