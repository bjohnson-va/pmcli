// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package syncmap

import "sync"

// SyncStringBoolMap is a threadsafe wrapper around a map[string]bool, safe for concurrent access.
type SyncStringBoolMap struct {
	// hashmap is the underlying map[string]bool.
	hashmap map[string]bool
	lock    sync.RWMutex
}

// NewSyncStringBoolMap creates a new threadsafe map storing bool values keyed by string keys.
func NewSyncStringBoolMap() *SyncStringBoolMap {
	return ToSyncStringBoolMap(nil)
}

// SyncStringBoolMap creates a new SyncStringBoolMap prepopulated with the data from the
// specified map[string]bool.
func ToSyncStringBoolMap(data map[string]bool) *SyncStringBoolMap {
	if data == nil {
		data = make(map[string]bool)
	}
	return &SyncStringBoolMap{hashmap: data}
}

// Get gets the bool value for the given string key, and a bool indicating whether the key was present or not.
func (cm *SyncStringBoolMap) Get(k string) (bool, bool) {
	cm.lock.RLock()
	v, ok := cm.hashmap[k]
	cm.lock.RUnlock()
	return v, ok
}

// Set sets the bool value for the specified string key.
func (cm *SyncStringBoolMap) Set(k string, v bool) {
	cm.lock.Lock()
	cm.hashmap[k] = v
	cm.lock.Unlock()
}

// Delete removes the specified string key, returning its bool value and a bool indicating whether the delete
// occurred or not.
func (cm *SyncStringBoolMap) Delete(k string) (bool, bool) {
	cm.lock.Lock()
	v, ok := cm.hashmap[k]
	if ok {
		delete(cm.hashmap, k)
	}
	cm.lock.Unlock()
	return v, ok
}
